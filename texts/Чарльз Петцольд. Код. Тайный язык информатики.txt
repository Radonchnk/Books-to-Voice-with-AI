УДК 004 ББК 32.973.26–018 П33 Петцольд Ч. П33 Код. — М.: Издательско-торговый дом «Русская Редакция», 2001. — 512 с.: ил. ISBN 5–7502–0159–7 Эта книга — азбука компьютерных технологий. Шаг за ша- гом автор знакомит читателя с сущностью кодирования информа- ции, рассказывает об истории возникновения компьютеров, на практических примерах помогает освоить основные концепции ин- формационных технологий, подробно излагает принципы рабо- ты процессора и других устройств компьютера. Написанная живо, доступно, иногда иронично, книга богато иллюстрирована, состоит из 25 глав и предметного указателя. Издание адресовано в первую очередь студентам вузов (как гуманитарных, так и технических), а также всем, кто интересует- ся принципами создания и работы компьютеров. УДК 004 ББК 32.973.26–018 Подготовлено к печати по лицензионному договору с Microsoft Corporation, Редмонд, Вашингтон, США. Использованные в примерах и упражнениях названия компаний и продуктов, персо- нажи и события вымышлены, за исключением особо отмеченных случаев. Любые со- впадения с реальными компаниями, продуктами, людьми и событиями являются слу- чайными. Портреты Чарльза Бэббиджа, Джорджа Буля, Луи Брайля, Германа Холлерита, Сэмюэ- ля Морзе и Джона фон Неймана публикуются с разрешения Corbis Images и отредак- тированы для этой книги Джоэлем Пэнчотом (Joel Panchot). Обложка журнала Popular Electronics (январь 1975 г.) воспроизводится с разрешения Ziff-Davis и семьи Ziff. Все остальные иллюстрации подготовлены Джоэлем Пэнчотом. Macintosh является охраняемым товарным знаком корпорации Apple Computer. Microsoft, MS-DOS и Windows являются либо товарными знаками, либо охраняемыми товарными знаками корпорации Microsoft в США и/или других странах. Все другие то- варные знаки являются собственностью соответствующих фирм. ISBN 0–7356–1131–9 (Aнгл.) ISBN 5–7502–0159–7 © Оригинальное издание на английском языке Microsoft Corporation, 2000 © Перевод на русский язык, Microsoft Corporation, 2001 © Оформление и подготовка к изданию; издательско-торговый дом «Русская Редакция», 2001 Оглавление Предисловие ...........................................................VII Глава 1 Верные друзья .........................................1 Глава 2 Коды и комбинации ................................ 9 Глава 3 Брайль и двоичные коды ........................15 Глава 4 Анатомия фонарика .............................. 23 Глава 5 Там, за поворотом ................................. 35 Глава 6 Телеграф и реле ..................................... 45 Глава 7 Великолепная десятка ........................... 53 Глава 8 Альтернативы десяти .............................61 Глава 9 За битом бит......................................... 77 Глава 10 Логика и переключатели ....................... 99 Глава 11 Вентили, которые не протекают ........... 119 Глава 12 Двоичный сумматор ............................. 153 Глава 13 А как же вычитание? .......................... 169 Глава 14 Обратная связь и триггеры...................185 Глава 15 Байты и шестнадцатеричные числа....... 215 Глава 16 Сборка памяти .................................... 229 Глава 17 Автоматизация ................................... 249 Глава 18 От счетов к микросхемам .................... 289 Глава 19 Два классических микропроцессора .....321 Глава 20 ASCII — символы нашего времени..... 357 Глава 21 Под шорох шин................................... 377 Глава 22 Операционная система ........................ 403 Глава 23 Фиксированная точка, плавающая точка ................................. 423 Глава 24 Языки высокие и низкие ..................... 439 Глава 25 Графическая революция ....................... 459 Предметный указатель .......................................... 486 Предисловие Идея книги Код стучалась мне в голову в течение десятилетия, прежде чем я начал ее писать. И все то время, что я обдумывал книгу, писал и даже после того, как она была опубликована, люди спрашивали меня: «О чем эта книга?» На этот вопрос я всегда отвечал с неохотой. Мямлил что- то об «уникальном путешествии по истории цифровых тех- нологий, определивших облик нашего времени», надеясь, что этого будет достаточно. Но в конце концов мне пришлось признать: «Код — книга о том, как работают компьютеры». Как я и опасался, реакция оказалась неблагоприятной. «А-а, такая книга у меня уже есть», — говорили некоторые, а я сразу возражал: «Нет, нет, нет, вот как раз такой книги у вас и нет». И до сих пор считаю, что это верно. Код — это не просто описание действия компьютера. В ней нет больших цветных изображе- ний жестких дисков со стрелками, указывающими направление перемещения данных в компьютере. Нет рисунков, на которых локомотивы тащили бы вагоны, груженные нулями и единица- ми. Метафоры и сравнения, с одной стороны, украшают текст, а с другой — мешают постичь красоту технологии. Приходилось мне слышать и такое: «Народу нет дела до того, как работают компьютеры». И это, по-моему, тоже вер- но. Мне, например, доставляет удовольствие узнавать, как ра- ботает тот или иной прибор. Но при этом я предпочитаю вы- бирать, в чем я хочу разобраться, а в чем — нет. Мне, скажем, трудно без насилия над собой объяснить принцип действия холодильника. И все же люди часто задают вопросы, которые подтверж- дают их интерес к внутреннему устройству компьютера. Один из них: «В чем разница между оперативной и постоянной па- мятью?» VIII Предисловие Это, без сомнения, очень важный вопрос. На подобных понятиях основан весь рынок персональных компьютеров. Предполагается, что даже новичок понимает, сколько мегов одной и гигов другой потребуется его программам. Считается также, что в самом начале знакомства с компьютером пользо- ватель постигает концепцию файла и представляет себе, как файлы загружаются из постоянной в оперативную память, а затем из оперативной записываются обратно в постоянную. На вопрос о постоянстве и оперативности часто отвечают, используя такую аналогию: «Считайте, что оперативная память — это ваш рабочий стол, а постоянная — шкаф с папками». И думают, что это прекрасное сравнение! Но я его таковым не считаю: создается впечатление, что архитектура компьютера срисована с обычной конторы. Правда же заключается в том, что различие между постоянной и оперативной памятью ис- кусственно и существует лишь потому, что нам до сих пор не удалось создать накопитель данных, который был бы одновре- менно быстрым, объемным и способным хранить информа- цию в течение долгого времени. То, что сегодня называется архитектурой Неймана — доминирующая компьютерная ар- хитектура в течение последних 50 лет, — прямое следствие этого технического несовершенства. Еще меня как-то спросили: «Почему программы для Macintosh нельзя запускать под Windows?» Я уже было открыл рот, чтобы ответить, но вдруг осознал, что ответ будет содер- жать гораздо больше технических подробностей, чем рассчи- тывает услышать спросивший. Я хочу, чтобы книга Код помогла вам разобраться в подоб- ных вещах, причем не абстрактно, а глубоко, практически на уровне инженера или программиста. Надеюсь также, что в ней компьютер предстанет перед вами как одно из наиболее выда- ющихся изобретений XX века и вы поймете, что он прекрасен сам по себе, даже без изысканных метафор и сравнений. Компьютер представляет собой иерархию, в основании которой лежат транзисторы, а на вершине — информация, отображаемая на мониторе. Переходы с одного уровня этой иерархии на следующий — а книга Код построена именно так — далеко не так тяжелы, как думает большинство. Конечно, действие современного компьютера состоит из бесчисленных IX Предисловие операций, но среди них множество простых или сходных меж- ду собой. Компьютеры наших дней сложнее тех, что появились 25 или 50 лет назад, но в основе своей они остались теми же. Вот почему изучать историю технологии так удобно: чем дальше вы уходите в прошлое, тем проще становится технология. Рано или поздно вы достигаете этапа, разобраться в котором уже не представляет особого труда. В книге Код я ушел настолько далеко в прошлое, насколько это было возможно. К своему удивлению, я обнаружил, что точка отсчета лежит в XIX столетии и я могу использовать для описания работы компьютера принципы устройства телеграф- ного оборудования. Все, что описано в первых 17-ти главах книги, можно построить, хотя бы теоретически, из простых электрических устройств, известных уже более 100 лет. Мне кажется, что обращение к античным технологиям при- дает этой книге этакий ностальгический аромат. Она не могла бы называться Быстрее и еще быстрее или, скажем, Бизнес со скоростью нервного импульса. Понятие «бит» определено в ней лишь на 76-й странице, слово «байт» не встречается до 215-й. Транзисторы не упоминаются до 167-й страницы, да и там — лишь бегло. Вот почему читать эту книгу довольно легко, хотя работа компьютера разбирается в ней с глубочайшими подробностя- ми (много ли вы знаете книг, в которых действительно описы- валась бы суть работы процессора?). Я старался, чтобы глубина изложения не сделала путешествие менее комфортабельным. Но без локомотивов, которые тащат вагоны, груженные ну- лями и единицами. Чарльз Петцольд 16 августа 2000 г. X Предисловие code n 1. 1) кодекс, свод законов 2) законы, принципы (чести, мора- ли и т. п.) 2. 1) код; Morse ~ код /азбука/ Морзе; telegraphic ~ телеграф- ный код 2) шифр 3. биол. генетический код 4. вчт. программа (особ. прикладная) 5. ком. маркировка; шифр. индекс (продукта)… Новый большой англо-русский словарь (под общим руко- водством академика Ю.Д.Апресяна и доктора филологических наук, профессора Э.М. Медниковой). Издание 2-е, исправлен- ное. М.: «Русский язык», 1997. Глава 1 Верные друзья Представьте себе, что вам 10 лет. Ваш лучший друг живет в доме напротив, так что окна ваших комнат смотрят друг на друга. Вечером, когда родители, как всегда, не вовремя отпра- вили вас в кровать, вам хочется посекретничать, обменяться мыслями, наблюдениями, новостями, мечтами или рассказать свежий анекдот. В этом нет ничего зазорного. В конце концов тяга к общению — одна из самых человеческих черт. Как же вам пообщаться? Может, по телефону? Но часто ли у 10-летнего ребенка в комнате стоит телефон? А если и есть, то разговор услышат в другой комнате. Компьютер, подклю- ченный к телефонной линии, позволяет обмениваться сооб- щениями бесшумно, но и он тоже стоит не в вашей комнате. Что у вас обоих есть наверняка, так это карманные фона- рики. Всем известно: фонарики изобретены для того, чтобы дети могли читать книжки под одеялом. Кроме того, это пре- красное средство для общения в темноте. Фонарик достаточ- но бесшумен, а его луч имеет определенное направление и не просачивается под дверь спальни, так что о разговоре с помо- щью фонарика ваше бдительное семейство не догадается. Но можно ли заставить фонарик говорить? Давайте попро- буем. В первом классе вы научились выводить на бумаге бук- вы и слова, теперь пришла пора поделиться этим знанием с фонариком. Все, что для этого нужно, — подойти к окну и рисовать буквы лучом света. Чтобы «написать» О, включите 2 Глава первая фонарик, обведите в воздухе круг, а затем выключите его. Буква Г рисуется так — включите фонарик и проведите им вверх и вбок. Впрочем, легко убедиться, что этот способ для общения не годится. Увидев, какие кренделя выписывает в воздухе луч фонарика вашего друга, вы поймете, что разобрать в мелька- нии света отдельные штрихи и буквы невозможно. Все эти све- товые росчерки недостаточно определенны. Вы наверняка видели в каком-нибудь фильме, как моряки на кораблях посылают друг другу сигналы с помощью мигаю- щих огней. А в другой картине шпион, покачивая зеркальцем, пускал солнечные зайчики в окно дома, где лежал связанным его коллега. Может быть, это выход? Начнем с самого просто- го, что приходит на ум. Обозначим каждую букву алфавита определенным числом вспышек: А будем обозначать одной вспышкой, Б — двумя, В — тремя и так до Я (33 вспышки). Например, чтобы передать слово «бег», нужно мигнуть фона- риком 2, 6 и 4 раза с небольшими паузами между буквами, что- бы друг не принял их за одну букву К (12 вспышек). Между словами паузы нужно еще увеличить. Это уже кое-что. По крайней мере не нужно размахивать фонариком: направляй луч в нужную сторону и щелкай кноп- кой. Правда, у этого способа есть и недостаток — чтобы пере- дать обычный для начала разговора вопрос «Как жизнь?», по- надобится целых 95 вспышек, даже если забыть о знаке вопро- са, для которого тоже нужно задать число вспышек. Но кажется, решение где-то рядом. Наверняка кто-то уже ломал голову над подобной проблемой, думаете вы, и вы аб- солютно правы. Наступает утро, вы идете в библиотеку и на- ходите там книги об удивительном изобретении, которое на- зывают азбукой Морзе. Это в точности то, что вам нужно, хотя теперь придется заново учиться писать все буквы. Вот в чем отличие азбуки Морзе от вашей системы. Вы по- ставили каждой букве в соответствие определенное число оди- наковых вспышек (от 1 для А до 33 для Я). В азбуке Морзе ис- пользуются вспышки двух типов — короткие и длинные. Это, конечно, усложняет ее, но с другой стороны делает куда более эффективной. С помощью азбуки Морзе фраза «Как жизнь?» кодируется всего 30 вспышками (как короткими, так и длин- ными), а не 95, причем с учетом знака вопроса. 3 Верные друзья Говоря об азбуке Морзе, обычно говорят не о коротких и длинных вспышках, а о точках и тире, поскольку с их помо- щью код удобно изображать на бумаге. Каждой букве алфави- та соответствует собственная последовательность точек и тире. A Б В Г Д Ж З И Й У Ф Х Ц Ч Ш Щ Ъ,Ь К Л М Н О П Р С Т K L M N O P R S T U F  H C Q X Y  A B W G D E E V Z I J Ы Ю Я Хотя азбука Морзе не имеет к компьютерам абсолютно ни- какого отношения, тесное знакомство с концепцией кодирова- ния необходимо для постижения тайного языка и внутренней сути аппаратного и программного воплощений компьютера. В этой книге слово код обычно обозначает некую систему для обмена информацией между людьми и машинами. Иначе говоря, код — это средство коммуникации. И хотя коды иног- да ассоциируются с какой-то тайной, чаще их используют для других целей. В определенном смысле коды вообще составля- ют основу любого человеческого общения. В романе «Сто лет одиночества» Габриэль Гарсия Маркес вспоминает о временах, когда «мир был так юн, что вещи еще не обрели свои имена, и чтобы как-то обозначить их, нужно было указать на них пальцем». Обычно имена, которые мы даем вещам, кажутся произвольными. Непонятно, например, почему кошку не назвали собакой, а собаку — кошкой. Мож- но сказать, что обычный толковый словарь — это разновид- ность кода. Звуки, издаваемые при произнесении слова, — это код, по- нятный любому, кто способен услышать наш голос и понима- 4 Глава первая ет язык, на котором мы говорим. Мы называем этот код ре- чью. Для слов, изображаемых на бумаге (или на камне, или на дереве), существует другой код — в виде написанных или на- печатанных символов. Мы называем этот код письмом или тек- стом. Во многих языках между речью и письмом имеется стро- гое соответствие. В европейских языках, например, буквам или группам букв отвечают (в той или иной степени) определен- ные звуки. Для глухонемых разработан особый код — язык знаков, в котором движения рук обозначают буквы, целые слова и поня- тия. Для слепых письмо заменяется азбукой Брайля, в которой буквы, группы букв и целые слова закодированы наборами вы- пуклых точек. Когда устную речь нужно очень быстро перевес- ти в текст, применяют особый код — стенографию (скоропись). Для общения люди используют множество различных ко- дов, потому что одни коды иногда удобнее других. Например, устную речь нельзя сохранить на бумаге, поэтому вместо нее мы применяем письмо. Беззвучный обмен информацией на расстоянии и в темноте посредством речи или письма невозмо- жен, поэтому в ряде случаев удобной альтернативой им оказы- вается азбука Морзе. Код полезен, если выполняет задачу, с ко- торой в данных обстоятельствах не справляются другие коды. Как мы увидим ниже, в компьютерах также применяются различные типы кодов для хранения и передачи чисел, звуков, музыки, изображений и фильмов. Компьютер не может иметь дело с человеческими кодами напрямую — ведь у него нет глаз, ушей, рта и пальцев, столь необходимых людям при общении. Правда, в последнее время появилась тенденция учить персо- нальные компьютеры воспринимать, хранить, обрабатывать и воспроизводить все типы информации, применяемые в че- ловеческом общении: видимую (текст и изображения), слы- шимую (устная речь, звуки и музыка) или их сочетание (муль- типликация и кино). Каждый из этих видов информации тре- бует собственного кода подобно тому, как человеку нужны одни органы для речи (рот и уши) и другие (руки и глаза) — для письма. Даже таблица с расшифровкой азбуки Морзе сама по себе — тоже своеобразный код. Из нее видно, что каждая буква пред- ставлена набором точек и тире, однако в реальности мы не мо- жем посылать точки и тире, а потому заменяем их вспышками. 5 Верные друзья Чтобы передать точку азбуки Морзе с помощью фонари- ка, нужно очень быстро включить и выключить его (короткая вспышка). Для передачи тире фонарик остается включенным немного дольше (долгая вспышка). Например, чтобы передать букву А, надо включить фонарик и тут же выключить, а затем включить опять и выключить уже с меньшей поспешностью. Перед следующим символом нужно сделать паузу. Традици- онно тире длится примерно в три раза дольше точки. Если, скажем, для передачи точки фонарик горит секунду, то для передачи тире — три (в действительности, сообщения «мор- зянкой» передаются гораздо быстрее). Получатель, видя корот- кую вспышку, а за ней длинную, понимает, что это буква А. Паузы между точками и тире в азбуке Морзе имеют боль- шое значение. При передаче буквы А между точкой и тире фонарик следует выключить на время, примерно равное дли- тельности точки (если точка длится секунду, то промежуток между точками и тире также составляет одну секунду). Буквы одного слова разделяются более длинными паузами, равными примерно одному тире (например, трем секундам, если тако- ва длительность тире). В следующем примере показано слово «привет» с надлежащими паузами между буквами. Между словами фонарик остается выключенным на время примерно двух тире (6 секунд, если тире длится 3 секунды). Вот код для фразы «как жизнь». Продолжительность пауз между буквами и словами жест- ко не зафиксирована. Все определяется только длительностью точки, а она зависит от того, как быстро вы способны нажи- мать кнопку фонарика, а еще от того, как долго отправитель вспоминает код очередной буквы в азбуке Морзе. Тире опыт- ного «морзянщика» может длиться как точка медлительного. Это, конечно, может затруднить чтение сообщения на азбуке Морзе, однако после одной-двух букв получатель обычно при- норавливается различать точки и тире. Поначалу определение азбуки Морзе — а определением я называю соответствие между последовательностями точек и тире и буквами алфавита — кажется столь же произвольным, 6 Глава первая как расположение букв на клавиатуре пишущей машинки. Однако при ближайшем рассмотрении это оказывается совсем не так. Самые простые и короткие коды присвоены часто упот- ребляемым буквам, например, Е и Т, а у менее популярных букв, таких как Ш или Щ, коды подлиннее. Есть некий минимум азбуки Морзе, известный почти каж- дому человеку: 3 точки, 3 тире, 3 точки представляют собой международный сигнал бедствия — SOS. Это не сокращение, а просто легко запоминающаяся последовательность кодов. Еще один пример из жизни. Во время второй мировой войны радио BBC начинало некоторые передачи вступлением к Пя- той симфонии Бетховена — БА, БА, БА, БА-А-АМММ. Ком- позитор и не подозревал, что начинает симфонию кодом Морзе для буквы V (Victory, т. е. победа). Недостаток азбуки Морзе в том, что в ней не различаются прописные и строчные буквы. Зато в ней нашлось место циф- рам, зашифрованным наборами из пяти точек и тире. 1 2 3 4 5 6 7 8 9 0 В отличие от букв в этих кодах есть порядок. Знаки препи- нания зашифрованы пятью, шестью или даже семью точками и тире. . , ? : ; � / " ' ( ) = + $ ¶ _ / 7 Верные друзья Есть еще специальные коды для букв с диакритическими знаками (вроде знака ударения) из некоторых европейских языков и несколько служебных последовательностей (начало передачи, готовность к приему, ошибка и пр.). К последним относится и код SOS — его передают без обычных пауз между буквами. Со временем вы обнаружите, что гораздо легче посылать «морзянку» с помощью специально приспособленного фона- рика. В нем, кроме обычного выключателя, есть кнопка с пру- жиной. Фонарик горит, пока она нажата. Немного попракти- ковавшись, можно добиться скорости передачи 5–10 слов в минуту — это, конечно, медленнее речи (мы произносим при- мерно 100 слов в минуту), но вполне приемлемо. Когда вы с другом вызубрите азбуку Морзе (а зубрежка — единственный способ стать специалистом по отправке и при- ему «морзянки»), то сможете даже говорить азбукой Морзе, произнося вместо точки то, а вместо тире — ти. Письмо сво- дится азбукой Морзе к двум символам (точке и тире), а уст- ную речь с ее помощью можно сократить до двух слогов. Ключевое слово здесь — два. Два вида вспышек, два слога, два чего угодно способны в соответствующих комбинациях передать любую информацию. Глава 2 Коды и комбинации Азбуку Морзе придумал Сэмюэль Финли Бриз Морзе (Samuel Finley Breese Morse) (1791–1872), с которым мы на страницах этой книги встретимся еще не раз. Изобретение азбуки Морзе неразрывно связано с изобретением телеграфа, с которым мы тоже познакомимся. Подобно тому, как знакомство с азбукой Морзе помогает постичь сущность кодирования, изучение те- леграфа позволяет получить начальное представление о ком- пьютерном оборудовании. Для большинства людей передать сообщение на азбуке Морзе гораздо проще, чем принять его. Даже если вы не выу- чили азбуку наизусть, всегда можно положить перед собой таблицу, в которой все буквы расставлены по алфавиту. A Б В Г Д Ж З И Й У Ф Х Ц Ч Ш Щ Ъ,Ь К Л М Н О П Р С Т K L M N O P R S T U F  H C Q X Y  A B W G D E E V Z I J Ы Ю Я 10 Глава вторая На прием «морзянки» и ее перевод в слова уходит гораздо больше усилий и времени, чем на передачу. Это связано с тем, что в этом случае работать приходится «против шерсти» — искать букву, соответствующую последовательности точек и тире. Например, чтобы расшифровать последовательность «тире-точка-тире-тире», вам придется просмотреть буква за буквой почти всю таблицу — ведь это Ы! Беда в том, что у нас есть таблица для перевода в направлении: буква алфавита � точки и тире азбуки Морзе но нет таблицы, позволяющей выполнить обратное преобра- зование: точки и тире азбуки Морзе � буква алфавита. А ведь при первом знакомстве с азбукой Морзе такая таб- лица была бы очень кстати. Увы, принципы ее построения уло- вить ой как непросто. В наборах точек и тире нет ничего тако- го, что можно было расставить в алфавитном порядке. Забудем пока об алфавите. Попробуем сгруппировать коды в зависимости от количества точек и тире. Сначала поставим коды, состоящие из единственного значка, — это буквы Е (точ- ка) и Т (тире): E T Сочетания двух точек и (или) тире дают четыре буквы — И, А, Н и М. И A Н M Из сочетаний трех точек и тире получается уже 8 букв: С У Д K Р В Г O 11 Коды и комбинации Наконец, цепочки из четырех точек и тире дадут нам еще 16 символов (забудем пока о цифрах и знаках препинания): Ж Б Ф Ь Ю Ц Л Ы Я З П Щ Й Ч Ш Х Что получилось? Во всех четырех таблицах содержится 2 + 4 + + 8 + 16 = 30 кодов для букв, т. е. на 4 больше, чем необходимо для латинского алфавита, в котором 26 букв, и на 2 меньше, чем для русского (в азбуке Морзе твердый и мягкий знаки не различаются). Используя эти четыре таблицы, расшифровать сообщение, написанное «морзянкой», гораздо легче. Подсчитав число то- чек и тире в коде буквы, вы сразу возьмете нужную таблицу. Таблицы составлены так, что код, состоящий только из точек, находится в левом верхнем углу, а состоящий только из тире — в правом нижнем. Нетрудно заметить закономерность и в размерах таблиц — каждая следующая таблица вдвое больше предыдущей. Это и понятно: в каждую таблицу включены все коды из предыду- щей таблицы с дополнительной точкой и те же коды с допол- нительным тире. Подведем итог. Число точек и тире Число кодов 1 2 2 4 3 8 4 16 12 Глава вторая От таблицы к таблице число кодов удваивается: в первой 2 кода, во второй 2 � 2, в третьей — 2 � 2 � 2, т. е.: Число точек и тире Число кодов 1 2 2 2 � 2 3 2 � 2 � 2 4 2 � 2 � 2 � 2 Раз уж мы начали умножать числа сами на себя, можно за- писать эти примеры в виде возведения в степень. Например, 2  � 2 � 2 � 2 есть просто 2 в четвертой степени — 24. Числа 2, 4, 8 и 16 — это степени числа 2, поэтому перепишем таблицу так: Число точек и тире Число кодов 1 21 2 22 3 23 4 24 Таблица здорово упростилась. Число доступных кодов есть 2 в степени, равной числу точек и тире: Количество кодов = 2Количество точек и тире Степени числа 2 часто встречаются в кодировании, и еще одно подтверждение этой закономерности мы встретим в следую- щей главе. Для облегчения расшифровки азбуки Морзе нарисуем дре- вовидную диаграмму (см. стр. 13). На ней показано, как найти букву, соответствующую заданной последовательности точек и тире. Для расшифровки кода нужно идти по направлению, указанному стрелками. Пусть нужно определить, какая буква соответствует коду «точка-тире-точка». Начнем с крайней ле- вой точки: перемещаясь по стрелке вправо, переходим к тире, а затем — к точке. Итак, это буква Р, показанная справа от пос- ледней точки. Составитель азбуки Морзе вряд ли обошелся без подобной схемы. Во-первых, она гарантирует, что один и тот же код не будет использован для двух различных символов! Во-вторых, 13 Коды и комбинации она наглядно показывает, все ли возможные комбинации то- чек и тире уже использованы, что позволяет избежать введе- ния излишне длинных последовательностей. Х  Ж  Ф  Ю  Л  Я  П  Й  Б  Ь  Ц  Ы  З  Щ  Ч  Ш Е  Т И  А  Н  М С  У  Р  В  Д  К  Г  О Рискуя выйти за пределы страницы, мы можем дополнить схему кодами, состоящими из большего числа точек и тире. Последовательность из пяти точек и тире дает 32 дополнитель- ных кода (2 � 2 � 2 � 2 � 2 = 25). Этого вполне хватит для 10 цифр и 16 основных знаков препинания, и цифры в азбуке Морзе действительно кодируются пятью точками и тире. Чтобы включить все знаки препинания, схему нужно рас- ширить до шести точек и тире, добавив в общий набор симво- лов еще 64 (2 � 2 � 2 � 2 � 2 � 2 = 26) дополнительных кода, увеличив общее число кодов до 2 + 4 + 8 + 16 + 32 + 64 = 126. Для азбуки Морзе это уже явный перебор, и действительно, многие из длинных последовательностей остались в ней «нео- пределенными». В данном контексте выражение «неопределен- ный код» означает, что коду не соответствует никакой символ. 14 Глава вторая Получив в послании на азбуке Морзе неопределенный код, не сомневайтесь — отправитель допустил ошибку. Раз уж мы блеснули математическими познаниями и вы- вели формулу: Количество кодов = 2Количество точек и тире нам ничего не стоит подсчитать число кодов для еще более длинных последовательностей точек и тире: Число точек и тире Число кодов 1 21 = 2 2 22 = 4 3 23 = 8 4 24 = 16 5 25 = 32 6 26 = 64 7 27 = 128 8 28 = 256 9 29 = 512 10 210 = 1024 Благодаря этой формуле, нам не нужно выписывать все воз- можные коды, чтобы подсчитать их количество. Достаточно нужное число раз умножить число 2 само на себя. Азбука Морзе называется двоичным (binary) кодом, по- скольку элементов кода всего два: точка и тире. Этим он по- хож на монету, которая может выпасть либо орлом, либо реш- кой. При описании двоичных объектов или кодов (подобных азбуке Морзе) часто прибегают к степеням числа 2. Приведенный выше подсчет числа двоичных кодов — про- стое упражнение из раздела математики, который называется комбинаторикой или комбинаторным анализом. Обычно комбинаторный анализ применяют в теории вероятностей, по- скольку он позволяет вычислить вероятность выпадения опреде- ленной стороны монеты или числа на игральных костях. Но он полезен и при разработке кодов и шифров. Глава 3 Брайль и двоичные коды Сэмюэль Морзе не первым изобрел кодирование букв и не стал первым человеком, чье имя воспринимается скорее как назва- ние азбуки, а не как собственно имя. Этой чести удостоился слепой французский подросток, появившийся на свет 18 года- ми позже Морзе. О его жизни известно немногое, но и это не- многое заслуживает внимания. Луи Брайль (Louis Braille) родил- ся в 1809 г. во Франции, в местечке Кувре, в 25 милях восточнее Пари- жа. Его отец был шорником. Когда Луи было три года — в этом возрас- те малышу еще не следовало играть в отцовской мастерской — он слу- чайно уколол глаз шилом. В рану попала инфекция, заражение рас- пространилось на второй глаз, и мальчик полностью ослеп. Казалось, он обречен остаться неграмотным и влачить нищенское существование (обычная участь слепого в те времена). Однако у мальчика обнаружился живой ум и стра- стное желание учиться. Благодаря поддержке деревенского священника и школьного учителя он поначалу посещал вмес- 16 Глава третья те с другими детьми сельскую школу, а в 10 лет его отправили в Королевский институт для слепых в Париже. Одно из главных препятствий в обучении слепого челове- ка  — его неспособность читать. Основатель парижского ин- ститута Валентен Ойи (Valentin Hau..у) (1745–1822) придумал систему рельефных букв, которые можно было читать, каса- ясь пальцами. Однако на практике с этой системой было очень трудно работать, и потому книги, напечатанные таким спосо- бом, успехом не пользовались. Ойи не был слепым и оказался заложником штампов. Он, например, считал, что буква А — это А и ничто другое и пото- му должна походить на А даже на ощупь. Это напоминает наши попытки рисовать фонариком буквы в воздухе, но мы быстро поняли бесперспективность этого способа общения. Очевидно, Ойи не пришло в голову, что для слепых более удобным может оказаться код, существенно отличающийся от печатных букв. Идея такого кода пришла с неожиданной стороны. Капи- тан французской армии Шарль Барбье (Charles Barbier) разра- ботал в 1819 г. систему кодирования, которую назвал еґcriture nocturne, т. е. «ночное письмо». В этой системе применялись вы- пуклые точки и тире на плотной бумаге, и предлагалась она сол- датам как средство беззвучной ночной связи в полевых услови- ях. Солдаты должны были продавливать точки и тире с обрат- ной стороны бумаги пером, похожим на шило. Получатель пись- ма читал эти выпуклости, водя по ним кончиками пальцев. Недостатком системы Барбье была ее сложность. Барбье ре- шил кодировать с помощью сочетаний точек и тире не буквы, а звуки, и потому для шифрования некоторых слов требова- лось очень много кодов. Система оправдывала себя при пере- даче коротких сообщений, но была совершенно непригодна для длинных текстов, не говоря уже о книгах. Луи Брайль познакомился с системой Барбье в возрасте 12 лет. Система рельефных точек пришлась ему по душе, так как позволяла не только легко читать с помощью пальцев, но и писать. Ученик, вооружившись картоном и специальным пе- ром, делал в классе заметки, которые мог затем прочитать дома. Совершенствуя в течение трех лет эту систему, Луи Брайль разработал собственный шрифт (ему тогда было 15 лет), ос- новы которого используются и поныне. Многие годы его сис- тема применялась только в парижском институте, но посте- 17 Брайль и двоичные коды пенно распространилась более широко. Умер Луи Брайль в 1852 г. от туберкулеза в возрасте 43 лет. В наши дни у людей, лишенных зрения, появилась возмож- ность знакомиться с письменными источниками с помощью магнитофона. Но для слепоглухонемых шрифт Брайля и се- годня остается бесценным, единственным способом чтения. В последние годы о шрифте Брайля узнали многие, так как над- писи на нем стали делать в лифтах и банкоматах, чтобы ими могли пользоваться слепые. В этой главе мы рассмотрим принципы построения азбуки Брайля. Учить ее нам не потребуется. Мы просто попытаемся с помощью шрифта Брайля глубже проникнуть в природу ко- дирования. В шрифте Брайля символы письменного языка — буквы, цифры и знаки препинания — кодируются комбинациями от одной до шести выпуклых точек, расположенных в ячейке раз- мерами 2 � 3. Точки в ячейке нумеруются с 1 по 6: 1 2 3 4 5 6 Для выдавливания точек используются специальные пишущие машинки и станки. Я, конечно, мог бы включить в эту книгу пару страниц с рельефными буквами, но из-за этого она стала бы неоправ- данно дорогой. Чтобы не прибегать к тиснению, я воспользу- юсь системой, применяемой для отображения символов Брай- ля на страницах обычных книг. В каждой ячейке я буду пока- зывать все шесть точек: крупные точки будут соответствовать выпуклым точкам, а мелкие — плоским. Например, в этом символе точки 1, 3 и 5 — выпуклые, а точки 2, 4 и 6 — плоские. Для нас самое интересное в шрифте Брайля то, что он яв- ляется двоичным. Любая точка может пребывать в одном из двух состояний: плоская или выпуклая. Это значит, что к шрифту Брайля применимы наши познания об азбуке Морзе 18 Глава третья и комбинаторном анализе. Общее число комбинаций шести точек, каждая из которых может быть плоской или выпуклой, равно 2 � 2 � 2 � 2 � 2 � 2 = 26 = 64. Следовательно, система Брайля содержит 64 различных кода. Вот как они выглядят: Если окажется, что в шрифте Брайля меньше 64 кодов, мы зададимся вопросом, почему используются не все возможнос- ти. Если кодов окажется больше 64, сомнению подвергнутся либо наш рассудок, либо фундаментальные основы математики (а именно верность утверждения, что дважды два — четыре). Анализ шрифта Брайля начнем со строчных букв латинс- кого алфавита: 19 Брайль и двоичные коды Например, фраза «you and me» кодируется так: Заметьте: ячейки-буквы в пределах слова разделены неболь- шими интервалами, а между словами интервал побольше (раз- мером в одну ячейку). Эта основа разработана самим Луи Брайлем по крайней мере применительно к буквам латинского алфавита. Брайль ввел также коды для букв с диакритическими знаками, кото- рых во французском языке немало. Кстати, обратите внима- ние на отсутствие буквы w, которой в классическом француз- ском языке нет (не беспокойтесь, найдется код и для нее). Мы познакомились с 25 из 64 возможных кодов. Рассмотрев показанные выше строчки, вы без труда обна- ружите в них систему. В первой строке (от a до j) используют- ся только четыре верхние точки — 1, 2, 4 и 5. Вторая строка является повторением первой, но с добавлением выпуклой точки 3, в третьей строке выпуклой стала и точка 6. Со времен Брайля его код не раз дополнялся. Современ- ный вариант этой системы, наиболее часто употребляемый в публикациях на английском языке, называется «Брайлем 2-й ступени» (Grade 2 Braille). В нем несколько нововведений, при- званных сократить затраты бумаги и облегчить чтение. Напри- мер, если код отделен от своих соседей большим интервалом, он означает не букву, а одно из часто встречающихся слов. Ниже показана «словесная» расшифровка шрифта Брайля (за- метьте: третья строка «завершена»): (нет) (нет) (нет) Это значит, что фразу «you and me» можно записать компактнее: 20 Глава третья Пока что мы видели 31 код — промежуток между словами соответствует коду без единой выпуклой точки, и в дополне- ние к нему 3 строки по 10 кодов для букв и некоторых слов. До теоретического предела в 64 кодов все еще далеко. Но не со- мневайтесь: в современном шрифте Брайля забытых кодов нет. Во-первых, дополним коды букв от a до j выпуклой точкой 6. Эти коды используются в основном для обозначения час- тых сочетаний букв и забытой буквы «w»: или Вот, например, как выглядит слово «about»: Во-вторых, коды букв от a до j можно сдвинуть на один ряд точек вниз, задействовав только точки 2, 3, 5 и 6. Эти коды в зависимости от контекста применяются для некоторых зна- ков препинания или буквосочетаний: Первые четыре кода —  запятая, точка с запятой, двоеточие и точка. Заметьте: открывающаяся и закрывающаяся скобки представлены одним и тем же кодом, а открывающая и закры- вающая кавычки — разными. Мы насчитали уже 51 код. В следующих 6 кодах сочетания точек 3, 4, 5 и 6 используются для представления буквосочета- ний и знаков препинания: 21 Брайль и двоичные коды Здесь особенно важен код «ble». Если он не является частью слова, значит, следующие за ним коды следует интерпретиро- вать как цифры. Коды цифр полностью совпадают с кодами букв от a до j: Следовательно, последовательность кодов означает число 256. Для достижения максимального количества нам осталось рассмотреть 7 кодов: Первый (выпуклая точка 4) — признак знака ударения. Осталь- ные применяются как префиксы в некоторых сокращениях или выполняют иные функции. Код, в котором выпуклы точки 4 и 6 (пятый в этой строке), в зависимости от контекста означает десятичный разделитель в числах или знак ударения. Код с вы- пуклыми точками 5 и 6 отменяет действие признака числа. Наконец (вы наверняка мучаетесь вопросом, как в шрифте Брайля обозначаются прописные буквы), у нас остался код с выпуклой точкой 6. Это и есть признак прописной буквы, ука- зывающий, что следующая за ним буква является прописной. Вот как записывается имя основоположника этой системы (Louis Braille): Код состоит из признака прописной буквы, буквы l, сокраще- ния для ou, букв i и s, пробела, второго признака прописной буквы и букв b, r, a, i, l, l и e (кстати, на практике последнее слово еще немного сокращают, убирая две последние непро- износимые буквы). Итак, мы увидели, как из шести двоичных элементов (то- чек) получается 64 кода, ни больше, ни меньше. Правда, мно- гие из кодов несут двойную нагрузку. Особо отметим код-при- 22 Глава третья знак числа и отменяющий его код-признак буквы. Эти коды изменяют смысл последующих символов: буквы становятся цифрами и наоборот. Такие коды иногда называют кодами переключения (shift). Код переключения меняет смысл всех сле- дующих кодов, пока его действие не будет отменено. Признак прописной буквы означает, что следующая за ним буква (и только она) должна интерпретироваться как пропис- ная, а не строчная. Код такого типа называется escape-кодом. Это название происходит от английского слова «escape» (убе- гать, вырываться): escape-код как бы позволяет «избежать» обыденного восприятия кода и взглянуть на него по-новому. Как мы увидим в других главах книги, к кодам переключения и escape-кодам часто прибегают при двоичном кодировании печатных символов. Глава 4 Анатомия фонарика Фонарику можно найти массу применений, из которых чте- ние под одеялом или отправка зашифрованных сообщений — лишь наиболее очевидные. Скажем, обычный фонарик, кото- рый, наверное, есть в каждом доме, — отличное наглядное пособие для изучения электричества. Электричество — удивительное явление. Мы не можем без него жить, оно окружает нас повсюду и все же во многом оста- ется загадкой даже для людей, которым по роду деятельности положено разбираться в его сущности. Боюсь, что нам не обой- тись без некоторого знакомства с этой тайной. К счастью, мы ограничимся лишь основными понятиями, без которых роль электричества в работе компьютеров будет неясна. Фонарик — одно из простейших электрических устройств. Разобрав его, вы обнаружите, что он состоит из пары батаре- ек, лампочки, выключателя, нескольких металлических дета- лей и пластмассового корпуса, в котором все это собрано. Чтобы изготовить незатейливый фонарик самостоятель- но, из этого набора можно оставить только батарейки и лам- почку. Кроме того, понадобится несколько отрезков изолиро- ванного провода с оголенными концами, а чтобы все это удер- жать, хватит рук. 24 Глава четвертая Два оголенных конца провода в правой части схемы между собой не соединены. Они играют роль переключателя. Косни- тесь одним проводом другого, и лампочка сразу загорится. Конечно, если она не перегорела, а батарейки не сели. Собранная схема являет собой простейшую электрическую цепь, которая наглядно иллюстрирует важное правило: цепь должна быть замкнутой. Лампочка зажжется, только если на пути от батареек через провод, лампочку, переключатель и обратно к батарейкам нет разрывов. Стоит разомкнуть цепь, и лампочка тут же погаснет. Переключатель нужен для управ- ления этим процессом. Замкнутость электрической цепи предполагает, что по ней что-то движется, подобно тому как вода течет по трубам. В по- пулярных объяснениях работы электричества аналогия с водо- проводными трубами применяется довольно часто, хотя иног- да она подводит (как, впрочем, все аналогии). Во Вселенной нет ничего, что можно было бы сравнить с электричеством, поэто- му лучше обойтись без аналогий и говорить о нем на его языке. Научные премудрости, объясняющие работу электриче- ства, называются электронной теорией. Согласно ей, электри- чеством называется совокупность явлений, связанных с взаи- модействием и движением заряженных частиц, например, электронов. Как известно, материя, т. е. то, что нам дано видеть и ощу- щать (как правило), состоит из крохотных частичек, называе- 25 Анатомия фонарика мых атомами. Атом состоит из элементарных частиц трех ви- дов: нейтронов, протонов и электронов. Атомы часто изобра- жают в виде маленьких планетных систем: в центре располо- жено ядро, состоящее из нейтронов и протонов, а вокруг него, подобно планетам вокруг Солнца, носятся электроны. Нужно признать, что это не более чем очередная аналогия, и мощный микроскоп, позволяющий разглядеть атомы, пока- зал бы другую картину. Однако нам годится и такая модель. У атома на рисунке 3 электрона, 3 протона и 4 нейтрона. Это атом химического элемента лития, одного из ста с лиш- ним известных элементов, каждый из которых обозначается собственным атомным номером, принимающим значения от 1 до 112. Атомный номер элемента равен числу протонов в его ядре. Атомный номер лития — 3. Посредством химических реакций атомы соединяются друг с другом в молекулы. Обычно свойства молекулы существен- но отличаются от свойств составляющих ее атомов. Так, мо- лекула воды состоит из двух атомов водорода и одного атома кислорода. Отличие воды как от кислорода, так и от водорода очевидно. Аналогично молекула поваренной соли состоит из атома натрия и атома хлора, однако ни тот, ни другой по от- дельности не способны улучшить вкусовые качества жареной картошки. Обычно число электронов в атоме совпадает с числом про- тонов. Но при некоторых обстоятельствах электроны покида- ют свои атомы и порождают электрические явления. Слова электрон и электричество происходят от древнегре- ческого слова ���������(электрон), что в переводе значит «ян- тарь». Объясняется это просто. Полируя кусочки янтаря шер- 26 Глава четвертая стью, древние греки познакомились с явлением, которые мы называем статическим электричеством. Шерсть, трущаяся о янтарь, срывает с поверхности янтаря электроны и скоро на- капливает электронов больше, чем имеет протонов. Янтарь, напротив, остается с относительным избытком протонов. Протоны и электроны характеризуются зарядом. У прото- нов он положительный, у электронов — отрицательный. Ней- троны нейтральны и заряда не имеют. Для обозначения про- тонов и электронов часто используют знаки «+» и «–», под- черкивая электрическую противоположность этих частиц. Конфигурация, состоящая из протонов и электронов, наи- более устойчива, когда и те и другие находятся в ней в равных количествах. Нарушьте баланс протонов и электронов, и сис- тема постарается восстановить равновесие. Ковер при ходьбе захватывает электроны с подошв ваших туфель, но стоит вам коснуться какого-нибудь предмета, и вы ощутите пробежав- шую искру. Так восстанавливается равновесие: искра — это разряд статического электричества, по замысловатому пути перемещающий электроны от ковра через ваше тело обратно к подошвам. Статическое электричество — это не только искра, проска- кивающая между пальцами и дверной ручкой. Во время грозы нижние слои туч накапливают электроны, а верхние их теря- ют. В конце концов, равновесие восстанавливается разрядом молнии. Молния — это множество электронов, с огромной скоростью перетекающих из одного места в другое. Электричество в фонарике более управляемо, чем искра или молния. Свет фонарика ровен и непрерывен, так как электро- ны не просто скачут с места на место. Атом, потеряв электрон (перескочивший к другому атому), захватывает электрон у соседнего атома, тот в свою очередь отнимает электрон у сво- его соседа и т. д. Электричество в цепи — это перетекание элек- тронов от атома к атому. Естественно, происходит это не само собой. Не ждите появ- ления электричества, просто соединив два куска провода. Нуж- но нечто, что вынудило бы электроны двигаться по цепи. По- смотрев еще раз на схему нашего нехитрого фонарика, мы сме- ло предположим, что источник движения электронов заключен не в проводах и не в лампочке, а скорее всего в батарейках. Самое важное о батарейках известно, наверное, всем. 27 Анатомия фонарика • Чаще всего они изготавливаются в виде цилиндров различ- ных размеров. • Напряжение большинства батареек равно 1,5 вольта. • Один торец батарейки плоский и помечен знаком «–», на другом есть небольшой выступ, и помечен он знаком «+». Полярность батареек нужно обязательно учитывать при их установке. • Со временем батарейки разряжаются («садятся»). • Наконец, батарейки как-то производят электричество. Во всех батарейках протекают те или иные химические ре- акции, в ходе которых одни молекулы, разрушаясь или соеди- няясь друг с другом, превращаются в другие молекулы. Хи- мический состав батареек подобран так, что в результате реак- ций между различными молекулами на том конце батарейки, что помечен знаком «–» (он называется отрицательным полю- сом или анодом), образуется избыток электронов, а на проти- воположном — помеченном знаком «+» (положительном по- люсе, или катоде) — возникает их недостаток. Сформировав избыток электронов на одном полюсе и их недостаток на другом, химические реакции останавливаются (точнее, протекают очень медленно), поэтому с неподключен- ной батарейкой ничего не происходит. Чтобы возобновить реакцию, избыточным электронам на отрицательном полюсе батарейки нужно обеспечить проход к ее положительному полюсу. Таким образом, реакция происходит только при на- личии замкнутой электрической цепи. По нашей цепи элект- роны движутся против часовой стрелки: 28 Глава четвертая В этой книге провода, по которым течет ток, выделены свет- лым оттенком. Заметьте: обе батарейки ориентированы одинаково. Поло- жительный полюс нижней батарейки получает электроны из от- рицательного полюса верхней. Две батарейки, соединенные та- ким образом (последовательно), ведут себя, как одна большая батарейка с напряжением 3 вольта вместо прежних полутора. Если одну из батареек перевернуть, цепь перестанет работать: Двум положительным полюсам батареек для химических ре- акций нужны электроны, но полюса обращены друг к другу, и путь, по которому электроны могли бы туда попасть, закрыт. Теперь попробуем соединить и отрицательные полюса: 29 Анатомия фонарика Теперь цепь работает. Такое соединение батареек называется параллельным. Их общее напряжение равно 1,5 В, как и у каж- дой батарейки в отдельности. Лампочка горит не так ярко, как при последовательно соединенных батарейках, зато прослу- жат батарейки вдвое дольше прежнего. Обычно батарейки рассматривают как источник электри- чества в цепи. Но мы теперь знаем, что для протекания хими- ческих реакций батарейке и самой нужны электроны. Цепь забирает электроны с анода батарейки и возвращает их на ка- тод. Реакции в батарейке продолжатся, пока не истощатся дви- жущие их химические вещества, после чего батарейки надо выбросить или перезарядить. От анода к катоду электроны текут по проводам и через лампочку. А провода зачем? Почему нельзя пропустить элек- тричество по воздуху? Потому, что некоторые вещества про- водят электрический ток гораздо лучше других. Способность химического элемента проводить ток связана со строением его атома. Электроны вращаются вокруг ядра на разных уровнях, которые называются оболочками. Атом, у которого во внеш- ней оболочке только один электрон, легко расстается с ним, обеспечивая прохождение тока. Вещества, способные прово- дить электричество, называют проводниками. Лучшие провод- ники — медь, серебро и золото. Не случайно все три этих эле- мента находятся в одном столбце (или, по-научному, в одной группе) периодической системы Д. И. Менделеева. Чаще всего электрические провода изготавливают из меди. Вещества, не проводящие ток, называются изоляторами. Хорошие изоляторы — резина и пластмасса, поэтому их час- то применяют в качестве покрытия проводов. В сухую погоду хорошими изоляторами являются также ткань и древесина. Но если напряжение очень велико, проводником становится прак- тически любое вещество. С другой стороны, даже проводники в той или иной степе- ни сопротивляются течению электрического тока. Это свой- ство характеризует величина, называемая сопротивлением. Со- противление меди очень мало, но нулю оно все-таки не равно. Чем длиннее проводник, тем больше его сопротивление. Если подключить к лампочке провода длиной в несколько километ- ров, их сопротивление будет настолько велико, что фонарик 30 Глава четвертая работать не будет. Чтобы снизить сопротивление провода, его нужно сделать толще. Я уже несколько раз использовал термин «напряжение», но пока не объяснил его значения. Что означает полуторавольто- вое напряжение батарейки? Напряжение — одно из наиболее сложных понятий элементарного электричества. Под напря- жением понимают потенциальную способность батарейки к выполнению работы. Напряжение существует независимо от того, подключено что-то к батарее или нет. Единица измере- ния напряжения — вольт (В) — названа в честь графа Алес- сандро Вольта (Alessandro Volta) (1745–1827), в 1800 г. изоб- ретшего первую батарейку. Более очевидным понятием является сила тока — мера количества электронов, реально текущих по цепи. Единица измерения силы тока называется ампером (А) в честь фран- цузского физика Андре Мари Ампера (Andre� Marie Ampe�re) (1775–1836). Для получения тока в 1 А надо пропустить через поперечное сечение проводника 6 240 000 000 000 000 000 элек- тронов в секунду. Если все-таки прибегнуть к аналогии с водой и трубами, то сила тока подобна количеству воды, текущей по трубе, напря- жение — давлению, а сопротивление по смыслу прямо проти- воположно толщине трубы — чем у�же труба, тем выше со- противление. Чем больше давление, тем больше воды проте- кает по трубе. Чем у�же труба, тем меньше воды по ней прой- дет. Количество воды, пропущенной по трубе (ток), прямо про- порционально давлению воды (напряжению) и обратно про- порционально сопротивлению. Силу тока в цепи можно вычислить, если известно напря- жение и сопротивление. Единица измерения сопротивления (т. е. свойства вещества препятствовать прохождению элект- ронов) названа именем немецкого ученого Георга Симона Ома (Georg Simon Ohm) (1789–1854). Сформулированный им зна- менитый закон Ома гласит, что: I = E / R, где I — сила тока, E — напряжение (или электродвижущая сила), а R — сопротивление. Взгляните на батарейку, которая ни к чему не подключена: 31 Анатомия фонарика Напряжение батарейки Е равно 1,5 В. Но ее положительный и отрицательный полюса соединены друг с другом только через воздух, а значит сопротивление (R) между ними весьма, весьма и весьма велико. Сила тока (I) равна результату деления 1,5 В на очень большое число, т. е. практически нулю. Теперь соединим полюса небольшим отрезком медной про- волоки (изоляцию на схемах я больше рисовать не буду): Это соединение называется коротким замыканием. Напряже- ние по-прежнему 1,5 В, но сопротивление очень мало. Сила тока получается делением 1,5 В на малую величину, т. е. очень велика. Прямо-таки несметное количество электронов проне- сется по проводу. Долгое время батарейка такой большой ток поддерживать не сможет, и потому ее напряжение упадет ниже номинального значения. Большинство цепей занимают промежуточное положение между двумя этими крайностями. Условно сопротивление цепи можно показать так: 32 Глава четвертая Прямоугольниками на электрических схемах показывают ре- зисторы — электрические приборы, обладающие известным (не слишком большим и не слишком малым) сопротивлением. Если сопротивление провода невелико, он раскаляется и на- чинает светиться, поскольку электрическая энергия в нем пре- образуется в тепловую. На этом принципе основано действие лампы накаливания. Обычно ее создание приписывают зна- менитому американскому изобретателю Томасу Эдисону (Thomas Edison) (1847–1931), но к 1879 г., когда он запатенто- вал лампу, основные принципы ее работы были уже хорошо известны1. Внутри лампы размещен тонкий провод — спираль, кото- рая обычно изготавливается из вольфрама. Один конец спи- рали соединен с контактом в нижней части лампы; другой — с металлическим цоколем. При пропускании тока спираль на- гревается и светится. В большинстве фонарей устанавливается две последователь- но соединенных батарейки, суммарное напряжение которых равно 3 В. Сопротивление лампочек в наиболее распространен- ных карманных фонариках составляет примерно 4 Ом. Значит, ток равен 3 В � 4 Ом = 0,75 А, т. е. каждую секунду через лам- почку проходит 4 680 000 000 000 000 000 электронов. Кстати, если вы попробуете измерить сопротивление лам- пы с помощью омметра, то обнаружите, что оно намного мень- ше 4 Ом. Дело в том, что сопротивление вольфрама зависит от температуры, увеличиваясь по мере нагрева. Вы, конечно, знаете, что на лампах, кроме рабочего напряже- ния, указывается мощность в ваттах (Вт). Единица измерения мощности названа в честь английского изобретателя Джеймса Уатта2 (James Watt) (1736–1819), более известного благодаря сво- ей работе над паровой машиной. Мощность Р вычисляется по формуле: P = E � I. 1 В 1874 г. угольную лампу накаливания запатентовал российский электротехник Александр Николаевич Лодыгин (1847–1923). — Прим. перев. 2 В русском языке между именем изобретателя и названием единицы мощности имеется некоторое противоречие — единица называется ваттом, тогда как имя (Watt) традиционно пишется как Уатт. — Прим. перев. 33 Анатомия фонарика Напряжение фонарика 3 В в сочетании с током 0,75 ампер дока- зывают, что мы имеем дело с лампочкой мощностью 2,25 Вт. Мы проанализировали практически все детали фонарика — батарейки, провода и лампочку, — забыв о его важнейшей части! Да-да, о переключателе! А ведь именно от него зависит, по- течет электричество по цепи или нет. Когда переключатель пропускает через себя электрический ток, говорят, что он вклю- чен, или замкнут. Выключенный, или разомкнутый, переклю- чатель электрический ток не пропускает. Переключатель либо замкнут, либо разомкнут. Ток либо течет, либо нет. Лампочка либо горит, либо нет. Подобно дво- ичным кодам, изобретенным Морзе и Брайлем, наш простой фонарик пребывает в одном из двух взаимоисключающих со- стояний — включен или выключен. Третьего не дано. В следу- ющих главах мы убедимся, что из этого сходства между дво- ичными кодами и электрическими цепями можно извлечь не- малую пользу. Глава 5 Там, за поворотом Вам стукнуло двенадцать лет. И вот в один ужасный день се- мья вашего лучшего друга уезжает в другой город. Время от времени вы болтаете с другом по телефону, но это даже отда- ленно не напоминает полуночные сеансы связи с фонариками и азбукой Морзе. Со временем вашим новым лучшим другом становится парень, живущий по соседству. Пришло время сдуть пыль с фонарика и обучить друга азбуке Морзе. Но вот беда — из окна вашей комнаты не видно окна ва- шего приятеля! Дома рядом, да вот окна обращены в одну сто- рону. Пока вы не придумаете способ установить снаружи не- сколько зеркал, общаться по ночам с помощью фонариков у вас не получится. Или получится? Возможно, к этому времени вы уже узнали кое-что об элек- тричестве и потому решили собрать из батареек, лампочек, пе- реключателей и проводов фонарики с дистанционным управ- лением. Для начала вы устанавливаете в своей комнате бата- рейки и переключатель. Два провода выходят из вашего окна, пересекают забор и проходят в окно комнаты друга, где соеди- няются с лампочкой. 36 Глава пятая Ваш дом Дом вашего друга Здесь я показываю только одну батарейку, но можно исполь- зовать и две. На этой и последующих схемах разомкнутый пе- реключатель будет изображаться так: а замкнутый — так: Фонарик, о котором мы говорим в этой главе, работает так же, как и фонарик из предыдущей, просто провода, соединя- ющие его компоненты, стали немного длиннее. Когда вы вклю- чаете переключатель у себя, лампочка загорается в комнате вашего друга. Ваш дом Дом вашего друга Теперь вы можете посылать другу сообщения с помощью аз- буки Морзе. Заставив один фонарик работать на расстоянии, вы може- те собрать вторую такую же схему, чтобы друг мог посылать вам ответные сообщения. 37 Там, за поворотом Ваш дом Дом вашего друга Поздравляю! Вы создали настоящий двухсторонний теле- граф. Он состоит из двух одинаковых цепей, полностью неза- висимых и не соединенных друг с другом. Теоретически вы можете посылать сообщение своему другу в то самое время, когда он отправляет свое вам (хотя одновременно принимать и посылать сообщения будет нелегко). Если вы достаточно сообразительны, то сократите расход провода на 25%, немного изменив схему: Ваш дом Дом вашего друга Теперь отрицательные контакты обеих батарей соединены. Две замкнутые цепи (батарея — переключатель — лампа — батарея) все еще независимы, хотя и связаны, как сиамские близнецы. Такое соединение называется соединением с общим прово- дом (common). В нашей цепи общий провод начинается в точ- ке соединения левой лампы и батареи, а заканчивается в точке соединения правой лампы и батареи. Эти соединения отмече- ны точками. Рассмотрим работу схемы подробнее и убедимся, что она нам понятна. Начнем с того, что когда вы включаете переклю- чатель у себя, в доме вашего друга загорается лампа. Провода, по которым течет ток, отмечены светлым оттенком. 38 Глава пятая Ваш дом Дом вашего друга В другой части цепи тока нет, так как электроны не могут течь по разомкнутым проводам. Если сигналы посылает ваш друг, а не вы, управление лам- пой в вашем доме осуществляется переключателем в доме ва- шего друга. И снова провода, по которым течет ток, отмечены светлым оттенком. Ваш дом Дом вашего друга Если вы оба пытаетесь послать сообщения одновременно, ваши переключатели либо выключены, либо один переклю- чатель включен, а другой выключен, либо оба включены. В последнем случае поток электронов в цепи течет так: Ваш дом Дом вашего друга 39 Там, за поворотом Через общую часть цепи ток не идет. Соединив две цепи в одну общим проводом, мы сократили количество проводов между домами с четырех до трех, сэконо- мив 25% провода. Если провода нужно протянуть на очень большое расстоя- ние, хорошо было бы сократить затраты, отказавшись еще от одного провода. К сожалению, в цепи с 1,5-вольтовыми бата- рейками и небольшими лампочками это невыполнимо, но если вы имеете дело со 100-вольтовыми батареями и большими лам- пами, убрать провод можно. Тут есть небольшая хитрость. Объединив цепи общим со- единением, вы не должны использовать для него провод. Его можно заменить любым проводником. Например, гигантским шаром радиусом около 6 400 км, состоящим из металлов, кам- ней, воды и органических веществ. Этот шар — планета Земля. Говоря в предыдущей главе о хороших проводниках, я упо- минал серебро, медь и золото, но отнюдь не гравий или пере- гной. Правду сказать, земля не такой уж хороший проводник, хотя некоторые виды почв (например, влажная земля) прово- дят ток намного лучше других (например, сухой песок). Но у проводников есть одно общее свойство: чем проводника боль- ше, тем лучше. Толстый провод проводит ток лучше, чем тон- кий. И здесь Земля не знает себе равных. Она действительно очень, очень велика. Чтобы использовать землю в качестве проводника, недо- статочно просто воткнуть проводок в помидорную грядку. Вам нужно нечто, поддерживающее с землей прочный контакт, я имею в виду проводник с большой площадью поверхности, например, медный штырь длиной 2,5 метра и толщиной 1,5 см. Он контактирует с землей на площади 1 200 кв. см. Забив штырь в землю кувалдой, подсоедините к нему провод от схе- мы. Иногда из меди делают водопроводные трубы для холод- ной воды. Если в вашем доме есть такая труба, уходящая под землю за пределами дома, подсоедините провод к ней. Электрический контакт с землей называется заземлением, или просто землей. Вокруг термина «земля» возникает неболь- шая путаница, так как иногда так же называют часть цепи, ко- торую мы назвали общим проводом. В этой и следующих гла- вах под заземлением будет пониматься физическое соедине- ние с землей, если я явно не скажу об обратном. 40 Глава пятая На электрических схемах заземление изображается так: Электрики используют этот значок, чтобы не тратить время на рисование 2,5-метрового штыря, зарытого в землю. Рассмотрим работу цепи с заземлением. Мы начали эту главу с создания односторонней сигнальной схемы. Ваш дом Дом вашего друга Если бы вы использовали мощные батареи и лампы, для соеди- нения домов вам понадобился бы только один провод, так как в качестве второго проводника вы использовали бы землю. Ваш дом Дом вашего друга Когда вы включите переключатель, ток потечет так: Ваш дом Дом вашего друга 41 Там, за поворотом Электроны вытекают из земли у дома вашего друга, проходят через лампу и провод, минуют переключатель в вашем доме и попадают на положительный контакт батареи. С отрицатель- ного контакта батареи электроны уходят в землю. Воображение невольно рисует картину, как электроны вып- рыгивают из медного штыря, забитого в землю на заднем дво- ре вашего дома, и пробираются под землей к другому медно- му штырю, забитому в землю на заднем дворе дома вашего друга. Но если вы вспомните, что земля выполняет ту же функ- цию для многих тысяч электрических цепей по всему миру, то, вероятно, заинтересуетесь, откуда электроны знают, к ка- кому именно штырю им направляться. Разумеется, они не зна- ют. Поэтому лучше придумать для земли другое сравнение. Да, земля — это очень большой проводник, но ее можно рассматривать и как огромный резервуар с электронами. Зем- ля для электронов — то же, что океан для капли воды. Земля — это практически безграничный источник электронов и без- донный сток для них. Однако земля обладает и некоторым сопротивлением. Именно поэтому мы и не смогли уменьшить с ее помощью расход провода, работая с 1,5-вольтовыми батарейками и ма- ленькими лампочками. Для маломощных батареек сопротив- ление земли слишком велико. Кстати, на двух предыдущих рисунках батарейка соедине- на с землей отрицательным контактом. Я больше не буду рисовать на схемах батарейку, соединен- ную с землей. Вместо этого я буду ставить большую букву V, обозначающую входное напряжение (voltage). Теперь односто- ронняя телеграфная система с лампочкой выглядит так: 42 Глава пятая V Ваш дом Дом вашего друга Считайте, что буква V символизирует электронный ваку- ум, противоположный земле — океану электронов. Электрон- ный вакуум через цепь вытягивает электроны из земли, про- изводя по пути работу (например, раскаляя спираль лампы). Иногда землю называют точкой с нулевым потенциалом (zero potential). Это означает, что напряжения на ней нет. На- пряжение, как я уже объяснял, являет собой потенциал для совершения работы, подобно тому, как потенциальным источ- ником энергии является кирпич, висящий в воздухе. Нулевой потенциал — это кирпич, лежащий на земле: падать-то ему уже некуда. В главе 4 мы в первую очередь обращали внимание на то, что электрические цепи замкнуты. Наша новая цепь совсем не похожа на замкнутый круг, но все же является таковым. Достаточно заменить букву V на батарейку, отрицательный контакт которой соединен с землей, а затем нарисовать про- вод, соединяющий все точки заземления. В результате у вас получится первый рисунок из этой главы. Таким образом, используя пару медных штырей (или во- допроводных труб), мы можем соорудить двухстороннюю сиг- нальную систему, перебросив через забор между домами все- го два провода. V V Ваш дом Дом вашего  друга 43 Там, за поворотом По своему действию эта цепь не отличается от предыдущей, в которой изгородь между домами пересекали три провода. В этой главе мы сделали важный шаг вперед в развитии коммуникации. Раньше мы могли общаться с помощью азбу- ки Морзе только в зоне прямой видимости и только на рассто- янии, которое способен преодолеть свет фонарика. С помощью проводов мы не только собрали систему свя- зи, позволяющую общаться вне зоны прямой видимости, но еще и сняли ограничение в расстоянии. Мы теперь можем пе- редавать информацию на сотни и тысячи километров, протя- нув достаточно длинные провода. Так? Так, да не совсем. Медь — очень хороший проводник, но не идеальный. Чем длиннее провода, тем больше у них сопро- тивление. Чем больше сопротивление, тем меньший течет ток. Чем меньше ток, тем тусклее светит лампа. Насколько длинными могут быть провода? Посчитаем. До- пустим, вы реализуете нашу первую четырехпроводную дву- направленную схему без заземления и общего провода, с ма- ломощными батарейками и лампочками. Чтобы не слишком ударить по карману, вы для начала купили провод №20 по цене 9,99 доллара за 100 футов (около 30 м), который обычно при- меняется для подключения колонок к стереосистеме. Он двух- жильный и потому прекрасно подходит для нашего телегра- фа. Если от вашей комнаты до комнаты вашего друга меньше 15 м, вы обойдетесь одним мотком. В США для измерения толщины провода используется си- стема стандартов American Wire Gauge (AWG). Чем меньше номер AWG, тем толще провод и тем ниже его сопротивление. Диаметр провода №20 — примерно 0,8 мм, а его сопротивле- ние — около 10 ом на 300 м или 1 ом на удвоенное расстояние между вашими комнатами. Это совсем неплохо. Но что если вы захотите протянуть провод на полтора километра? Его сопротивление будет око- ло 50 ом. Как вы помните из предыдущей главы, сопротивле- ние лампочки — всего 4 ома. По закону Ома легко вычислить, что сила тока в удлиненной цепи будет уже не 0,75 ампера (3 вольта разделить на 4 ома), как раньше, а меньше 0,06 ампе- ра (3 вольта разделить на 50 ом). Я почти уверен, что при та- ком слабом токе свечения спирали лампочки вы не увидите. 44 Глава пятая Можно, конечно, решить проблему, использовав провод по- толще, хотя обойдется он вам недешево. У провода №10 толщи- на около 2,5 мм и сопротивление всего около 1 ома на 300 м, т. е. 5 ом на 1,5 км. Его 35-футовый (около 10 м) моток стоит 11,99 долларов, при этом учитывайте, что провод одножильный, по- этому покупать его придется вдвое больше, чем «двадцатки». Другой выход — увеличить напряжение и использовать лампы с более высоким сопротивлением. Скажем, обычная 100-ваттная лампа, которая освещает вашу комнату, предназ- начена для работы в сети с напряжением в 120 вольт и имеет сопротивление около 144 ом. Понятно, что в цепи с такой лам- пой сопротивление проводов играет меньшую роль. Именно такие проблемы встали 150 лет назад перед людь- ми, протягивавшими первые телеграфные линии по Америке и Европе. Ни толщина проводов, ни повышенное напряжение не помогут тянуть телеграфные провода бесконечно. Максималь- ный длина системы, работающей по этой схеме, составляет три сотни километров — ничтожная величина по сравнению с ты- сячами километров между Нью-Йорком и Калифорнией. Решить эту проблему — конечно, не для фонариков, а для настоящего телеграфа — удалось с помощью простого и не- взрачного устройства, на основе которого, как выяснилось позднее, можно создать настоящий компьютер. Глава 6 Телеграф и реле Сэмюэль Морзе родился в 1791 г. в городе Чарльстон (штат Массачусетс, США), который ныне вошел в состав Бостона. К этому времени уже четыре года существовала Конституция Соединенных Штатов, шел первый президентский срок Джорд- жа Вашингтона, а Россией правила Екатерина Великая. Через два года после рождения Морзе сложили головы на плахе ко- роль Людовик XVI и королева Мария-Антуанетта. В конце 1791 г. в возрасте 35 лет умер Моцарт, закончив перед этим свою последнюю оперу «Волшебная флейта». Морзе закончил Йельский уни- верситет, обучался изобразитель- ному искусству в Лондоне и стал известным художником-портрети- стом. Его картина «Генерал Лафай- ет» (1825) до сих пор висит в нью- йоркском Сити-Холле. В 1836-м он баллотировался на пост мэра Нью- Йорка в качестве независимого кандидата и набрал 5,7% голосов. Также он был одним из первых фотографов, обучался искусству делать дагерротипные фотографии у самого Луи Дагерра (Louis Daguerre) и сделал несколько пер- вых американских снимков. В 1840 г. он передал свое мастер- 46 Глава шестая ство фотографа 17-летнему Мэтью Брэди (Mathew Brady), ко- торый прославился фотографиями на темы Гражданской вой- ны и фотопортретами Авраама Линкольна и самого Сэмюэля Морзе. Но это лишь небольшие штрихи в эклектичной карьере Морзе. Более всего он известен как изобретатель телеграфа и азбуки, носящей его имя. Мгновенная всемирная связь, к которой мы привыкли, по- явилась относительно недавно. В начале XIX в. передавать ин- формацию можно было либо быстро, либо на большое рас- стояние, но не то и другое одновременно. Мгновенная связь была возможна или на расстоянии слышимости, или на рас- стоянии видимости. Для передачи информации на большие расстояния — с помощью писем — требовалось время, а так- же лошади, поезда или корабли. Неоднократные попытки ускорить передачу информации на далекие расстояния предпринимались за десятилетия до изобретения Морзе. В простейшем варианте дальнюю связь организовывали в виде цепочки людей-передатчиков, которые обменивались сообщениями на расстоянии прямой видимос- ти, размахивая флажками. В технически более совершенных системах роль человека-передатчика играла массивная меха- ническая конструкция с подвижными рычагами. Идея телеграфа (от слов «далеко» и «писать») витала в воз- духе с самого начала XIX в., и многие изобретатели приложи- ли к ней руку еще до того, как в 1832 г. свои опыты начал Сэ- мюэль Морзе. В принципе суть электрического телеграфа про- ста: вы делаете нечто на одном конце провода, в результате чего на другом конце провода что-то происходит. Именно этим мы занимались в предыдущей главе, создавая дистанционную систему управления фонариком. Однако Морзе в своем пере- дающем устройстве использовать лампочку не мог, так как она была изобретена лишь в 1879 г. Вместо лампочки Морзе ис- пользовал явление электромагнетизма. Возьмите железный стержень, намотайте на него пару со- тен витков тонкого провода, а затем пропустите по проводу ток. Железный стержень станет магнитом и будет притягивать кусочки железа и стали (провод в электромагните должен быть именно тонким, чтобы обладать заметным сопротивлением и 47 Телеграф и реле не приводить к короткому замыканию). Выключите ток, и же- лезный стержень потеряет свои магнитные свойства. Электромагнит — основа телеграфа. Замыкание и размыка- ние переключателя на одном конце провода приводит в дей- ствие электромагнит на другом. Первый телеграфный аппарат Морзе был, как ни странно, сложнее своих более поздних модификаций. Морзе полагал, что телеграфный аппарат должен писать что-то на бумаге, хотя и не слова, так как это было бы слишком сложно. Но что-то (какие-нибудь закорючки или тире с точками) должно быть написано. Интересно, что Морзе, как и Ойи с его идеей выпук- лых букв, оказался в плену штампа, считая, что передача ин- формации без записей на бумаге невозможна. Сэмюэль Морзе известил патентное бюро об изобретении телеграфа уже в 1836 г., но лишь в 1843 г. ему удалось убедить Конгресс профинансировать публичную демонстрацию это- го устройства. В исторический день 24 мая 1844 г. по телеграф- ной линии, соединившей Вашингтон с Балтимором, была ус- пешно передана цитата из Библии. Обычный телеграфный ключ выглядел примерно так: Несмотря на причудливый вид, это всего лишь переключатель, форма которого позволяет осуществлять передачу с макси- мальной скоростью. Удобнее всего в течение долгого времени работать с ключом так: держать ручку между большим, указа- 48 Глава шестая тельным и средним пальцами, поднимая и опуская ее. Когда ключ задерживается в нижнем положении ненадолго, получа- ется точка азбуки Морзе, длинное нажатие соответствует тире. На другом конце линии находился приемник — по суще- ству электромагнит, притягивавший металлический рычаг. Поначалу к рычагу прикреплялся карандаш. Пружинный ме- ханизм медленно протягивал через аппарат бумажную ленту, а карандаш, управляемый электромагнитом, прыгал вверх- вниз и рисовал на бумаге точки и тире. Человек, знающий аз- буку Морзе, переводил точки и тире в буквы и слова. Но вскоре телеграфные операторы обнаружили, что могут переводить сообщения, просто слушая щелчки электромагни- та. Карандаш в конце концов был упразднен, уступив место устройству такого вида: Когда телеграфный ключ нажат, электромагнит тянет подвиж- ный металлический молоточек вниз, и раздается звук одного тона («тик»). Когда ключ отпущен, электромагнит выключа- ется, и молоточек возвращается в исходное положение, про- изводя звук другого тона («так»). Быстрое чередование звуков («тик-так») соответствует точке, медленное — тире. Ключ, электромагнит с молоточком и батарейку можно проводами соединить в схему, подобную устройству из пре- дыдущей главы. Телеграфная станция  вашего друга Ваша телеграфная  станция 49 Телеграф и реле Мы уже выяснили, что для соединения двух телеграфных станций два провода не нужны. Если половину цепи заменит земля, хватит и одного провода. Как и в предыдущей главе, вместо батарейки и земли мы будем рисовать букву V. А посему окончательная схема с од- ним проводом выглядит так: Телеграфная станция  вашего друга Ваша телеграфная  станция V Для двухсторонней связи попросту понадобится еще один ключ и электромагнит с молоточком. Изобретение телеграфа положило начало современной свя- зи. Впервые люди смогли передавать информацию дальше, чем видит глаз или слышит ухо, и быстрее почтовых лошадей. Но самое пикантное в этом изобретении — двоичный код. В бо- лее поздних формах электрической и беспроводной связи (те- лефон, радио, телевидение) двоичные коды были забыты, но лишь с тем, чтобы снова вернуться к жизни в компьютерах, компакт-дисках и цифровом телевидении. Телеграф Морзе одержал победу над другими проектами не в последнюю очередь благодаря своей нетребовательности. Протяните провод между ключом и электромагнитом, и сис- тема будет работать. Другие телеграфные системы не были такими простыми и потому безотказными. И все же у телегра- фа есть недостатки — в главе 5 я уже говорил о большом со- противлении длинных проводов. Хотя некоторые телеграф- ные линии с напряжением до 300 В работали на расстояниях до 500 км, бесконечно тянуть провода нельзя. Одно решение кажется очевидным — организовать систе- му ретрансляции: посадить через каждую пару сотен километ- ров человека с ключом, который будет принимать сообщения и пересылать их дальше по линии. 50 Глава шестая Теперь представьте, что для работы в качестве ретрансля- тора телеграфной компанией наняты именно вы. И сидите вы где-то между Нью-Йорком и Калифорнией в маленькой будке со столом и стулом. Провод, входящий в восточное окно, со- единен с электромагнитом, а телеграфный ключ подключен к батарейке и проводу, выходящему в западное окно. Ваша ра- бота — принимать сообщения из Нью-Йорка и передавать их в Калифорнию. Сначала вы предпочитаете полностью принять сообщение и лишь потом отправлять его. Вы записываете буквы по щел- чкам молоточка, а когда сообщение заканчивается, передаете их с помощью ключа. Но после некоторой практики вы уже можете передавать сообщение сразу, на слух, вообще не запи- сывая. Это здорово экономит время. И вот в один прекрасный день, принимая очередное сооб- щение, вы обращаете внимание на молоточек, который скачет вверх и вниз, а потом на свои пальцы, поднимающие и опус- кающие ключ. Потом вы снова смотрите на молоточек и на ключ, и вдруг понимаете, что они совершают одно и то же дви- жение. Рядом с будкой вы находите небольшую палочку и с ее помощью физически соединяете ключ с молоточком. V Выход Вход Теперь аппарат работает самостоятельно, а вы можете немно- го вздремнуть или пойти на рыбалку. Интересно немного пофантазировать, но в действительно- сти Сэмюэль Морзе с самого начала понимал, что телеграф- ный аппарат должен работать именно так. «Изобретенное» нами устройство называется повторителем (repeater), или реле (relay). В реле входящий ток приводит в действие электромаг- нит, который притягивает металлический рычаг. Рычаг в свою очередь используется как часть переключателя, соединяюще- го батарейку с выходящим проводом. Таким образом, слабый 51 Телеграф и реле входящий ток «усиливается», превращаясь в сильный выхо- дящий. Схематически реле можно изобразить так: V Выход Вход Входящий ток приводит в действие электромагнит, тот при- тягивает гибкую металлическую полоску, а она замыкает цепь для выходящего тока. V Выход Вход 52 Глава шестая Поэтому ключ, реле и электромагнит с молоточком соединя- ются примерно так: V Ваша телеграфная станция V V Релейная станция Телеграфная станция вашего друга Реле — замечательное устройство. Конечно, это просто пе- реключатель, но его включает и выключает не человек, а ток. Поразительно, какие замечательные устройства можно создать на основе такого простого прибора. По правде говоря, практи- чески из одних только реле можно собрать целый компьютер. Да, оставить реле в музее телеграфа — слишком дорогое удовольствие. Давайте-ка стащим его, спрячем под пиджаком и быстро-быстро пройдем мимо охраны. Это реле нам очень пригодится. Но прежде чем начать им пользоваться, мы долж- ны научиться считать. Глава 7 Великолепная десятка Представление о языке как о коде кажется вполне естествен- ным. Большинство из нас в школе изучали (или хотя бы пы- тались) иностранный язык, поэтому мы вполне допускаем, что животное, которое мы зовем кошкой, может называться так- же cat, gato, chat, Katze или �����. Цифры далеко не так разнообразны. На каком бы языке мы ни говорили и как бы мы ни произносили названия цифр, почти все жители планеты пишут их одинаково: 1  2  3  4  5  6  7  8  9  1 0 Неспроста математику называют «универсальным языком»! Числа, безусловно, являются самым абстрактным кодом из всех, с которыми нам приходится иметь дело в повседневной жизни. Увидев число: 3 мы не должны немедленно соотнести его с чем-либо. Можно представить себе 3 яблока или 3 других предмета, но мы не по- чувствуем себя менее комфортно, узнав из контекста, что речь идет о возрасте ребенка, номере телевизионного канала, счете хоккейного матча или количестве стаканов муки в рецепте тор- та. Мы настолько привыкли к абстрактности чисел, что нам ско- рее трудно будет понять, что такое количество яблок: 54 Глава седьмая необязательно обозначать символом: 3 Большую часть этой и следующей глав мы посвятим убежде- нию себя в том, что такое количество яблок: можно обозначить также числом: 11 Для начала избавимся от представления об исключитель- ности числа десять. В том, что большинство цивилизаций ос- новало свои системы счисления на десяти (или пяти), нет ни- чего удивительного. Испокон веку люди использовали для счета пальцы. Будь у нас восемь или двенадцать пальцев, наши методы счета были бы немного другими. Неслучайно у слов пять и пятерня один корень. В этом смысле выбор системы счисления, основанной на десяти, или десятичной, совершенно произволен. Тем не ме- нее мы наделяем числа, основанные на 10, почти магическим значением и даже даем им специальные имена. Вот как выгля- дит последовательность степеней числа 10: 101 = 10 102 = 100 (сотня) 103 = 1 000 (тысяча) 104 = 10 000 105 = 100 000 106 = 1 000 000 (миллион) 107 = 10 000 000 108 = 100 000 000 109 = 1 000 000 000 (миллиард) 55 Великолепная десятка Большинство историков полагает, что числа были изна- чально придуманы торговцами для счета людей, имущества и пр. Например, факт наличия у кого-то четырех утят можно записать так: В конце концов человек, работа которого заключалась в рисо- вании утят, подумал: «Зачем мне рисовать четырех утят? По- чему не нарисовать одного утенка и отметить, что их четыре штуки... я не знаю... черточками или чем-нибудь еще?» Однажды наступил день, когда рисовальщику понадобилось отобразить 27 утят. Картина получилась, прямо скажем, сме- хотворная. Глядя на нее, кто-то сказал: «Должен быть более удобный спо- соб». Так появились числа. Из первых систем счисления сейчас широко используются только римские цифры. Вы встретите их на циферблатах ча- сов, в виде дат на памятниках, в виде номеров страниц в кни- гах и — что особенно обидно — в отметках об авторских пра- вах на кинофильм. На вопрос: «В каком году была сделана кар- тина?» — может ответить лишь человек, способный быстро расшифровать MCMLIII в конце длинного хвоста титров. Римскими цифрами 27 утят записываются так 56 Глава седьмая Суть кодирования проста: вместо 10 черточек пишем Х, вмес- то 5 черточек — V. Римские цифры, дожившие до наших дней, выглядят так I  V  X  L  C  D  M Символ I означает «один». Он мог произойти от черточки или от указательного пальца. Символ V, означающий 5, воз- можно, символизирует руку с отогнутым большим пальцем. Символ X, означающий 10, состоит из двух символов V. L рав- но пятидесяти. Цифра С происходит от латинского слова centum (100), а цифра М — от слова mille (1000). Некогда считалось, что римские цифры легко складывать и вычитать, поэтому в Европе их долго использовали для ве- дения бухгалтерии. Фактически при сложении двух римских чисел вы просто объединяете все цифры и упрощаете резуль- тат, применяя несколько правил: пять I равно V, два V равно X, пять X равно L и т. д. Но вот умножать и делить римские числа трудно. По той же причине не годятся для сложных вычислений и другие ран- ние системы счисления (например, древнегреческая). Геомет- рия, разработанная древними греками, и по сей день практи- чески в неизменном виде преподается в школах, а вот своей алгебры они так и не создали. Система счисления, которой мы пользуемся, называется арабской. Разработана она в Индии, но в Европу ее принесли арабские математики. Среди них особенно прославился пер- сидский математик Мухаммед ибн-Муса аль-Хорезми (от име- ни которого происходит слово «алгоритм»). Приблизительно в 825 г. он написал книгу по алгебре, в которой использовал индийскую систему счисления. Латинский перевод этой кни- ги датируется 1120 г. Он сыграл важную роль в ускорении пе- рехода Европы от римских чисел к современной системе. Арабская система счисления отличается от своих предше- ственниц тремя моментами. • Она является позиционной, т. е. количество, представляе- мое цифрой, зависит от ее положения в числе. Позиция цифры в числе не менее (а на самом деле более) важна, чем сама цифра. В числах 100 и 1 000 000 содержится по одной единице, но никого не нужно убеждать, что миллион на- много больше ста. 57 Великолепная десятка • В арабской системе нет того, что имеется практически во всех ранних системах счисления, а именно специального символа для числа 10. • С другой стороны, в арабской системе есть нечто более важ- ное, чем символ для 10, отсутствующее почти во всех ран- них системах счисления, — ноль. Да, именно 0. Скромный ноль — без сомнения, одно из са- мых важных изобретений в истории чисел и математики. Он необходим для позиционной записи, так как позволяет отли- чить 25 от 205 или 250. Ноль также облегчает выполнение мно- гих математических операций, которые в непозиционных си- стемах сопряжены с многочисленными трудностями, особен- но умножения и деления. Вся структура построения арабских чисел раскрывается при их произношении. Например, число 4 825 мы называем «че- тыре тысячи восемьсот двадцать пять». Это означает: четыре тысячи восемь сотен два десятка и пять Мы можем записать компоненты этого числа так: 4825 = 4000 + 800 + 20 + 5 или с еще большей степенью детализации: 4825 = 4 � 1000 + 8 � 100 + 2 � 10 + 5 С помощью степеней числа десять, число представляется так: 4825 = 4 � 103 + 8 � 102 + 2 � 101 + 5 � 100 Помните, что любое число в степени 0 равно 1. В числе, состоящем из нескольких цифр, каждая позиция имеет определенное значение. С помощью семи квадратиков на схеме можно представить любое число от 0 до 9 999 999: 58 Глава седьмая Количество единиц Количество десятков Количество сотен Количество тысяч Количество десятков тысяч Количество сотен тысяч Количество миллионов Каждая позиция соответствует степени десяти. Специаль- ный символ для десяти нам не нужен, так как мы сдвигаем 1 в следующую позицию, а на освободившемся месте пишем 0. Что особенно приятно, дробные части чисел, записанные в виде цифр справа от десятичного разделителя, следуют тому же принципу. Число 42 705,684 = 4 � 10 000 + 2 � 1000 + 7 � 100 + 0 � 10 + 5 � 1 + 6 � 10 + 8 � 100 + 4 � 1000 Можно записать это число и без знака деления: 4 � 10 000 + 2 � 1000 + 7 � 100 + 0 � 10 + 5 � 1 + 6 � 0,1 + 8 � 0,01 + 4 � 0,001 или с помощью степеней 10 4 � 104 + 2 � 103 + 7 � 102 + 59 Великолепная десятка 0 � 101 + 5 � 100 + 6 � 10–1 + 8 � 10–2 + 4 � 10–3 Заметьте: показатели степени доходят до 0, а затем становятся отрицательными. Мы знаем, что 3 + 4 = 7. Точно так же, 30 + 40 = 70, 300 + 400 = = 700, 3000 + 4000 = 7000. В этом и состоит красота арабской системы счисления. Складывая десятичные числа любой дли- ны, вы разбиваете процедуру на одни и те же простые шаги. На каждом шаге выполняется не более чем сложение пары од- норазрядных (т. е. записываемых с помощью одной цифры) чисел. Вот для чего вас заставляли учить таблицу сложения. + 0 1 2 3 4 5 6 7 8 9 0 0 1 2 3 4 5 6 7 8 9 1 1 2 3 4 5 6 7 8 9 10 2 2 3 4 5 6 7 8 9 10 11 3 3 4 5 6 7 8 9 10 11 12 4 4 5 6 7 8 9 5 5 6 7 8 9 6 6 7 8 9 7 7 8 9 16 8 8 9 17 9 9 18 10 11 12 13 10 11 12 13 14 14 15 14 15 16 14 15 17 16 14 15 10 11 12 13 10 11 12 13 10 11 12 13 10 11 12 13 Найдите в верхней строке и левом столбце два числа, кото- рые хотите сложить. На пересечении столбца и строки будет их сумма, например, 4 + 6 = 10. При умножении двух десятичных чисел приходится про- делывать более сложные действия, но смысл их опять же со- 60 Глава седьмая стоит в разбиении процедуры на несколько шагов, на каждом из которых складываются или умножаются одноразрядные числа. Возможно, в школе вы учили и таблицу умножения.  ×  0 1 2 3 4 5 6 7 8 9 0 0 0 0 0 0 0 0 0 0 0 1 0 2 3 4 5 6 7 8 9 2 0 2 4 6 8 10 12 14 16 18 3 0 3 6 9 12 15 18 21 24 27 4 0 4 8 12 16 20 5 0 5 10 15 20 6 0 6 12 18 7 0 7 14 63 8 0 8 72 9 0 81 24 28 32 36 25 30 35 40 45 48 54 49 56 64 48 56 72 63 45 54 24 30 36 42 21 28 35 42 16 24 32 40 9 18 27 36 1  Ключевое преимущество позиционной записи не в том, что она хорошо работает в десятичной системе счисления, а в том, что она хорошо работает в системах счисления, основанных не на десяти. Десятичная система хороша для нас, но неудобна для мультипликационных персонажей, наделенных не пятью, а всего четырьмя пальцами на каждой руке (или лапе). Они определенно предпочтут систему счисления, основанную на восьми. Интересно, что многое из того, что мы знаем о деся- тичной системе, применимо и к системе счисления, которую применяют наши друзья из мультфильмов. Глава 8 Альтернативы десяти Десять — число для людей исключительно важное. У боль- шинства из нас десять пальцев на руках (и на ногах), и мы оп- ределенно предпочитаем иметь по десять и тех, и других. По- скольку с помощью пальцев удобно считать, мы придумали целую систему счисления, основанную на числе десять. 1 2 3 4 5 10 9 8 7 6 Я уже говорил в предыдущей главе, что система счисления, которой мы пользуемся, называется десятичной. Она кажется настолько естественной, что об альтернативах поначалу и по- мыслить трудно. Действительно, когда мы видим число 10, мы не можем не думать, что оно относится именно к такому ко- личеству утят: 62 Глава восьмая 10 = Но причина, по которой 10 обозначает именно столько утят, в том, что их количество совпадает с количеством пальцев на руках. Если бы у людей было другое количество пальцев, у нас был бы другой способ счета, и 10 означало бы что-то другое, например, вот столько утят: 10 = или столько: 10 = или даже вот столько: 10 = Поняв, как обозначить числом 10 всего двух утят, мы обретем способность представлять любые числа с помощью переклю- чателей, проводов, лампочек и реле (что необходимо для со- здания компьютера). Если бы у человека было на каждой руке только по четыре пальца, как у мультяшки, нам, вероятно, никогда не пришла бы в голову мысль о системе счисления, основанной на деся- ти. Вместо нее мы считали бы нормальной, естественной, ра- циональной, неизбежной, бесспорной и единственно разум- ной систему счисления, основанную на восьми. И называли бы ее не десятичной, а восьмеричной. В восьмеричной системе счисления не нужен символ: 9 63 Альтернативы десяти Покажите этот символ мультяшке, и услышите от него: «А для чего нужна эта загогулина?» Подумав еще немного, вы пойме- те, что в восьмеричной системе можно обойтись и без символа: 8 В десятичной системе нет специального символа для десяти, поэтому в восьмеричной системе нет специального символа для восьми. В десятичной системе мы считаем так: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 и 10. В восьмеричной системе счет идет так: 0, 1, 2, 3, 4, 5, 6, 7 и... что дальше? Символы-то кончились. Выход один — после 7 ставить 10. Но эта десятка уже не равна числу пальцев на руках человека. В восьмеричной системе 10 — это количество пальцев на руках мультяшки. 1 2 3 4 10 7 6 5 11 12 13 14 20 16 17 15 64 Глава восьмая Даже когда пальцы на ногах и руках будут исчерпаны, счет в восьмеричной системе можно продолжать. В целом он идет, как и счет в десятичной системе, но без чисел, содержащих цифры 8 и 9: 0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 21, 22, 23, 24, 25, 26, 27, 30, 31, 31, 32, 33, 34, 35, 36, 37, 40, 41, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 100... Последнее число — 100 — есть число пальцев мультяшки, ум- ноженное само на себя. Чтобы избежать путаницы при написании восьмеричных и десятичных чисел, будем указывать тип системы в нижнем индексе. Индекс ДЕСЯТЬ будет означать десятичную систему, а ВОСЕМЬ — восьмеричную. Итак, число гномов, которых встретила Белоснежка, равно 7ДЕСЯТЬ или 7ВОСЕМЬ. Число пальцев на руках мультяшек равно 8ДЕСЯТЬ или 10ВОСЕМЬ. Число симфоний, написанных Бетховеном, равно 9ДЕСЯТЬ или 11ВОСЕМЬ. Число пальцев на руках человека равно 10ДЕСЯТЬ или 12ВОСЕМЬ. Число месяцев в году равно 12ДЕСЯТЬ или 14ВОСЕМЬ. Число дней в двух неделях равно 14ДЕСЯТЬ или 16ВОСЕМЬ. Число килограммов в пуде равно 16ДЕСЯТЬ или 20ВОСЕМЬ. Число часов в сутках равно 24ДЕСЯТЬ или 30ВОСЕМЬ. Число букв в латинском алфавите равно 26ДЕСЯТЬ или 32ВОСЕМЬ. Число зубов у взрослого человека равно 32ДЕСЯТЬ или 40ВОСЕМЬ. Число карт в колоде равно 52ДЕСЯТЬ или 64ВОСЕМЬ. Число клеток на шахматной доске равно 64ДЕСЯТЬ или 100ВОСЕМЬ. Число созвездий на небе равно 88ДЕСЯТЬ или 130ВОСЕМЬ. Число сантиметров в метре равно 100ДЕСЯТЬ или 144ВОСЕМЬ. Число женщин-одиночек в начале Уимблдонского турни- ра равно 128ДЕСЯТЬ или 200ВОСЕМЬ. Площадь Мемфиса в квадратных милях равна 256ДЕСЯТЬ или 400ВОСЕМЬ. В этом списке обратите внимание на красивые круглые восьмеричные числа, например, 100ВОСЕМЬ, 200ВОСЕМЬ и 400ВОСЕМЬ. Кра- сивым круглым числом мы обычно называем число с нулями на конце. Два нуля на конце десятичного числа означают, что оно 65 Альтернативы десяти кратно 100ДЕСЯТЬ = 10ДЕСЯТЬ � 10ДЕСЯТЬ. В восьмеричной системе два нуля на конце означают, что число кратно 100ВОСЕМЬ = 10ВОСЕМЬ � � 10ВОСЕМЬ (т. е. 8ДЕСЯТЬ � 8ДЕСЯТЬ = 64ДЕСЯТЬ). Заметьте также, что все десятичные эквиваленты круглых восьмеричных чисел, а именно 64ДЕСЯТЬ, 128ДЕСЯТЬ и 256ДЕСЯТЬ, явля- ются степенями двойки. В этом есть смысл. Число 400ВОСЕМЬ, на- пример, равно произведению чисел 4ВОСЕМЬ, 10ВОСЕМЬ и 10ВОСЕМЬ, каж- дое из которых является степенью двойки. Естественно, при умножении степени двойки на степень двойки, мы опять-таки получаем степень двойки. В таблице некоторые степени двойки показаны в десятич- ном и восьмеричном представлении. Степень двойки Десятичное Восьмеричное 20 1 1 21 2 2 22 4 4 23 8 10 24 16 20 25 32 40 26 64 100 27 128 200 28 256 400 29 512 1000 210 1024 2000 211 2048 4000 212 4096 10000 Красивые круглые числа в крайнем правом столбце указыва- ют на то, что при работе с двоичными кодами удобны недеся- тичные системы счисления. По способу построения чисел восьмеричная система не от- личается от десятичной за исключением некоторых тонкостей. Например, каждой позиции в восьмеричном числе соответ- ствует цифра, умноженная на степень восьми. 66 Глава восьмая Количество единиц Количество восьмерок Количество 64 Количество 512 Количество 4 096 Количество 32 768 Например, восьмеричное число 3 725ВОСЕМЬ раскладывается так: 3 725восемь = 3 000восемь + 700восемь + 20восемь + 5восемь Затем выделяем круглые числа: 3 725ВОСЕМЬ = 3 � 1 000ВОСЕМЬ + 7 � 100ВОСЕМЬ + 2 � 10ВОСЕМЬ + 5 � 1ВОСЕМЬ или в десятичном представлении: 3 725ВОСЕМЬ = 3 � 83 + 7 � 82 + 2 � 81 + 5 � 80 Заменяем степени восьмерки их десятичными значениями: 3 725ВОСЕМЬ = 3 � 512ДЕСЯТЬ + 7 � 64ДЕСЯТЬ + 2 � 8ДЕСЯТЬ + 5 � 1ДЕСЯТЬ Выполнив десятичное сложение, получаем 2 005ДЕСЯТЬ. Именно так восьмеричные числа преобразуются в десятичные. Восьмеричные числа складываются и умножаются точно так же, как и десятичные. Единственное отличие — в исполь- зовании других таблиц сложения и умножения. Таблица сло- жения восьмеричных чисел приведена на стр. 67. Например, 5ВОСЕМЬ + 7ВОСЕМЬ = 14ВОСЕМЬ. Восьмеричные числа можно складывать и столбиком. 135 + 643 1000 67 Альтернативы десяти + 0 1 2 3 4 5 6 7 0 0 1 2 3 4 5 6 7 1 1 2 3 4 5 6 7 10 2 2 3 4 5 6 7 10 11 3 3 4 5 6 7 10 11 12 4 4 5 6 7 5 5 6 7 6 6 7 7 7 10 11 12 14 13 10 11 12 13 14 13 10 11 12 14 15 15 16 13 10 11 12 Начнем с правого столбца: 5 плюс 3 равно 10. Пишем 0, а 1 переносим. 1 + 3 + 4 = 10. Пишем 0, 1 переносим. 1 + 1 + 6 = 10. Великое равенство 2 � 2 = 4 выполняется и в восьмеричной системе. А вот произведение двух троек равно не 9. А чему же? Оказывается, 3 � 3 = 11ВОСЕМЬ = 9ДЕСЯТЬ. Вот как выглядит таблица умножения в восьмеричной системе.  ×  0 1 2 3 4 5 6 7 0 0 0 0 0 0 0 0 0 1 0 2 3 4 5 6 7 2 0 2 4 6 10 12 14 16 3 0 3 6 11 14 17 22 25 4 0 4 10 14 20 24 5 0 5 12 17 24 6 0 6 14 22 7 0 7 16 30 34 31 36 43 61 30 36 44 52 25 34 43 52 1  В данном случае 4 � 6 = 30ВОСЕМЬ, что эквивалентно числу 24ДЕСЯТЬ, равному 4 � 6 в десятичной системе. 68 Глава восьмая Итак, восьмеричная система не менее обоснована, чем де- сятичная. Но мы на этом не остановимся. Теперь, когда мы построили систему счисления для мультяшек, поищем что- нибудь подходящее для раков. У раков нет пальцев, но есть клешни. Система счисления для раков основана на 4 и называ- ется четверичной. 1 2 3 10 Счет в этой системе происходит так: 0, 1, 2, 3, 10, 11, 12, 13, 20, 21, 22, 23, 30, 31, 32, 33, 100, 101, 102, 103, 110 и т. д. Я не хочу уделять много внимания четверичной системе, так как нам пора двигаться к еще более важным вещам. По- смотрим лишь, как позиции в четверичном числе соответству- ют степеням четырех. Количество единиц Количество четверок Количество 16 Количество 64 Количество 256 Количество 1024 Четверичное число 31 232 можно записать так: 31 232 чЕТЫРЕ = 3 � 10 000чЕТЫРЕ + 1 � 1 000чЕТЫРЕ + 2 � 100чЕТЫРЕ + 3 � 10 чЕТЫРЕ + 2 � 1чЕТЫРЕ 69 Альтернативы десяти так: 31 232 чЕТЫРЕ = 3 � 256ДЕСЯТЬ + 1 � 64ДЕСЯТЬ + 2 � 16ДЕСЯТЬ + 3 � 4 ДЕСЯТЬ + 2 � 1ДЕСЯТЬ или так: 31 232 чЕТЫРЕ = 3 � 44 + 1 � 43 + 2 � 42 + 3 � 41 + 2 � 40 Проделав вычисления в десятичной системе, получаем, что 31 232 чЕТЫРЕ = 878   ДЕСЯТЬ. Наконец, мы готовы взять последнее, самое серьезное пре- пятствие. Представим себе, что мы дельфины и должны на- учиться считать с помощью двух плавников. Теперь в нашем распоряжении всего две цифры: 0 и 1. Система счисления, ос- нованная на двух цифрах, называется двоичной. Чтобы привыкнуть к двоичным числам, требуется некото- рая практика. Проблема в том, что цифры очень быстро за- канчиваются. Смотрите, как считает дельфин. 1 10 Да, в двоичной системе сразу после 1 идет 10. Это удивитель- но, но не так уж неожиданно. В любой системе счисления, ког- да заканчиваются одноразрядные числа, первым двухразряд- ным числом является 10. В двоичной системе мы считаем так: 70 Глава восьмая 0, 1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111, 10000, 10001... Эти числа кажутся большими, но на самом деле таковыми не яв- ляются. Говоря точнее, двоичные числа не большие, а длинные. Число голов у человека равно 1ДЕСЯТЬ или 1ДВА. Число плавников у дельфина равно 2ДЕСЯТЬ или 10ДВА. Число чайных ложек в столовой равно 3ДЕСЯТЬ или 11ДВА. Число сторон у квадрата равно 4ДЕСЯТЬ или 100ДВА. Число пальцев на руке у человека равно 5ДЕСЯТЬ или 101ДВА. Число ног у насекомого равно 6ДЕСЯТЬ или 110ДВА. Число дней в неделе равно 7ДЕСЯТЬ или 111ДВА. Число музыкантов в октете равно 8ДЕСЯТЬ или 1000ДВА. Число планет в Солнечной системе равно 9ДЕСЯТЬ или 1001ДВА. Число миллиметров в сантиметре равно 10ДЕСЯТЬ или 1010ДВА и так далее. В многозначном двоичном числе позиции цифр соответ- ствуют степеням двойки. Количество единиц Количество двоек Количество четверок Количество восьмерок Количество 16 Количество 32 Поэтому любое двоичное число, состоящее из 1 с нескольки- ми нулями, является степенью двойки. Показатель степени равен числу нулей. Таблица степеней двойки демонстрирует это правило наглядно. Степень Десятичное Восьме- Четве- Двоичное двойки ричное ричное 20 1 1 1 1 21 2 2 2 10 22 4 4 10 100 23 8 10 20 1000 24 16 20 100 10000 71 Альтернативы десяти 25 32 40 200 100000 26 64 100 1000 1000000 27 128 200 2000 10000000 28 256 400 10000 100000000 29 512 1000 20000 1000000000 210 1024 2000 100000 10000000000 211 2048 4000 200000 100000000000 212 4096 10000 1000000 1000000000000 Рассмотрим в качестве примера число 101101011010. Его можно записать так: 101101011010 ДВА = 1 � 2 048ДЕСЯТЬ + 0 � 1 024ДЕСЯТЬ + 1 � 512ДЕСЯТЬ + 1 � 256ДЕСЯТЬ + 0 � 128ДЕСЯТЬ + 1 � 64ДЕСЯТЬ + 0 � 32ДЕСЯТЬ + 1 � 16ДЕСЯТЬ + 1 � 8ДЕСЯТЬ + 0 � 4ДЕСЯТЬ + 1 � 2ДЕСЯТЬ + 0 � 1ДЕСЯТЬ или так: 101101011010ДВА = 1 � 211 + 0 � 210 + 1 � 29 + 1 � 28 + 0 � 27 + 1 � 26 + 0 � 25 + 1 � 24 + 1 � 23 + 0 � 22 + 1 � 21 + 0 � 20 (продолжение) 72 Глава восьмая Сложив эти числа в десятичной форме, получаем 2 048 + 512 + + 256 + 64 + 16 + 8 + 2 = 2 906ДЕСЯТЬ. Чтобы облегчить преобразование двоичных чисел в деся- тичные, используйте созданный мной шаблон.   ×128 + ×64 ×32 ×16 ×8 ×4 ×2 ×1 + + + + + + = Этот шаблон позволяет преобразовать двоичные числа длиной в восемь цифр, но его легко продлить. Поместите вось- мизначное двоичное число в 8 верхних квадратиков, по одной цифре в каждый квадратик. Проделайте восемь умножений и запишите результаты в восьми нижних квадратиках. Сложите эти результаты и получите искомое число. Допустим, вам нуж- но найти десятичный эквивалент двоичного числа 10010110. + + + + + + + = 1 0 0 1 0 1 1 0 128 0 0 16 0 4 2 0 150   ×128 ×64 ×32 ×16 ×8 ×4 ×2 ×1 Преобразовать число из десятичной системы в двоичную уже не так просто, но и эту операцию можно проводить по шаблону. 128 64 32 16 8 4 2 1 Работать с этим шаблоном сложнее, чем кажется, поэтому вни- мательно следуйте моим указаниям. Поместите десятичное число (меньшее или равное 255) целиком в верхний левый квадратик. Разделите это число на первый делитель (128) с ос- татком. Поместите частное в квадратик под делителем, а оста- ток — в следующий верхний квадратик. Этот остаток станет делимым для следующего вычисления, в котором использу- ется делитель 64. Продолжайте вычисления до конца. 73 Альтернативы десяти Помните: частное может быть равно либо 0, либо 1. Если делимое меньше делителя, частное равно 0, а остаток — дели- мому. Если делимое больше или равно делителю, частное рав- но 1, а остаток равен разности между делимым и делителем. Рассмотрим пример с числом 150. 128 64 32 16 8 4 2 1 150 22 22 22 6 6 2 0 0 0 1 0 1 1 0 1 Складывать и умножать двоичные числа даже легче, чем десятичные. Думаю, вам это понравится. Представьте себе, насколько быстрее вы бы складывали, если бы для этого дос- таточно было выучить такую маленькую табличку. + 0 1 0 0 1 1 1 10 Попробуем с ее помощью сложить два числа: 1100101 + 0110110 10011011 Начнем с правого столбца: 1 + 0 = 1. Второй столбец справа: 0 + 1 = 1. Третий столбец: 1 + 1 = 0, а 1 переносим. Четвертый столбец: 1 (перенос) + 0 + 0 = 1. Пятый столбец: 0 + 1 = 1. Ше- стой столбец: 1 + 1 = 0, а 1 переносим. Седьмой столбец: 1 (пе- ренос) + 1 + 0 = 10. Таблица умножения даже проще таблицы сложения, так как ее можно целиком получить из двух основных правил умно- жения: умножение любого числа на 0 дает 0; умножение лю- бого числа на 1 дает то же самое число. � 0 1 0 0 0 1 0 1 Умножим 13ДЕСЯТЬ на 11ДЕСЯТЬ в двоичном виде: 74 Глава восьмая 1101 x 1011 1101 1101 0000 1101 10001111 Получаем 143   ДЕСЯТЬ. Двоичные числа из эстетических соображений часто допол- няют нулями спереди (т. е. слева от первой 1), например,  0011 вместо 11. На значение числа это не влияет. В таблице приво- дятся первые 16 двоичных чисел с их десятичными эквивален- тами. Двоичное Десятичное 0000 0 0001 1 0010 2 0011 3 0100 4 0101 5 0110 6 0111 7 1000 8 1001 9 1010 10 1011 11 1100 12 1101 13 1110 14 1111 15 Посмотрите на этот список двоичных чисел внимательно, уделив внимание каждому из четырех вертикальных столбцов нулей и единиц. Смотрите, как по мере продвижения вниз по столбцу в нем чередуются цифры: 75 Альтернативы десяти • в крайнем столбце справа чередуются 0 и 1; • в следующем столбце чередуются пара 0 и пара 1; • в следующем столбце чередуются четверка 0 и четверка 1; • в следующем столбце чередуются восемь 0 и восемь 1. Чередование весьма систематическое, правда? Вы легко на- пишете и следующие шестнадцать двоичных чисел, добавив к предыдущим числам одну единицу слева. Двоичное Десятичное 10000 16 10001 17 10010 18 10011 19 10100 20 10101 21 10110 22 10111 23 11000 24 11001 25 11010 26 11011 27 11100 28 11101 29 11110 30 11111 31 Посмотрим на эту же последовательность немного под дру- гим углом. Когда вы считаете в двоичной системе, крайняя цифра справа (ее иногда называют младшим разрядом) пооче- редно равна 0 и 1. Всякий раз, когда она меняется с 1 на 0, сле- дующая цифра справа также изменяется — с 0 на 1 или с 1 на 0. Это правило распространяется и на следующие разряды: когда двоичная цифра меняется с 1 на 0, следующая за ней так- же изменяется — либо с 0 на 1, либо с 1 на 0. Работая с большими десятичными числами, мы часто раз- деляем пробелами составляющие их цифры на группы по три, 76 Глава восьмая чтобы легче было оценить величину числа. Например, чтобы распознать число 12000000, вам придется считать, сколько в нем цифр. Но разделите его пробелами (12 000 000), и вы сра- зу поймете, что это 12 миллионов. Двоичные числа удлиняются очень быстро. Например, 12 миллионов в двоичном представлении пишутся так — 101101110001101100000000. Чтобы сделать это число немного более читаемым, отделяйте группы из четырех цифр дефиса- ми (1011-0111-0001-1011-0000-0000) или теми же пробелами (1011 0111 0001 1011 0000 0000). Позже мы рассмотрим более удобный способ записи двоичных чисел. Сократив число цифр до двух, мы дошли до предельно уп- рощенной системы счисления, которая является своеобразным мостиком между арифметикой и электричеством. В предыду- щих главах мы работали с переключателями, проводами, лам- пами и реле. Любое из этих устройств может символизиро- вать двоичные цифры 0 и 1. Провод может быть двоичной цифрой. Если по проводу те- чет ток, двоичная цифра равна 1. Если тока нет, двоичная циф- ра принимает значение 0. Переключатель может быть двоичной цифрой. Если пере- ключатель включен (замкнут), двоичная цифра равна 1. Если выключен (разомкнут), двоичная цифра равна 0. Лампочка может быть двоичной цифрой. Если лампочка го- рит, двоичная цифра равна 1. Если не горит, значение двоич- ной цифры равно 0. Реле может быть двоичной цифрой. Если реле сработало, двоичная цифра равна 1. Если не сработало, двоичная цифра равна 0. Для компьютеров двоичные числа — неисчерпаемый ресурс. Примерно в 1948 г. американский математик Джон Уайл- дер Таки (John Wilder Tukey) (род. 1915) осознал, что словосо- четание «binary digit» (двоичная цифра) по мере распростра- нения компьютеров будет приобретать все большее значение. Он решил заменить его новым, более коротким словом. Рас- смотрев такие варианты как bigit и binit, он остановился на простом, элегантном и симпатичном слове бит (bit). Глава 9 За битом бит Когда Тони Орландо (Tony Orlando) в 1973 г. просил в песне, чтобы его возлюбленная повязала вокруг дуба желтую ленточ- ку, он не нуждался ни в подробных объяснениях, ни в дли- тельной дискуссии. Ему не нужны были «если», «кроме того» и «тем не менее». В ситуации, о которой рассказывала песня, непременно были бы замешаны сложные чувства, но на са- мом деле ее герой хотел услышать лишь «да» или «нет». Он хотел, чтобы желтая ленточка, обвязанная вокруг дерева, оз- начала: «Да, ты долго валял дурака и три года просидел в тюрь- ме, но я все равно хочу, чтобы ты вернулся и жил со мной под одной крышей». А отсутствие ленточки значило бы : «Даже носа своего не показывай». Как видите, есть лишь две четкие взаимоисключающие воз- можности. Тони не пел «Обвяжи дерево половиной ленточки, если должна немного подумать» или «Обвяжи дерево синей лен- точкой, если больше не любишь меня, но хочешь, чтобы мы остались друзьями». Нет, он выразился очень и очень просто. Не менее эффективными, чем отсутствие или наличие жел- той ленточки, были бы дорожные знаки в воротах — «Въезд разрешен» или «Въезд запрещен» (хотя спеть о них было бы труднее). Или плакатик на двери — «Закрыто» или «Открыто». Или фонарик в окне — включенный или выключенный. 78 Глава девятая Сказать «да» или «нет» можно множеством способов, если это все, что вам нужно сказать. Для этого не нужны предложе- ния или слова, не нужны даже буквы. Все, что требуется, — это бит (bit), а под битом я понимаю 0 или 1. Из прошлых глав мы узнали, что в десятичной системе, ко- торую мы обычно используем для счета, нет ничего особен- ного. Наша система счисления основана на десяти, потому что именно столько у нас пальцев на руках, — это понятно. Мы с тем же успехом могли положить в основу системы счисления восемь (если бы были персонажами мультфильма), четыре (если бы были раками) и даже два (если бы были дельфинами). А вот у двоичной системы есть особенность: это простей- шая возможная система счисления. Есть только две двоичные цифры — 0 и 1. Если мы захотим упростить двоичную систе- му, нам придется избавиться от единицы, и мы останемся с нулем. А с одним нулем ничего толкового не сделаешь. Слово бит (сокращение от binary digit — двоичная цифра), — безусловно, одно из самых симпатичных слов, появивших- ся в связи с компьютерами. Конечно, в английском языке у него есть и обычное значение — «небольшая часть, степень или количество» — и это значение вполне отвечает и компью- терному смыслу бита, поскольку бит — одна двоичная цифра — это и вправду очень мало. Иногда новое слово появляется за счет получения нового значения. Так и со словом «бит». Бит — это нечто большее, чем просто двоичная цифра, используемая дельфинами для расчетов. В компьютерный век бит обрел значение основного структурного блока, из которого строится информация. Это, конечно, очень самоуверенное заявление. Разумеется, передавать информацию можно не только в форме битов, но буквами, словами, азбукой Морзе, азбукой Брайля и десятич- ными цифрами. Главное в бите то, что он содержит очень мало информации. Один бит информации — это минимально воз- можное ее количество. Все, что меньше бита, информации вообще не содержит. С другой стороны, поскольку бит пред- ставляет собой минимальный объем, более сложную инфор- мацию можно передать в нескольких битах. Кстати, говоря о малости содержащейся в бите информации, я вовсе не хочу сказать, что она не важна. Вспомните: желтая ленточка была очень важна для двух людей, которые о ней знали. 79 За битом бит Информацию можно также рассматривать как выбор меж- ду двумя или более возможностями. В устной речи, например, вы выбираете слова из всего вашего словарного запаса. Оди- ночный бит соответствует выбору из двух возможностей (на- пример, «уйди прочь» или «вернись домой»), и две возможно- сти есть, безусловно, минимальное осмысленное их количе- ство. Несколько битов означают выбор из нескольких (боль- ше двух) возможностей. «Послушайте, дети, вместе со мной, О Пола Ревира скачке ночной», — писал Генри Уодсворт Лонг- фелло, оставив нам, возможно, не совсем исторически точное описание того, как Пол Ревир (Paul Revere) предупредил аме- риканских колонистов о вторжении британцев. Эта история — прекрасный пример того, как с помощью битов можно пе- редать важную информацию: Коль из города выйдут британцы сегодня По суше иль морем, — он другу сказал, — Повесишь фонарь на верху колокольни Северной церкви, как особый сигнал,— Один, если сушей, и два, если морем… Говоря коротко, у друга Пола Ревира было два фонаря. Если бы британцы двинулись в наступление по суше, он вывесил бы на колокольне один фонарь, если бы наступление началось морем, он вывесил бы оба. Всех вариантов Лонгфелло явно не указывает. Он ничего не сказал о третьей возможности — британцы вовсе не будут наступать. Лонгфелло предполагает, что этому варианту бу- дет соответствовать отсутствие фонарей на колокольне. Допустим для простоты, что два фонаря висят на арке ко- локольни всегда. Обычно они потушены. 80 Глава девятая Это означает, что наступление британцев еще не началось. Если горит один фонарь, или британцы наступают сушей. Если горят оба фонаря, британцы наступают морем. Каждый фонарь — это бит. Зажженный фонарь соответ- ствует 1, потушенный — 0. Тони Орландо доказал нам, что для выбора одной из двух возможностей нужен всего один бит. Если бы Полу Ревиру достаточно было знать лишь о самом факте наступления британцев (но не о его направлении), его другу хватило бы и одного фонаря. Фонарь горит — наступ- ление началось. Фонарь потушен — судьба дарит вам еще один спокойный вечер. Выбор одной из трех возможностей требует дополнитель- ного светильника. Однако после его добавления становится возможным передать уже один из четырех вариантов: 81 За битом бит 00 = Британцы не наступают 01 = Наступление началось на суше 10 = Наступление началось на суше 11 = Наступление началось морем Ограничившись всего тремя вариантами сообщения, Пол Ревир вообще поступил весьма предусмотрительно. На языке теории коммуникаций это называется избыточной надежнос- тью (redundancy), необходимой для противодействия шуму (noise). Шумом в теории коммуникаций называется все, что мешает связи. Характерный пример — шуршание в телефон- ной трубке. И все же, несмотря на шум, общение по телефону, как правило, оказывается успешным, поскольку устная речь в высокой степени избыточна. Нам не нужно слышать каждый слог в каждом слове, чтобы понять, о чем идет разговор. Говоря о фонарях на колокольне, шумом можно называть ночную тьму или расстояние от Пола Ревира до церкви, т. е. факторы, которые могли помешать ему отличить один фонарь от другого. В стихотворении Лонгфелло есть важный фрагмент: И вот он увидел далекий сигнал — Мерцанье, а после огонь замигал! Мгновенье проходит, и он в седле, Но медлит и видит, как в темной мгле Второй фонарь вдали замерцал! Судя по всему, Пол Ревир вряд ли мог узнать, какой имен- но из двух фонарей был зажжен первым. Здесь важно понять, что информация построена на выборе из двух или более возможностей. Как уже говорилось, в устной речи мы используем слова из словаря. Можно было бы прону- меровать все слова в словаре от 1 до, скажем, 351 482, а затем продолжать разговор, используя номера вместо слов (конеч- но, обоим участникам разговора понадобятся словари с оди- наковой нумерацией и безграничное терпение). Верно также и то, что любую информацию, которую можно свести к выбору из двух или более возможностей, можно пред- ставить набором битов. Нет нужды напоминать, что спосо- бов общения, не ограниченных выбором из дискретного на- бора возможностей и жизненно важных для существования рода человеческого, масса. Вот почему у людей не бывает ро- 82 Глава девятая мантических отношений с компьютерами (надеюсь!). Если вы не можете облечь нечто в слова, изображения или звуки, вы не сможете закодировать эту информацию в виде битов. Да, ве- роятно, и не захотите. Большой палец, развернутый вверх или вниз в конце боя гладиаторов, представляет собой один бит информации, два больших пальца, повернутых вверх или вниз, — два бита. Та- кую систему использовали для оценки новых фильмов кино- критики Роджер Эберт (Roger Ebert) и покойный Джин Сискел (Gene Siskel). Всего в их системе было четыре варианта, пред- ставленных следующими парами битов (подробно мнение Эбер- та и Сискела нас сейчас не интересует; только их оценки): 00 = Обоим не понравилось 01 = Сискелу не понравилось; Эберту понравилось 10 = Сискелу понравилось; Эберту не понравилось 11 = Обоим понравилось Первый бит относится к Сискелу, причем 0 означает, что фильм ему не понравился, а 1 — что понравился. Точно так же второй бит относится к Эберту. Теперь, если друг спросит вас: «Что думали Сискел и Эберт о фильме Impolite Encounter?» — вы, вместо того чтобы отве- тить «С точки зрения Сискела, большой палец вверх, с точки зрения Эберта большой палец вниз» или даже «Сискелу по- нравилось; Эберту нет», можете просто сказать: «Один ноль». Если ваш друг знает, какой бит относится к Сискелу, а какой — к Эберту, и понимает, что бит 1 означает «за», а бит 0 — «против», ваш ответ будет ему совершенно понятен. Но сна- чала вам и вашему другу нужно будет изучить этот шифр. С тем же успехом мы могли бы приписать биту 1 значение «палец вниз», а биту 0 — «палец вверх». Кому-то это покажет- ся противоестественным. Конечно, мы ожидаем, что бит 1 оз- начает что-то утвердительное, а бит 0 — наоборот, но в реаль- ности присвоение значений происходит вполне произвольно. Единственное требование — все люди, использующие шифр, должны знать, что означают биты 0 и 1. Значение конкретного бита или группы битов всегда по- стигается в контексте. Значение желтой ленточки на стволе дуба, вероятно, ясно лишь человеку, который ее там повязал, и тому, кому она предназначается. Измените цвет, дерево или 83 За битом бит день, и ленточка превратится в бессмысленный обрывок тка- ни. Точно так же, чтобы извлечь полезную информацию из жестов Сискела и Эберта, нужно по меньшей мере знать, о ка- ком фильме идет речь. Если вы ведете список фильмов, отрецензированных Сис- келом и Эбертом, с их оценками, вы можете добавить в него еще один бит для учета собственного мнения. После его до- бавления число возможных вариантов вырастет до восьми. 000 = Сискелу не понравилось; Эберту не понравилось; мне не понравилось 001 = Сискелу не понравилось; Эберту не понравилось; мне понравилось 010 = Сискелу не понравилось; Эберту понравилось; мне не понравилось 011 = Сискелу не понравилось; Эберту понравилось; мне понравилось 100 = Сискелу понравилось; Эберту не понравилось; мне не понравилось 101 = Сискелу понравилось; Эберту не понравилось; мне понравилось 110 = Сискелу понравилось; Эберту понравилось; мне не понравилось 111 = Сискелу понравилось; Эберту понравилось; мне понравилось Благодаря тому, что для представления информации ис- пользуются биты, мы можем быть уверены, что рассмотрели все возможности. Мы знаем, что вариантов может быть толь- ко 8, не больше и не меньше. Три бита позволяют посчитать от 0 до 7. Других трехзначных двоичных чисел нет. Теперь, познакомившись с описанием битов Сискела и Эберта, вы вправе задать очень серьезный и непростой воп- рос: а как быть со справочником по кино- и видеофильмам Леонарда Мэлтина (Leonard Maltin)? Ведь Леонард Мэлтин не оперирует большими пальцами. Он расставляет фильмам оценки, используя более традиционную систему звездочек. Чтобы определить, сколько битов нам понадобится для ко- дирования системы Мэлтина, рассмотрим его систему подроб- нее. Мэлтин присваивает фильму от 1 до 4 звезд с точностью до половинки звезды (точнее, одну звезду он не присваивает; 84 Глава девятая настолько плохому фильму присваивается титул «бомба»). Все- го в системе 7 оценок, а это означает, что для их представле- ния мы можем ограничиться тремя битами. 000 = Бомба 001 = � 1/2 010 = �� 011 = �� 1/2 100 = ��� 101 = ��� 1/2 110 = ���� «А что насчет кода 111?» — спросите вы. Что ж, этот код не значит ничего. Он не определен. Если для представления оцен- ки Мэлтина использован код 111, вы сразу знаете, что произош- ла ошибка (виновен в ней, вероятно, компьютер, так как люди не ошибаются никогда). Вспомните: в паре битов, использовавшихся для представ- ления оценок Сискела и Эберта, левый бит был битом Сиске- ла, а правый — Эберта. Значат ли что-нибудь отдельные биты в новой системе? Как сказать… Если вы прибавите 2 к числен- ному значению битового кода, а потом разделите полученное число на 2, то получите число звездочек. Но это возможно лишь потому, что мы использовали логичную и согласован- ную систему кодирования оценок. Но мы могли определить коды и иначе: 000 = ��� 001 = � 1/2 010 = �� 1/2 011 = ���� 101 = ��� 1/2 110 = �� 111 = Бомба Этот шифр имеет столько же прав на существование, сколь- ко и предыдущий, лишь бы все знали, что он означает. Если бы Мэлтину однажды попался фильм, недостойный даже единственной звезды, он мог бы получить вполовину меньше. И для этой оценки у критика нашелся бы свободный код. Таблица кодов могла бы выглядеть, например, так: 85 За битом бит 000 = Большая бомба 001 = Бомба 010 = � 1/2 011 = �� 100 = ��1/2 101 = ��� 110 = ��� 1/2 111 = ���� А вот для включения в рейтинг фильма, который не стоит и половины звезды (0 звезд или «атомная бомба»?), пришлось бы добавлять в систему дополнительный бит. Свободных трех- битовых кодов более не осталось. Журнал Entertainment Weekly расставляет оценки не только фильмам, но и телепрограммам, музыкальным и компьютер- ным компакт-дискам, книгам, Web-узлам и пр. Оценки варь- ируются от A+ до F. Пересчитав их, вы обнаружите 13 воз- можных вариантов. Для их представления понадобится 4 бита. 0000 = F 0001 = D– 0010 = D 0011 = D+ 0100 = C– 0101 = C 0110 = C+ 0111 = B– 1000 = B 1001 = B+ 1010 = A– 1011 = A 1100 = A+ Три кода (1101, 1110 и 1111) остались неиспользованными, полное же их число равно 16. Говоря о битах, мы часто имеем в виду определенное их количество. Чем больше битов мы используем, тем больше число доступных нам вариантов. Конечно, с десятичными числами дела обстоят точно так же. Например, каково число доступных региональных теле- фонных кодов? Код региона строится из трех десятичных цифр, поэтому всего может быть 103, или 1000 кодов, от 000 до 999. 86 Глава девятая Сколько семизначных телефонных номеров доступно в реги- оне с кодом 212? 107, или 10000000. Сколько наберется телефо- нов в регионе с кодом 212, начинающихся с цифр 260? Их бу- дет 104, или 10000. Так и в двоичной системе число возможных кодов опреде- ляется как 2 в степени, равной числу битов. Число битов Число кодов 1 21 = 2 2 22 = 4 3 23 = 8 4 24 = 16 5 25 = 32 6 26 = 64 7 27 = 128 8 28 = 256 9 29 = 512 10 210 = 1024 Каждый дополнительный бит удваивает число доступных кодов. Как посчитать нужное число битов для заданного количе- ства кодов? Иначе говоря, как совершить обратный переход в приведенной таблице? Метод, который можно для этого использовать, заключа- ется в использовании логарифма по основанию 2. Логарифми- рование обратно возведению в степень. Допустим, мы знаем, что 27 = 128. Значит, логарифм числа 128 по основанию 2 ра- вен 7. На языке математики это записывается так: log2128 = 7. Итак, логарифм по основанию 2 числа 128 равен 7, а лога- рифм по основанию 2 числа 256 — 8. Чему тогда равен лога- рифм по основанию 2 числа 200? Если быть точными, то 7,64, но на самом деле такая точность нас не интересует. Для пред- ставления 200 различных вариантов с помощью битов нам их понадобится 8. 87 За битом бит Как правило, биты скрыты от поверхностного взгляда в глу- бинах электронных устройств. Вы не увидите их на компакт- диске, в электронных часах или внутри компьютера. Но иног- да биты различимы вполне отчетливо. Приведу один пример. Если у вас есть обычный фотоаппа- рат с 35-миллиметровой пленкой, возьмите кассету и повер- ните ее, как показано на рисунке. 1 2 3 4 5 6 7 8 9 10 11 12 Перед вами предстанет набор серебристых и черных квад- ратов, отдаленно напоминающий шахматную доску. На ри- сунке я пронумеровал их от 1 до 12. Этот набор называется DX-кодировкой. Ее 12 квадратов в действительности представ- ляют 12 битов. Серебристый квадрат соответствует 1, а чер- ный квадрат — 0. Квадраты 1 и 7 всегда серебристые (1). Что значат эти биты? Вы, возможно, знаете, что пленки раз- личаются по светочувствительности. Ее иногда называют ско- ростью (speed) пленки. Пленка высокой чувствительности счи- тается быстрой (fast), поскольку на ней можно производить съемку с очень короткими экспозициями. Скорость пленки из- меряется в единицах ASA (American Standards Association, Аме- риканская ассоциация по стандартам), причем наиболее по- пулярны пленки с чувствительностью 100, 200 и 400. Чувстви- тельность в единицах ASA не только напечатана на упаковке, но и закодирована на кассете. 88 Глава девятая Существует 24 стандартных чувствительности для фото- пленок. Вот они: 25 32 40 50 64 80 100 125 160 200 250 320 400 500 640 800 1000 1250 1600 2000 2500 3200 4000 5000 Сколько битов нужно, чтобы закодировать чувствитель- ность пленки? Ответ прост — 5. Мы знаем, что 24 = 16 — этого слишком мало. А вот 25 = 32 — больше, чем достаточно. Соответствие между квадратами на кассете и чувствитель- ностью пленки показано в таблице. Квад- Квад- Квад- Квад- Квад- Чувствительность рат 2 рат 3 рат 4 рат 5 рат 6 0 0 0 1 0 25 0 0 0 0 1 32 0 0 0 1 1 40 1 0 0 1 0 50 1 0 0 0 1 64 1 0 0 1 1 80 0 1 0 1 0 100 0 1 0 0 1 125 0 1 0 1 1 160 1 1 0 1 0 200 1 1 0 0 1 250 1 1 0 1 1 320 0 0 1 1 0 400 0 0 1 0 1 500 0 0 1 1 1 640 1 0 1 1 0 800 1 0 1 0 1 1000 1 0 1 1 1 1250 89 За битом бит 0 1 1 1 0 1600 0 1 1 0 1 2000 0 1 1 1 1 2500 1 1 1 1 0 3200 1 1 1 0 1 4000 1 1 1 1 1 5000 Эти коды используются в большинстве современных 35- миллиметровых фотоаппаратов. Если на вашем фотоаппарате выдержка или тип пленки устанавливаются вручную, эти коды в нем не применяются. Если же коды используются в вашем аппарате, присмотритесь к нему в следующий раз, когда будете вставлять пленку. Вы увидите шесть металлических контактов, соответствующих квадратам с 1 по 6 на кассете. Серебристые квадраты — это просто открытая металлическая поверхность кассеты, которая является проводником. Черные квадраты по- крыты краской — она электрического тока не проводит. Электрическая схема фотоаппарата построена так, что ток подводится к первому квадрату на кассете (он всегда серебри- стый). Этот ток будет (или не будет) проведен пятью контак- тами на квадратах со 2 по 6, в зависимости от того, окрашены они изолирующей краской или нет. Так, если ток присутству- ет на контактах 4 и 5, но отсутствует на контактах 2, 3 и 6, в фотоаппарат вставлена пленка 400 ASA. При съемке выдержка будет установлена автоматически. В недорогих фотоаппаратах считываются только квадраты 2 и 3, а чувствительность пленки считается равной 50, 100, 200 или 400 единицам ASA. Квадраты с 8 по 12 в большинстве аппаратов также не ис- пользуются. В квадратах 8, 9 и 10 зашифровано число кадров на пленке, а квадраты 11 и 12 содержат сведения о том, черно- белая пленка или цветная и позитивная или негативная. Вероятно, чаще всего вы сталкиваетесь с двоичными чис- лами в коде UPC (Universal Product Code, универсальный код продукта), или просто штрих-коде, — наборе черных штри- хов, который в наши дни присутствует практически на любой упаковке. Штрих-код — это лучший символ того, насколько компьютеры внедрились в нашу жизнь. (продолжение) 90 Глава девятая Хотя у некоторых людей штрих-код вызывает приступы паранойи, это совершенно безобидная вещь, изобретенная для автоматизации розничной торговли и учета товаров. Со своей задачей он справляется вполне успешно. Благодаря ему, на- пример, современные кассовые аппараты выдают покупателю чек, в котором подробно расписаны все его покупки, чего без штрих-кода сделать было бы нельзя. Нас же в первую очередь интересует то, что код UPC являет- ся двоичным, хотя на первый взгляд этого и не скажешь. Давай- те разберемся, как строится штрих-код и как он работает. Чаще всего встречается штрих-код, состоящий из несколь- ких цифр и 30 вертикальных полосок различной толщины, раз- деленных пустыми интервалами также переменной толщины. Рассмотрим в качестве примера штрих-код, нанесенный на банку с «Супом куриным с вермишелью» фирмы Campbell Soup. 0 7 0 0 0 0 1 2 5 1 1 5 Возникает искушение разделить код UPC на тонкие и тол- стые полоски, узкие и широкие промежутки, и это действи- тельно один из способов разобраться в его структуре. Черные полоски и пустые промежутки штрих-кода бывают четырех различных ширин. Но нам удобнее рассматривать UPC как набор битов. Имей- те в виду, что сканирующему устройству у кассира нет нужды просматривать штрих-код целиком, и уж тем более неспособ- но оно интерпретировать цифры в его основании, поскольку это потребовало бы применения сложной компьютерной тех- нологии распознавания символов (optical character recognition, OCR). Сканеру достаточно увидеть тонкий срез штрих-кода. Код UPC делают таким большим просто для того, чтобы кас- сиру легче было «нацелить» на него сканер. Срез, попадающий в сканер, выглядит так. 91 За битом бит Похоже на азбуку Морзе, правда? Сканируя эту информацию слева направо, компьютер при- сваивает бит 1 первой встреченной черной полоске, и бит 0 первому промежутку. Следующие промежутки и штрихи счи- тываются как последовательности одного, двух, трех или че- тырех битов в зависимости от ширины штриха или проме- жутка. В битовом представлении данный штрих-код выгля- дит так: 10100011010110001001100100011010001101000110101010111001011001101101100100111011001101000100101 Итак, штрих-код представляет собой набор 95 битов. В дан- ном примере эти биты можно разбить на следующие группы. Биты  Значение 101  Левый контрольный узор 0001101 0110001 0011001 0001101 0001101 0001101 01010  Центральный контрольный узор 1110010 1100110 1101100 1001110 1100110 1000100 101 Правый контрольный узор Цифры с левой стороны Цифры с правой стороны Первые три бита — всегда 101. Они называются левым кон- трольным узором (left-hand guard pattern) и нужны для того, чтобы настроить сканирующее устройство. По контрольному узору сканер определяет ширину штриха и промежутка, соот- ветствующую одному биту. Иначе на всех упаковках код UPC пришлось бы делать одного и того же размера. За левым контрольным узором следует шесть групп по 7 битов в каждой. В них закодированы десятичные цифры от 0 до 9, в чем мы убедимся чуть позже. Затем идет 5-битовый цен- тральный контрольный узор — фиксированная группа битов (всегда 01010), используемая как встроенная защита от оши- 92 Глава девятая бок. Не найдя центрального контрольного узора там, где он должен быть, сканер считает штрих-код неверным. Это один из нескольких способов выявить плохо напечатанный или под- деланный штрих-код. За центральным контрольным узором идут еще шесть 7- битовых групп и правый контрольный узор (всегда 101). Поз- же я объясню, как контрольные узоры позволяют сканировать штрих-код как слева направо, так и справа налево. Всего в коде UPC зашифровано 12 десятичных цифр. Шесть из них закодированы с его левой стороны, по 7 битов в каждой. Для их расшифровки можете использовать такую таблицу. Левосторонние коды 0001101 = 0 0110001 = 5 0011001 = 1 0101111 = 6 0010011 = 2 0111011 = 7 0111101 = 3 0110111 = 8 0100011 = 4 0001011 = 9 Заметьте: каждый 7-битовый код начинается с 0 и кончает- ся 1. Натолкнувшись на 7-битовый код, который начинается с 1, а кончается 0, сканер понимает, что код UPC либо неверно прочитан, либо подделан. Кроме того, в каждом коде группы единиц встречаются лишь дважды. Это значит, что каждая де- сятичная цифра в коде UPC зашифрована двумя вертикаль- ными штрихами. Еще одна особенность кодов в этой таблице — нечетное число 1 в каждом из них. Она также позволяет проверить пра- вильность штрих-кода — это так называемый контроль чет- ности (parity). Для интерпретации шести 7-битовых кодов в правой час- ти UPC используйте следующую таблицу. Правосторонние коды 1110010 = 0 1001110 = 5 1100110 = 1 1010000 = 6 1101100 = 2 1000100 = 7 1000010 = 3 1001000 = 8 1011100 = 4 1110100 = 9 93 За битом бит Эти коды являются дополнительными по отношению к предыдущим: там, где в левосторонних кодах был 0, теперь стоит 1, и наоборот. Правосторонние коды всегда начинаются с 1 и заканчиваются 0. Кроме того, число битов 1 в них всегда четно, что можно применять для контроля четности. Теперь мы окончательно готовы к расшифровке UPC. С по- мощью двух приведенных выше таблиц мы можем определить 12 цифр, зашифрованных на банке куриного супа с вермише- лью фирмы Campbell Soup емкостью 10 3/4 унции. Вот они: 0 51000 01251 7 Какое разочарование! Да ведь это те самые цифры, кото- рые и без того напечатаны под штрих-кодом! Да, и это очень удобно: если сканер по каким-то причинам не смог прочитать код, кассир может ввести его вручную. Вы наверняка неоднок- ратно видели, как это происходит. Конечно, получается, что весь наш труд по расшифровке штрих-кода был напрасным, к тому же никакой секретной информации мы так и не получи- ли: просто 30 вертикальных штрихов превратились в 12 цифр. Первая цифра (в данном случае 0) символизирует тип кода. 0 означает, что код является обычным кодом UPC. Если код нанесен на упаковку с товаром переменного веса, например, мясом или овощами, он начинается с 2. Купоны на скидки обо- значаются цифрой 5. Следующие 5 цифр — это код производителя. В нашем примере код 51000 соответствует компании Campbell Soup. Его несут на себе все продукты с маркой Campbell. За ними следу- ет пятизначный (01251) код конкретного продукта данной ком- пании, в данном случае код банки с куриным супом емкостью 10 3/4 унции. Код продукта имеет смысл лишь в сочетании с кодом производителя. У куриного супа с вермишелью, произ- веденного другой компанией, будет другой код продукта, в свою очередь код 01251 может значить нечто совершенно иное у другого производителя. Вопреки распространенному мнению в код UPC не вклю- чается цена продукта. Информация о ней извлекается из ком- пьютерной базы данных, которую магазин использует в соче- тании со сканерами у кассовых аппаратов. Последняя цифра (в нашем случае 7) называется символом проверки остатка (modulo check character) и тоже использует- 94 Глава девятая ся для исключения ошибок. Чтобы проверить его в деле, при- своим каждой из первых 11 цифр (0 51000 01251 в нашем при- мере) букву: A BCDEF GHIJK Теперь вычислим следующее выражение: 3 � (A + C + E + G + I + K) + (B + D + F + H + J) и вычтем результат из ближайшего большего числа, кратного десяти. Полученное число и будет символом проверки остат- ка. Для куриного супа с вермишелью Campbell: 3 � (0 + 1 + 0 + 0 + 2 + 1) + (5 + 0 + 0 + 1 + 5) = = 3 � 4 + 11 = 23 Ближайшее большее число, кратное десяти, — 30. Далее: 30 – 23 = 7 Это число напечатано под штрих-кодом и зашифровано в нем. Используется проверка остатка для вящей надежности. Если остаток, вычисленный по штрих-коду, не совпадет с ос- татком, явно указанным в нем, штрих-код не будет считаться прочитанным. Вообще для представления десятичной цифры от 0 до 9 до- статочно 4 битов. С другой стороны, в UPC их используется 7. Всего в штрих-коде 11 осмысленных десятичных цифр зако- дировано 95 битами. А если учесть, что UPC с обеих сторон выделен пустым пространством, эквивалентным 9 нулевым битам, получается, что во всем штрих-коде 11 цифр закодиро- вано 113 битами, по 10 бит на цифру! Как мы уже видели, избыток битов частично применяется для надежности считывания. От кода продукта было бы мало толку, если бы его можно было в два счета исправить обыч- ным фломастером. Кроме того, благодаря им UPC можно считывать в обоих направлениях. Если в первых считанных цифрах количество единиц четно, сканер распознает, что код читается справа на- лево. Для расшифровки правосторонних цифр компьютер использует следующую таблицу. 95 За битом бит Правосторонние коды в обратном порядке 0100111 = 0 0111001 = 5 0110011 = 1 0000101 = 6 0011011 = 2 0010001 = 7 0100001 = 3 0001001 = 8 0011101 = 4 0010111 = 9 Для расшифровки левосторонних цифр используется сле- дующая таблица. Левосторонние коды в обратном порядке 1011000 = 0 1000110 = 5 1001100 = 1 1111010 = 6 1100100 = 2 1101110 = 7 1011110 = 3 1110110 = 8 1100010 = 4 1101000 = 9 Эти 7-битовые коды отличаются от кодов, считываемых слева направо. Никакой путаницы не возникает. Знакомство с кодами в этой книге началось с азбуки Мор- зе, составленной из точек, тире и промежутков между ними. Азбука Морзе, на первый взгляд, имеет мало общего с нулями и единицами, тем не менее, на деле это почти одно и то же. Вспомните правила азбуки Морзе. Тире втрое длиннее точ- ки. Точки и тире в пределах одной буквы разделены паузами продолжительностью в одну точку. Промежутки между бук- вами по длительности равны одному тире. Слова разделяются паузами в два тире. Чтобы немного упростить анализ, допустим, что длина тире превышает длину точки не в 3, а в 2 раза. Это означает, что точка соответствует одному единичному биту, а тире — двум единичным битам. Паузы составляются из нулевых битов. Вот как выглядит таблица с расшифровкой азбуки Морзе для латинских букв: 96 Глава девятая A B C D E F G H I S T U V W X Y Z J K L M N O P Q R А вот та же таблица, преобразованная в биты. A 101100 B 1101010100 C 11010110100 D 11010100 E 100 F 1010110100 G 110110100 H 101010100 I 10100 O 1101101100 P 10110110100 Q 110110101100 R 10110100 J 101101101100 K 110101100 L 1011010100 M 1101100 N 110100 S 1010100 T 1100 U 10101100 V 1010101100 W 101101100 X 11010101100 Y 110101101100 Z 11011010100 Заметьте: все коды начинаются с 1 и кончаются парой 0, представляющей паузу между буквами в пределах одного сло- ва. Кодом пробела между словами является дополнительная пара 0. Таким образом, на азбуке Морзе фраза «hi there» выг- лядит так: но, представив ее в битах, мы получим нечто, очень похожее на срез штрих-кода: 97 За битом бит 101010100101000011001010101001001011010010000 С точки зрения битов азбука Брайля гораздо проще азбуки Морзе. Шрифт Брайля является 6-битовым кодом. Каждый символ представляется набором из шести точек, каждая из которых может быть выпуклой или плоской. Как я объяснял в главе 3, точки обычно нумеруются с 1 до 6. 1 2 3 4 5 6 Слово «code», например, представляется такими символа- ми азбуки Брайля: Если заменить выпуклую точку на 1, а плоскую — на 0, любой символ азбуки Брайля можно представить 6-битовым двоичным числом. Четыре символа Брайля для букв из слова «code» будут выглядеть так: 100100 101010 100110 100010 где самый левый бит соответствует первой позиции в наборе, а самый правый — шестой позиции. Позже мы узнаем, что с помощью битов можно зашифро- вать не только коды товаров, чувствительность пленки, худо- жественную ценность фильма, способ наступления британской армии или послание любимой женщины, но и любые слова, изображения, звуки, музыку и кино. Но в основе своей биты — это числа. Для представления информации в форме битов дос- таточно пересчитать количество доступных возможностей. Это количество определяет, сколько битов понадобится для того, чтобы присвоить каждой возможности уникальный номер. Биты также играют важную роль в логике  — странном спла- ве философии и математики, главная цель которого заключа- ется в определении истинности или ложности некоего утвер- ждения. Истину и ложь также можно обозначить через 1 и 0. Глава 10 Логика и переключатели Что есть истина? Аристотель считал, что ответить на этот воп- рос можно с помощью логики. Собрание его поучений, извес- тное как Органон (датируемое IV в. до н. э.), — самое раннее подробное произведение о логике. Для древних греков логика была средством для анализа языка в поисках истины и потому считалась отраслью философии. В основе аристотелевой ло- гики лежит силлогизм. Самый известный силлогизм (кстати, в трудах Аристотеля его нет) звучит так: Все люди смертны; Сократ — человек; Следовательно, Сократ смертен. В силлогизме из двух истинных посылок выводится третья. Смертность Сократа и без силлогизма достаточно очевид- на, но приведенным выше примером круг силлогизмов не ог- раничен. Задумайтесь, например, над следующими двумя по- сылками, предложенными математиком XIX века Чарльзом Доджсоном, носившем также псевдоним Льюис Кэрролл: Все философы логичны; Нелогичный человек всегда упрям. Из этой пары вывести верное заключение уже не так просто. Кстати, звучит оно так: «Некоторые упрямые люди не явля- ются философами» (заметьте, что в заключении появилась нео- пределенность, выраженная словом «некоторые»). 100 Глава десятая В течение двух тысяч лет математики сражались с логикой Аристотеля, пытаясь обуздать ее математическими символа- ми и операторами. До XIX в. подойти близко к решению этой проблемы удалось лишь Готфриду Вильгельму Лейбницу (1648–1716), который в начале своей научной деятельности увлекся было логикой, но затем заинтересовался другими про- блемами (например, независимо от Ньютона и одновременно с ним изобрел дифференциальное исчисление). А затем наступило время Джорджа Буля. Джордж Буль (George Boole) по- явился на свет в Англии в 1815 г. Шансы на успех в жизни у него были весьма невелики. Он родил- ся в семье башмачника и бывшей горничной, и жесткая классовая структура Британии предполагала, что сам он также не достигнет боль- ших высот. Но благодаря своему пытливому уму и помощи отца (серьезно увлекавшегося матема- тикой и литературой), юный Джордж преуспел в науках, кото- рые считались привилегией маль- чиков из высших классов, в том числе в латыни, греческом и математике. Написав несколько научных статей по математи- ке, в 1849 г. Буль стал первым профессором математики Кол- леджа Королевы в ирландском городе Корк. Над математической формулировкой законов логики ра- ботали в середине XIX в. многие математики (наибольших ус- пехов добился Огастес Морган), но только Булю удалось со- вершить концептуальный прорыв в этой области, сначала в короткой книжке «Математический анализ логики, или очерк исчисления дедуктивного рассуждения» (1847), а затем в бо- лее объемном и амбициозном труде «Исследование законов мышления, на которых основаны математические теории ло- гики и вероятностей» (1854), который часто сокращенно на- зывают просто «Исследование законов мышления». Умер Буль в 1864 г. от воспаления легких, которое он подхватил, попав под дождь по дороге на занятия. Ему было всего 49 лет. 101 Логика и переключатели Название основного труда Буля предполагает решение грандиозной задачи. Рациональное мышление происходит по законам логики, а значит, если мы найдем способ описать эти законы средствами математики, тем самым мы получим мате- матическое описание работы мозга. Конечно, в наши дни это представление кажется довольно-таки наивным (возможно, мы до него все еще не доросли!). По внешнему виду и действию изобретенная Булем алгеб- ра подобна обычной алгебре. В последней для обозначения чисел используются операнды (как правило, буквы латинского алфавита), а для указания способа объединения чисел — опе- раторы (например, знаки + или  �). Традиционная алгебра ис- пользуется, например, для решения таких задач. У Ани было 3 яблока, у Бетти в 2 раза больше, а у Кармен на 5 яблок больше, чем у Бетти. Наконец, у Дейдры было яблок в 3 раза больше, чем у Кармен. Сколько яблок было у Дейдры? Чтобы решить эту задачу, мы должны заменить слова ариф- метическими выражениями, подставив вместо имен буквы ла- тинского алфавита: A = 3 B = 2 � A C = B + 5 D = 3 � C Подстановками эти выражения можно объединить в одно, а затем вычислить его: D = 3 � C D = 3 � (B + 5) D = 3 � ((2 � A) + 5) D = 3 � ((2 � 3) + 5) D = 33 Вычисляя алгебраические выражения, мы следуем опреде- ленным правилам. Эти правила настолько глубоко проникли в наши повседневные расчеты, что мы даже не принимаем их за правила и не помним их названий. И все же они положены в основу любых вычислений. Первое правило заключается в том, что операции сложе- ния и умножения коммутативны. Это значит, что их операн- ды можно менять местами и результат не изменится: 102 Глава десятая A + B = B + A A � B = B � A А вот операции вычитания и деления коммутативными не яв- ляются. Сложение и умножение также являются ассоциативны- ми, т. е.: A + (B + C) = (A + B) + C A � (B � C) = (A � B) � C Наконец, умножение дистрибутивно относительно сложения: A � (B + C) = (A � B) + (A � C) Другая характерная особенность обычной алгебры в том, что она всегда работает с числами: количествами, весами, рас- стояниями, возрастами и пр. Понадобился гений Буля, чтобы сделать алгебру более абстрактной, отделив ее от концепции числа. В булевой алгебре (так стали называть алгебру, разра- ботанную Булем) операнды обозначают не числа, а множества, т. е. наборы чего угодно. Поговорим о кошках. Кошки бывают мужского и женско- го пола. Для удобства будем обозначать котов буквой М, а ко- шек — Ж. Не забывайте, что эти буквы не обозначают количе- ство кошек. Число котов и кошек непрерывно меняется — рождаются новые котята, а старые кошки (увы) отходят в мир иной. Буквы М и Ж символизируют множества кошек с опре- деленными свойствами. Чтобы обозначить множество всех котов, достаточно сказать просто «М». Буквами можно обозначить и окрас кошки. Например, бук- ва Р может соответствовать рыжим кошкам, буква Ч — чер- ным, Б — белым. В множество Д можно определить кошек всех других цветов, т. е. не входящих в множества Р, Ч и Б. Наконец, кошка может быть стерилизованной или несте- рилизованной. Пусть первых обозначает буква С, а вторых — буква Н. В обычной (численной) алгебре операторы + и � символи- зируют сложение и умножение. В булевой алгебре эти знаки также используются, что может стать причиной некоторой пу- таницы. Как складывать и умножать обычные числа, знают практически все, а вот можно ли складывать и умножать мно- жества? 103 Логика и переключатели Если говорить точно, то не совсем. В действительности зна- ки + и � в булевой алгебре имеют несколько иное значение. Символом + в булевой алгебре обозначается объединение (union) двух множеств, т. е. множество, состоящее из всех эле- ментов первого множества и всех элементов второго множе- ства. Например, в множество Ч + Б входят все черные и белые кошки. Символ � в булевой алгебре соответствует пересечению (intersection) двух множеств, т. е. множеству, которое содер- жит только элементы, входящие как в первое, так и во второе множество. Например, множество Ж � Р состоит из рыжих кошек женского пола. Как и умножение в обычной алгебре, пересечение двух множеств можно записать в виде Ж · Р или просто ЖР (такую запись предпочитал сам Буль). Чтобы избежать путаницы между обычными и булевыми алгебраическими операциями, вместо + и � объединение и пе- ресечение иногда обозначают знаками  и . Однако значение нововведений Буля для математики отчасти связано с тем, что он придал знакомым операторам более общий смысл, поэто- му я решил присоединиться к его мнению и не вводить в буле- ву алгебру новые символы. Коммутативный, ассоциативный и дистрибутивный зако- ны действуют и в булевой алгебре. Более того, в ней оператор + дистрибутивен относительно оператора �. Вот такое выра- жение в обычной алгебре несправедливо: Б + (Ч � Ж) = (Б + Ч) � ( Б + Ж) Объединение белых кошек с черными кошками женского пола содержит те же элементы, что и пересечение двух объе- динений: белых кошек с черными и белых — с кошками жен- ского пола. Звучит, конечно, не очень внятно, но так оно и есть на самом деле. Чтобы завершить описание булевой алгебры, нужно ввес- ти еще два символа. Выглядят они обычными цифрами, но та- ковыми на самом деле не являются, поскольку иногда ведут себя не так, как цифры. Символ 1 в булевой алгебре означает все, о чем идет речь, например, в нашем случае он означает множество всех кошек без исключения. Таким образом: М + Ж = 1 104 Глава десятая Иначе говоря, в объединение кошек мужского и женского пола попадают вообще все кошки. Все кошки содержатся также в объединении множеств рыжих кошек, черных кошек, белых кошек и кошек других окрасов: Р + Ч + Б + Д = 1 Построить множество, содержащее всех кошек, можно и так: С + Н = 1 Если символ 1 используется в сочетании со знаком «ми- нус», он означает все, кроме чего-то. Так, множество: 1 – М содержит всех кошек, кроме кошек мужского пола. Понятно, что в это множество входят кошки женского пола: 1 – М = Ж Последний символ, который нам понадобится, — 0. В бу- левой алгебре он означает пустое множество, т. е. множество, не содержащее ни одного элемента. Пустое множество полу- чается в результате пересечения неперекрывающихся мно- жеств, например, множеств кошек женского и мужского пола: Ж � М = 0 Заметьте: иногда символы 1 и 0 в булевой алгебре ведут себя подобно своим аналогам в обычной алгебре. Например, пересечение всех кошек с кошками женского пола есть мно- жество кошек женского пола: 1 � Ж = Ж Пересечение пустого множества с множеством кошек женско- го пола есть пустое множество: 0 �  Ж = 0 Объединение пустого множества с множеством кошек женс- кого пола есть множество кошек женского пола: 0 + Ж = Ж Но иногда результат получается не такой, как в обычной алгебре. Например, объединение множеств всех кошек и ко- шек женского пола является множеством всех кошек: 1 + Ж = 1 105 Логика и переключатели В обычной алгебре такое выражение особого смысла не имеет. Поскольку множество Ж содержит всех кошек женского пола, а множество (1 – Ж) — всех кошек противоположного пола, объединение двух этих множеств равно 1: Ж + (1 – Ж) = 1 а их пересечение — 0: Ж � (1 – Ж) = 0 Это выражение сыграло важную роль в истории алгебры ло- гики, поэтому у него есть собственное название — закон про- тиворечия. Он гласит, что ничто не может быть одновремен- но собой и своей противоположностью. А вот в следующем выражении уже проявляется отличие булевой алгебры от обычной: Ж � Ж = Ж В булевой алгебре это выражение исполнено смысла: пересе- чение множества кошек женского пола с самим собой равно тому же самому множеству. Если мы подставим вместо мно- жества обычное число, смысл выражения потеряется. Буль счи- тал, что его алгебра отличается от обычной только следующим выражением: X2 = X Еще одно выражение, которое с точки зрения обычной алгеб- ры выглядит странно: Ж + Ж = Ж объединение множества кошек женского пола с самим собой равно тому же самому множеству. В булевой алгебре предлагается математический способ раз- решения аристотелева силлогизма. Вспомним две его первые строки: Все люди смертны; Сократ — человек. Обозначим буквой Л множество всех людей, буквой Х — мно- жество смертных существ, а буквой К — множество Сокра- тов. Что означает высказывание «Все люди смертны»? Оно оз- начает, что пересечение множества людей со множеством смер- тных существ равно множеству людей: 106 Глава десятая Л � Х = Л А вот выражение Л � Х = Х было бы неверным, поскольку в множество смертных существ помимо людей входят кошки, собаки и даже пальмы. Высказывание «Сократ — человек» можно передать следу- ющим образом: пересечение множества Сократов (в нем эле- ментов не так много) со множеством людей (в нем элементов гораздо больше) равно множеству Сократов К � Л = К Из первого выражения мы знаем, что множество Л равно Л � Х. Подставим это во второе выражение: К � (Л � Х) = К Используя ассоциативный закон, переписываем это в виде: (К � Л) � Х = К Но, как мы знаем, пересечение К � Л равно К, а значит: К � Х = К Готово! Эта формула говорит о том, что пересечение множе- ства Сократов со множеством смертных существ равно мно- жеству Сократов, а это как раз и означает, что Сократ смертен. Равенство этого же выражения нулю означало бы, что Сократ не является смертным. Если бы мы нашли, что пересечение К � Х равно Х, то пришли бы к выводу, что Сократ — един- ственное смертное существо, а все остальные существа бес- смертны! Пока что у вас могло сложиться впечатление, что мы стре- ляем из пушки по воробьям, доказывая математическими ме- тодами смертность Сократа (особенно учитывая, что сам Со- крат убедительно доказал свою смертность 2 400 лет назад). Но теми же методами можно проверять выполнение сложного на- бора условий. Представьте себе, заходите вы однажды в зоома- газин и говорите продавцу: «Мне нужна кошка мужского пола, стерилизованная, белая или рыжая; или кошка женского пола, стерилизованная, любого цвета, кроме белого; или любая кош- ка черного окраса». А продавец вам отвечает: «А-а, так вам нуж- на кошка из множества, описываемого выражением: (М � С � (Б + Р)) + (Ж � С � (1 – Б)) + Ч 107 Логика и переключатели Верно?» И вы отвечаете: «Да! Именно так!» Чтобы проверить, правильно ли продавец написал выраже- ние, забудем на время о понятиях объединения и пересечения и будем использовать вместо них операторы ИЛИ (OR) и И (AND). Я специально написал их прописными буквами, чтобы не путать их с обычными словами. Формируя объединение двух множеств, вы в действительности выбираете элементы из од- ного множества ИЛИ из другого множества. В пересечение вы включаете только элементы, входящие в первое множество И во второе множество. Кроме того, вместо единицы со знаком «минус» можно использовать оператор НЕ (NOT). Итак: • вместо оператора объединения + пишем ИЛИ; • вместо оператора пересечения � пишем И; • вместо 1 – (все за исключением чего-то) пишем НЕ. В современных текстах вместо И и ИЛИ иногда использу- ют знаки � и �. С учетом этих замен выражение приобретает вид: (М И С И (Б ИЛИ Р)) ИЛИ (Ж И С И (НЕ Б)) ИЛИ Ч Это условие почти совпадает с тем, что вы с самого начала выразили словами. Обратите внимание на скобки, которые су- щественно прояснили ваше пожелание. Итак, вам нужна кош- ка, входящая в одно из трех множеств: (М  И  С  И  (Б ИЛИ Р)) ИЛИ (Ж  И  С  И  (НЕ Б)) ИЛИ Ч Записав эту формулу, продавец может осуществить про- верку выполнения ваших условий. А вы и не заметили, как я потихонечку перешел к другой форме булевой алгебры! В ней буквы уже не обозначают множеств, и им теперь можно при- сваивать численные значения. Фокус в том, что выбор допус- тимых значений очень ограничен: 0 или 1. 1 означает «исти- на»: да, эта кошка удовлетворяет данному условию. 0 означает «ложь»: нет, эта кошка не удовлетворяет данному условию. 108 Глава десятая Для начала продавец приносит вам нестерилизованного ры- жего кота. Условие покупки кошки выглядит так: (М � С � (Б + Р)) + (Ж � С � (1 – Б)) + Ч а если мы подставим вместо отдельных условий 0 и 1, то так: (1 � 0 � (0 + 1)) + (0 � 0 � (1 – 0)) + 0 Обратите внимание, что единице равны только условия М и Р, поскольку продавец принес рыжую кошку мужского пола. Теперь нужно вычислить значение этого выражения. Если оно равно 1, кошка удовлетворяет вашим условиям, 0 — нет. Проводя вычисления, помните, что наши действия лишь внеш- не напоминают сложение и умножение, но по сути ими не яв- ляются. Впрочем, к ним применимо большинство правил обычной алгебры. При умножении чисел по правилам булевой алгебры воз- можны следующие результаты: 0 � 0 = 0 0 � 1 = 0 1 � 0 = 0 1 � 1 = 1 Иными словами, результат равен 1, только если левый И пра- вый операнд оба равны 1. Эта операция работает точно так же, как обычное умножение. Составим для ее обобщения неболь- шую таблицу, как мы делали в главе 8. И 0 1 0 0 0 1 0 1 В логическом сложении возможные результаты таковы: 0 + 0 = 0 0 + 1 = 1 1 + 0 = 1 1 + 1 = 1 Результат равен 1, если левый ИЛИ правый операнд равны 1. И эта операция мало отличается от обычного сложения за ис- ключением того, что сумма двух единиц также равна 1. Пост- роим таблицу и для операции ИЛИ. 109 Логика и переключатели ИЛИ 0 1 0 0 1 1 1 1 С помощью этих таблиц легко вычислить значение выра- жения: (1 � 0 � 1) + (0 � 0 � 1) + 0 = 0 + 0 + 0 = 0 Нулевой результат означает, что эта кошка вам не подойдет. Тогда продавец предлагает вам белую стерилизованную ко- шечку. Исходное выражение выглядит так: (М � С � (Б + Р)) + (Ж � С � (1 – Б)) + Ч Подставляем в него 0 и 1: (0 � 1 � (1 + 0)) + (1 � 1 � (1 – 1)) + 0 Это равно: (0 � 1 � 1) + (1 � 1 � 0) + 0 = 0 + 0 + 0 = 0 Эту бедную киску вы тоже отвергнете… Наконец, продавец приносит дымчатую стерилизованную самку (ее цвет попадает в категорию Д — другой, т. е. не бе- лый, не черный, не рыжий). Выражение: (0 � 1 � (0 + 0)) + (1 � 1 � (1 – 0)) + 0 сводится к виду: (0 � 1 � 0) + (1 � 1 � 1) + 0 = 0 + 1 + 0 = 1 Окончательный результат равен 1 — кошка нашла свой но- вый дом! Вечером того же дня кошка дремлет, свернувшись в клу- бок у вас на коленях, а вы размышляете, можно ли соорудить из нескольких тумблеров и лампочки устройство, которое оп- ределяло бы, подходит вам данная кошка или нет (ничего не скажешь, ребенок вы странноватый). При этом вы не полнос- тью осознаете, что готовы совершить судьбоносный шаг: объе- динить алгебру Джорджа Буля с электричеством, т. е. создать устройство, принципиально сходное с компьютером, работа- ющим с двоичными числами. Надеюсь, вы не слишком раз- волновались. 110 Глава десятая Чтобы начать эксперимент, соедините лампочку с батарей- кой, как обычно, но включите в цепь два переключателя, а не один. Переключатели, соединенные таким способом (один за дру- гим), называются подключенными последовательно (in series). Если вы замкнете левый переключатель, не случится ничего. Ничего не случится, если вы замкнете правый переключатель при разомкнутом правом. Лампочка загорится лишь при од- ном условии: если вы включите левый и правый переключа- тели одновременно. 111 Логика и переключатели Ключевое слово тут — и. Чтобы по цепи шел ток, должны быть включены левый и правый переключатели. Эта цепь решает простую логическую задачу. Говоря по- просту, лампочка отвечает на вопрос «Оба ли переключателя замкнуты?». Работу цепи можно суммировать в небольшой таблице. Левый переключатель Правый переключатель Лампочка Разомкнут Разомкнут Не горит Разомкнут Замкнут Не горит Замкнут Разомкнут Не горит Замкнут Замкнут Горит В предыдущей главе я рассказал, как представлять инфор- мацию с помощью двоичных цифр, или битов, — от чисел до направления пальца Роджера Эберта. Мы говорили, что 0 оз- начает палец вниз, а 1 означает палец вверх. У переключателя две позиции, поэтому для его описания достаточно одного бита. Можно сказать, например, что 0 соответствует разомк- нутой цепи, а 1 — замкнутой. У лампочки также два состоя- ния, поэтому и ее можно описать одним битом. Значение 0 этого бита означает, что лампа не горит, а 1 соответствует го- рящей лампе. Теперь перепишем таблицу. Левый переключатель Правый переключатель Лампочка 0 0 0 0 1 0 1 0 0 1 1 1 Заметьте: если левый и правый переключатели поменять мес- тами, результат не изменится. Поэтому их можно не разли- чать и переписать таблицу в том же виде, что ранее мы ис- пользовали для операторов И и ИЛИ. Переключатели при последовательном соединении 0 1 0 0 0 1 0 1 112 Глава десятая Эта таблица выглядит точно так же, как таблица для опера- тора И. Проверьте: И 0 1 0 0 0 1 0 1 Эта простая схема выполняет операцию И булевой алгебры. Теперь подключим переключатели иначе. Это параллельный (in parallel) способ подключения. Отли- чие от предыдущего в том, что лампочка будет гореть незави- симо от того, включили вы верхний переключатель: 113 Логика и переключатели нижний: или оба: Лампа горит, если включен верхний или нижний переключа- тель. Ключевое слово здесь или. И снова схема решает логическую задачу. На этот раз воп- рос звучит так: «Включен ли хоть один переключатель?» Рабо- та схемы проиллюстрирована в следующей таблице. 114 Глава десятая Левый переключатель Правый переключатель Лампочка Разомкнут Разомкнут Не горит Разомкнут Замкнут Горит Замкнут Разомкнут Горит Замкнут Замкнут Горит Изменим таблицу, заменяя разомкнутое положение переклю- чателя и потушенную лампу 0, а замкнутое положение и горя- щую лампу — 1. Левый переключатель Правый переключатель Лампочка 0 0 0 0 1 1 1 0 1 1 1 1 Учитывая, что положение переключателя роли не играет, пе- репишем таблицу в упрощенном виде: Переключатели при параллельном соединении 0 1 0 0 1 1 1 1 Вы, вероятно, уже догадались, что это таблица для логическо- го ИЛИ: ИЛИ 0 1 0 0 1 1 1 1 А это значит, что два параллельных переключателя выполня- ют логическую операцию ИЛИ. Зайдя в зоомагазин, вы сказали следующее: «Мне нужен кот, стерилизованный, белый или рыжий; или кошка, стерилизован- ная, любого цвета, кроме белого; или любая кошка черного ок- раса», а продавец перевел это высказывание в выражение: (М � С � (Б + Р)) + (Ж � С � (1 – Б)) + Ч Теперь вы знаете, что последовательно соединенные переклю- чатели выполняют логическую операцию И (выражаемую зна- 115 Логика и переключатели ком �), а параллельно соединенные переключатели выполня- ют логическую операцию ИЛИ (выражаемую знаком +), и можете соединить 8 переключателей в такую схему: Б Р С С Ж Б Ч М Каждый переключатель в этой схеме помечен буквой — той же, что и в булевом выражении ( _ Б эквивалентно выраже- нию НЕ Б и является другой формой записи выражения 1 – Б). Просмотрев схему слева направо и сверху вниз, вы увидите, что буквы стоят на ней в том же порядке, что и в выражении. Каждому знаку � в выражении соответствует точка схемы, в которой два переключателя (или две группы переключателей) соединены последовательно. Каждому знаку + в выражении соответствует место на схеме, в котором два переключателя (или две группы переключателей) соединены параллельно. Как вы помните, сначала продавец принес нестерилизован- ного рыжего кота. Включите соответствующие переключатели. Б Р С С Ж Ч М Б 116 Глава десятая Хотя переключатели М, Р и НЕ Б замкнуты, цепь в целом разомкнута, и лампочка не горит. Затем продавец принес сте- рилизованную белую кошечку: Б Р С С Ж Ч М Б И снова цепь осталась разомкнутой. И наконец на сцене появляется стерилизованная серая кошечка: Б Р С С Ж Ч М Б Вот теперь цепь замкнута, а лампочка горит, сигнализируя, что все ваши условия выполнены. Джордж Буль такой схемы не разработал. Ему никогда не хотелось увидеть, как выражения его алгебры оживают в виде переключателей, проводов и лампочек. Отчасти этому препят- 117 Логика и переключатели ствовало отсутствие лампы накаливания, которая была изоб- ретена лишь через 15 лет после смерти Буля. Но работу теле- графа Сэмюэль Морзе продемонстрировал в 1844 г. — через десять лет после публикации булевского «Исследования зако- нов мышления», и в приведенных выше схемах лампочку впол- не можно было заменить зуммером телеграфа. Тем не менее, никто в XIX в. не увидел связи между логи- ческими операторами И и ИЛИ и последовательным и парал- лельным соединением переключателей. Ни математики, ни электрики, ни операторы телеграфа — никто. Не сделал этого даже провозвестник компьютерной революции Чарльз Бэб- бидж (Charles Babbage) (1792–1871), который переписывался с Булем, знал о его работах и посвятил большую часть своей жиз- ни созданию Аналитической Машины, которую век спустя ста- ли называть прототипом современных компьютеров. Теперь мы знаем: помочь Бэббиджу могло осознание того, что для ав- томатизации вычислений вместо колес и рычажков нужно было использовать телеграфные реле. Да, телеграфные реле. Глава 11 Вентили, которые не протекают В отдаленном будущем, когда история примитивных вычис- лений XX в. начнет постепенно забываться, кто-нибудь, веро- ятно, предположит, что логический вентиль (gate) ведет свою родословную от одноименного сантехнического приспособле- ния. Однако это не совсем так. Хотя, как мы вскоре узнаем, логические вентили и впрямь похожи на обычные водопро- водные краны: они выполняют простые логические операции, останавливая или пропуская через себя электрический ток. Помните, в предыдущей главе мы вообразили, что вы при- шли в зоомагазин и заявили: «Хочу белого или рыжего стери- лизованного кота, или стерилизованную кошку любого цве- та, кроме белого, или любую кошку или кота черного цвета». Все эти пожелания описываются логическим выражением: (М � С � (Б + Р)) + (Ж � С � (1 – Б)) + Ч или такой электрической схемой с переключателями и элект- рической лампочкой: 120 Глава одинадцатая Б Р С С Ж Ч М Б Все до единого компоненты этой схемы изобретены еще в XIX в., но никто в то время не осознал, что они позволяют реализовать булевы выражения. О связи электричества и ло- гики не было известно до 1930-х годов, когда в своей магис- терской диссертации «Символьный анализ цепей с реле и пе- реключателями» на нее указал Клод Элвуд Шеннон (Claude Elwood Shannon) (род. 1916). Десять лет спустя в статье Шен- нона «Математическая теория коммуникации» слово бит (bit) впервые было использовано в значении «двоичная цифра» (binary digit). Конечно, и до 1938 г. было известно, что для протекания тока по цепи с двумя переключателями, соединенными после- довательно, оба они должны быть замкнуты, а для протека- ния тока по цепи с параллельным соединением переключате- лей замкнут должен быть только один из них. Но никто не показал с ясностью и убедительностью Шеннона, что для проектирования цепей с переключателями можно применять средства булевой алгебры. В частности, если булево выраже- ние, описывающее работу схемы, удается упростить, упрос- тить можно и саму схему. Итак, выражение, которое описывает свойства нужной вам кошки или кота, выглядит так: (М � С � (Б + Р)) + (Ж � С � (1 – Б)) + Ч Коммутативный закон умножения позволяет изменить поря- док переменных, связанных знаком � , и переписать выраже- ние в виде: 121 Вентили, которые не протекают (С � М � (Б + Р)) + (С �  Ж � (1 – Б)) + Ч Чтобы мои действия стали понятнее, введем две вспомогатель- ных переменные X и Y: X = М � (Б + Р) Y = Ж � (1 – Б) С их помощью выражение для кошачьих свойств запишется так: (С � X) + (С � Y) + Ч Закончив упрощение, мы опять подставим вместо X и Y их значения. Как видите, переменная С появляется в выражении дваж- ды. Применив дистрибутивный закон умножения относитель- но суммы, перепишем выражение так, чтобы С встречалась в нем только один раз: (С � (X + Y)) + Ч Теперь подставим исходные значения X и Y: (С � ((M � (Б + Р)) + (Ж � (1 – Б)))) + Ч. В этом выражении так много скобок, что на первый взгляд трудно назвать его упрощенным. И все же в нем переменных на одну меньше, чем в первоначальном варианте, а значит, одним переключателем меньше в схеме. Вот как выглядит из- мененная версия схемы:  Б Ж М С Р Ч Б Честно говоря, проще разглядеть эквивалентность двух схем, чем проверить равенство булевых выражений. 122 Глава одинадцатая А ведь из этой схемы можно убрать еще три переключате- ля. Теоретически для задания параметров кошки хватит четы- рех переключателей. Почему четырех? По сути каждый пере- ключатель — это 1 бит. Один переключатель позволяет зада- вать пол (выключен — мужской, включен — женский), дру- гой служил бы признаком стерилизации (выключен — стери- лизована, включен — нет), с помощью оставшихся двух мож- но указывать цвет. Выбирая кошку, вы задаете четыре цвето- вых признака: белый, черный, рыжий и другой. Мы знаем, что четыре свойства можно задать двумя битами, поэтому для вы- бора цвета нужно всего два переключателя. Скажем, два пере- ключателя разомкнуты — цвет белый, первый переключатель замкнут — черный, второй переключатель замкнут — рыжий, оба переключателя замкнуты — все остальные цвета. Теперь создадим для выбора кошки специальный прибор. На его пульте размещены четыре переключателя и лампочка. Кошка моей мечты Пульт управления Мяу Ж М С Н Б Ч Р Д Если тумблер вверху, переключатель замкнут, внизу — разом- кнут. Боюсь, что обозначения переключателей для выбора цве- та несколько туманны, но это плата за стремление сделать пульт максимально экономичным. Левый переключатель в этой паре обозначен Ч. Это значит, что когда он замкнут (как показано на рисунке), выбран черный цвет. Правый переклю- чатель в паре обозначен Р, и его включение значит, что выб- ран рыжий окрас. Если оба тумблера вверху, выбран цвет «дру- гой», что символизирует буква Д. Если оба тумблера внизу, выбран белый цвет (буква Б). На компьютерном языке этот набор переключателей на- зывается устройством ввода (input device) информации, управ- ляющей поведением цепи. У нас переключатели позволяют 123 Вентили, которые не протекают ввести 4 бита информации, которые описывают кошку или кота. Электрическая лампочка — устройство вывода (output device) — загорается, если параметры кошки, заданные пере- ключателями, соответствуют вашим требованиям. Положение переключателей на рисунке соответствуют выбору черной не- стерилизованной кошки. Она удовлетворяет вашим критери- ям, и потому лампочка горит. Теперь осталось разработать электрическую схему, кото- рая обеспечивала бы работу этого пульта. Как вы помните, диссертация Клода Шеннона называлась «Символьный анализ цепей с реле и переключателями». Реле, которые в ней упоминаются, походят на телеграфные, о кото- рых мы говорили в главе 6. Однако во времена Шеннона реле уже применяли и для других целей, в частности, в телефон- ной сети. Как и переключатели, для решения простых логических задач реле можно включать в схемы параллельно и последова- тельно. Такие комбинации реле называются логическими вен- тилями. Говоря о том, что вентили решают простые логичес- кие задачи, я имею в виду простейшие задачи. Преимущество реле по сравнению с переключателями в том, что их можно выключать и включать, используя другие реле, а не вручную. Это значит, что простые вентили можно комбинировать для решения более сложных задач, например, выполнения основ- ных действий арифметики. В следующей главе мы на практи- ке убедимся в том, что из переключателей, лампочек, источ- ника питания и реле можно собрать суммирующую машину (хотя и работающую только с двоичными числами). Вы, конечно, помните, что в работе телеграфа реле играли важнейшую роль. Провода, соединяющие телеграфные станции, обладают высоким сопротивлением, поэтому требуется устрой- ство, которое принимало бы слабый сигнал и передавало иден- тичный мощный. В реле это происходит благодаря электромаг- ниту, который управляет переключателем. Фактически для по- лучения мощного сигнала реле усиливает слабый сигнал. Но нам нет нужды использовать реле в качестве усилите- ля. Реле интересует нас как переключатель, управляемый не вручную, а с помощью электричества. Соединим реле с пере- ключателем, парой батареек и лампочкой: 124 Глава одинадцатая Переключатель слева разомкнут, и лампочка не горит. Если вы замкнете этот переключатель, ток из батареи пойдет по виткам катушки, намотанной на железный сердечник. Сердеч- ник станет магнитом, притянет гибкую металлическую полос- ку, она замкнет цепь и включит лампочку: Если полоска притянута электромагнитом, говорят, что реле сработало (защелкнулось). Когда переключатель размыкает- ся, железный сердечник перестает быть магнитом, и полоска возвращается в первоначальное (незамкнутое) состояние. Не слишком ли замысловатый способ мы избрали, чтобы включить свет? Конечно, если бы мы были заинтересованы 125 Вентили, которые не протекают только в этом, то обошлись бы и без реле, но наши притяза- ния включением света не ограничиваются. В этой главе мы будем использовать реле очень часто (а потом, построив все логические вентили, практически навсег- да забудем о них), поэтому я хочу упростить изображение схе- мы. Исключим некоторые провода с помощью земли. В дан- ном случае, «земля» значит просто общий провод и с реаль- ной землей соединяться не должна. Я понимаю, что схема не слишком упростилась, но мы еще не закончили. Обратите внимание: отрицательные контакты обе- их батарей соединены с землей. Поэтому везде, где мы увидим нечто подобное: заменим это изображение заглавной латинской V, как посту- пали в главах 5 и 6. Теперь схема выглядит так: 126 Глава одинадцатая V V Когда переключатель замкнут, ток между источником питания и землей протекает через катушку электромагнита, электромаг- нит притягивает металлическую полоску, и та замыкает цепь между питанием, лампочкой и землей. Лампочка загорается. V V На этой схеме два источника питания и две земли, но на схемах в этой главе все земли можно соединить и все источни- ки питания тоже можно соединить друг с другом. Во всех ре- лейных схемах и логических вентилях в этой и следующей гла- вах достаточно одного (достаточно мощного) источника пи- 127 Вентили, которые не протекают тания. Например, предыдущую схему можно перерисовать с использованием только одной батареи: Но для наших целей эта схема не слишком годится. Лучше избегать замкнутых цепей и описывать работу реле с помо- щью понятий входного (input) и выходного (output) сигналов. V Выход Вход Если на вход поступает ток (например, если он с помощью переключателя подключен к источнику питания), электромаг- нит срабатывает, и на выходе появляется напряжение. На входе реле не обязательно должен стоять переключа- тель, а на выходе — лампочка. Выход одного реле может под- ключаться ко входу другого реле, например, так: 128 Глава одинадцатая V V V Когда вы замыкаете переключатель, первое реле срабатывает и подает питание на второе реле. Оно тоже сработает, и вклю- чится свет: V V V Соединение нескольких реле лежит в основе построения ло- гических вентилей. В действительности лампочку можно соединить с реле дву- мя способами. Видите гибкую металлическую полоску, кото- рая притягивается электромагнитом? В состоянии покоя она касается верхнего контакта, а когда электромагнит ее притя- гивает — нижнего. До сих пор мы использовали в качестве выхода реле нижний контакт, но в этом качестве можно ис- пользовать и верхний. В последнем случае лампочка горит, когда переключатель разомкнут. 129 Вентили, которые не протекают V V Когда входной переключатель замкнут, лампочка гаснет. V V Такое реле называется двухпозиционным (double-throw). У него два электрически противоположных выхода: когда на одном есть напряжение, на другом его нет. Подобно переключателям, реле можно соединить последо- вательно: 130 Глава одинадцатая V V V Выход верхнего реле подает питание на нижнее. Как видите, если оба переключателя разомкнуты, лампочка не горит. По- пробуем замкнуть верхний переключатель: V V V 131 Вентили, которые не протекают Лампочка не включилась, так как нижний переключатель ра- зомкнут, и нижнее реле не сработало. Теперь разомкнем верх- ний переключатель и замкнем нижний. V V V Все равно не горит. Ток не доходит до лампочки, так как не сработало первое реле. Единственный способ заставить ее све- тить — замкнуть оба переключателя. V V V 132 Глава одинадцатая Теперь сработали оба реле, и ток течет между источником пи- тания, лампочкой и землей. Подобно двум переключателям, соединенным последова- тельно, эти два реле выполняют простую логическую функ- цию. Лампочка горит, если сработали оба реле. Эта схема на- зывается вентилем И (AND). Символически он изображается так: Выход Входы Это первый из четырех основных логических вентилей. У вен- тиля И два входа (на схеме слева) и один выход (на схеме спра- ва). Вентиль И часто рисуют именно так: со входами слева и выходом справа. Да оно и понятно: людям, привыкшим чи- тать слева направо, и электрические схемы удобно рассматри- вать слева направо. Но вентиль И с тем же успехом можно рисовать и со входами вверху, справа или внизу. Первоначально схема с двумя последовательно соединенны- ми реле, двумя переключателями и лампочкой выглядела так: V V V 133 Вентили, которые не протекают Использовав символ вентиля И, ту же схему можно изобра- зить так: V V Символ вентиля И не только заменяет два последовательно соединенных реле, но и подразумевает, что верхнее реле со- единено с источником питания и оба соединены с землей. Еще раз: лампочка загорается, только если замкнуты верхний и нижний переключатели. Поэтому схема и называется венти- лем И. Входы вентиля И не обязательно должны соединяться с переключателями, а выход не обязательно должен быть под- ключен к лампочке. По сути, мы имеем дело только с напря- жениями на входе и на выходе. Например, выход одного вен- тиля И может быть входом второго вентиля И: V V V Эта лампочка горит, только когда замкнуты все три переклю- чателя. Если замкнуты оба верхних переключателя, выход пер- вого вентиля И заставит сработать первое реле второго венти- ля И. Нижний же переключатель заставит сработать второе реле второго вентиля И. Если мы обозначим отсутствие напряжения 0, а его при- сутствие — 1, выходной сигнал вентиля И зависит от входно- го сигнала следующим образом: 134 Глава одинадцатая 0 0 0 0 1 0 0 0 1 1 1 1 Как и работу двух последовательных переключателей, работу вентиля И можно проиллюстрировать таблицей. И 0 1 0 0 0 1 0 1 У вентиля И может быть и больше двух входов. Допустим, что мы соединили последовательно три реле. V V V V Лампочка загорится, только если будут замкнуты все три пере- ключателя. Эту конфигурацию можно обозначить символом 135 Вентили, которые не протекают Называется она трехвходовым вентилем И. Следующий логический вентиль состоит из двух реле, со- единенных параллельно: V V V V Выходы двух реле соединены друг с другом, и с этого объеди- ненного выхода питание поступает в лампочку. К включению лампочки приведет срабатывание любого из двух реле. Напри- мер, если мы замкнем верхний переключатель, лампочка за- горится, так как получит питание от левого реле. V V V V 136 Глава одинадцатая Если мы разомкнем верхний переключатель и замкнем ниж- ний, лампочка опять загорится. V V V V Лампочка будет гореть, если будут замкнуты оба переключателя. V V V V В данном случае лампочка горит, когда замкнут верхний или нижний переключатель. Ключевое слово здесь «или», и потому представленная схема называется вентилем ИЛИ (OR). На схемах для вентиля ИЛИ используют такое обозначение: 137 Вентили, которые не протекают Выход Входы Этот символ похож на символ вентиля И за исключением того, что сторона входов закруглена. На выходе вентиля ИЛИ есть напряжение, если напряже- ние подается на любой из двух его входов. Обозначим опять отсутствие напряжения как 0, а его присутствие — 1. Вентиль ИЛИ может находиться в следующих состояниях: 0 0 0 1 1 0 1 0 1 1 1 1 Эти состояния можно свести в таблицу. ИЛИ 0 1 0 0 1 1 1 1 У вентиля ИЛИ может быть более двух входов. Выход его ра- вен 1, если сигнал хотя бы на одном из входов равен 1. Выход, равный 0, соответствует 0 на всех входах. Ранее я объяснял, что наши реле являются двухпозиционны- ми. Обычно, когда переключатель разомкнут, лампочка не горит. V V 138 Глава одинадцатая Когда переключатель замкнут, лампочка загорается. Но если мы подключим к выходу другой контакт двухпо- зиционного реле, лампочка будет гореть, если переключатель разомкнут. V V В этой схеме лампочка гаснет, когда мы замыкаем переключа- тель. Одиночное реле, подключенное таким способом, назы- вается инвертором (inverter). Инвертор не является логичес- ким вентилем (у вентиля всегда два или более входов), но это не уменьшает его полезности. На схемах он обозначается так: Выход Вход Как следует из названия, инвертор инвертирует 0 (нет напря- жения) в 1 (напряжение есть) и наоборот: 1 0 0 1 Теперь, когда в нашем распоряжении имеются инвертор, вентиль И и вентиль ИЛИ, можно начинать сборку прибора для автоматического выбора идеальной кошки. Начнем с пе- 139 Вентили, которые не протекают реключателей. Первый переключатель замкнут, если вы выб- рали кошку, и разомкнут, если выбран кот. Для генерации сиг- налов Ж и М годится такая схема. M V Ж Когда сигнал на выходе Ж равен 0, сигнал на выходе М равен 1, и наоборот. Подобным же образом можно организовать рабо- ту второго переключателя, который замкнут для стерилизо- ванной кошки и разомкнут для нестерилизованной. V С Н Работу следующих двух переключателей организовать сложнее. В разных комбинациях они должны воспроизводить четыре разных цвета. Итак, у нас два переключателя, каждый из которых подключен к источнику питания. V V Когда оба переключателя разомкнуты (как на рисунке), они символизируют выбор белого цвета. Вот как можно, исполь- зуя два инвертора и один вентиль И, сгенерировать сигнал Б, который равен 1 (напряжение есть), если вы выбрали белую кошку, и 0 (нет напряжения), если вы этого не сделали. V V Б 140 Глава одинадцатая Когда переключатели разомкнуты, входные сигналы обоих инверторов равны 0, а выходные — 1. А поскольку выходы обоих инверторов являются входами вентиля И, на его выхо- де мы также получаем сигнал 1. Если любой из двух переклю- чателей замкнут, выход вентиля И равен 0. Чтобы выбрать черную кошку, мы замыкаем первый пе- реключатель. Это можно реализовать с помощью инвертора и вентиля И. Ч V V Выход вентиля И равен 1, только если первый переключатель замкнут, а второй разомкнут. Подобным же образом мы выбираем рыжую кошку, замы- кая второй переключатель. Р V V Наконец, если оба переключателя разомкнуты, мы хотим кош- ку «другого» цвета. Д V V Теперь объединим эти четыре небольшие схемы в одну большую (как обычно, черные точки на схеме обозначают со- единение проводов; провода, на пересечениях которых нет чер- ных точек, не соединены). 141 Вентили, которые не протекают V Б Ч Р Д V Понимаю, эта путаница проводов кажется очень сложной. Но если вы приглядитесь повнимательнее, то убедитесь, что схема действительно работает именно так, как нужно. Просле- дите, откуда приходят сигналы на входы вентилей И, стараясь не отвлекаться на то, куда еще они идут. Если оба переключа- теля разомкнуты, выход Б равен 1, в любом другом случае он равен 0. Если первый переключатель замкнут, сигнал Ч равен 1, во всех остальных случаях он равен 0 и т. д. Соединение вентилей и инверторов подчиняется несколь- ким простым правилам. Выход одного вентиля (или инверто- ра) может быть входом одного или нескольких вентилей (или инверторов). Выходы двух или более вентилей (или инверто- ров) никогда не соединяются между собой. Эта схема, состоящая из четырех вентилей И и двух инвер- торов, называется дешифратором 2 линии на 4 (2-Line-to-4-Line Decoder). На вход этого дешифратора подаются 2 бита, кото- рые в различных комбинациях представляют 4 различные ве- личины. На выходе дешифратора имеем 4 сигнала, из которых в любой момент времени значение 1 имеет только один. Какой именно, зависит от входных величин. На тех же принципах стро- ятся дешифраторы 3 линии на 8, 4 линии на 16 и т. д. В простейшем виде булево выражение для выбора кошки выглядит так: (С � ((М � (Б + Р)) + (Ж � (1 – Б)))) + Ч Каждому знаку «+» в этом выражении на схеме должен соот- ветствовать вентиль ИЛИ, а каждому знаку «�» — вентиль И. 142 Глава одинадцатая С М Б Р Ж Б Ч Символы в левой части схемы идут в том же порядке, что и в выражении. Соответствующие сигналы приходят от переклю- чателей, соединенных проводами с инверторами и дешифра- тором «2 на 4». Обратите внимание на использование инвер- тора для реализации выражения (1 – Б). Теперь вы вправе воскликнуть: «Какая прорва реле!» — и бу- дете правы. По два реле приходится на каждый из вентилей И и ИЛИ и по одному — на каждый инвертор. Ничего более умного, чем «Привыкайте!» я ответить не могу. В следующих главах нам понадобится гораздо больше реле. Радуйтесь, что вам не прихо- дится по-настоящему покупать их и соединять проводами. В этой главе мы познакомимся еще с двумя логическими вентилями. В обоих применяется выход реле, на котором есть напряжение, когда реле не сработало (т. е. тот выход, что ис- пользуется в инверторе). Например, в следующей конфигура- ции выход одного реле подает питание на вход второго реле. Лампочка горит, когда оба входа отключены от питания. V V V 143 Вентили, которые не протекают Если верхний переключатель замкнут, лампочка гаснет. V V V Это происходит потому, что питание перестает поступать на второе реле. Свет также не горит, если замкнут нижний пере- ключатель. V V V Если оба переключателя замкнуты, лампочка тоже не горит. 144 Глава одинадцатая V V V Такое поведение в точности противоположно поведению вен- тиля ИЛИ. Такая схема называется вентилем ИЛИ-НЕ (NOT OR или NOR). Его обозначение: т. е. такое же, как у вентиля ИЛИ, но с небольшим кружком на выходе. Вентиль ИЛИ-НЕ эквивалентен схеме: Работа вентиля ИЛИ-НЕ иллюстрируется следующей таб- лицей. 145 Вентили, которые не протекают ИЛИ-НЕ 0 1 0 1 0 1 0 0 Эта таблица противоположна таблице для вентиля ИЛИ, вы- ходной сигнал которого равен 1, если на любом из двух вхо- дов есть сигнал 1, и равен 0, если на оба входа подается 0. Вот еще один способ соединения двух реле: V V V V Здесь оба выхода соединены друг с другом, как в вентиле ИЛИ, но с использованием других контактов. Лампочка включена, если оба переключателя разомкнуты. Свет не погаснет, если замкнуть верхний переключатель. 146 Глава одинадцатая V V V V Не погаснет он, если будет замкнут и только нижний переклю- чатель. V V V V Только когда оба переключателя замкнуты, лампочка гаснет. 147 Вентили, которые не протекают V V V V Такое поведение в точности противоположно работе вентиля И. Эта схема называется вентилем И-НЕ (NOT AND или NAND). Вентиль И-НЕ изображается, как вентиль И, но с круж- ком на выходе, означающим инверсию. Выход Входы Поведение вентиля И-НЕ описано в следующей таблице. И-НЕ 0 1 0 1 1 1 1 0 Заметьте: выход вентиля И-НЕ противоположен выходу вентиля И. У последнего выход равен 1, только если оба входа равны 1, в противном случае его выход имеет значение 0. 148 Глава одинадцатая На данный момент мы рассмотрели четыре различных спо- соба соединения реле с двумя входами и одним выходом. Каж- дая конфигурация ведет себя по-своему. Чтобы каждый раз не рисовать реле, мы назвали эти конфигурации логическими вентилями и решили использовать для них стандартные обо- значения. Зависимость выходного сигнала каждого из четы- рех вентилей от сигналов на входе иллюстрируется следую- щими таблицами. И 0 1 0 0 0 1 0 1 ИЛИ 0 1 0 0 1 1 1 1 ИЛИ-НЕ 0 1 0 1 0 1 0 0 И-НЕ 0 1 0 1 1 1 1 0 Теперь в нашем арсенале четыре логических вентиля и ин- вертор. Дополним его обычным старым добрым реле: V V 149 Вентили, которые не протекают Это устройство называется буфером (buffer) и обозначается символом: Это тот же символ, что и у инвертора, но без кружка на выхо- де. Ничего особенного буфер не делает. Сигнал на его выходе повторяет сигнал на входе. 0 0 1 1 Буфер можно использовать, если входной сигнал слаб. Как вы, конечно, помните, именно это много лет назад стало при- чиной применения реле в телеграфе. Буфер применяется и для небольшой задержки сигнала. Она происходит из-за того, что для срабатывания реле требуется немного времени — доли се- кунды. Начиная с этого момента, изображения реле в книге вам встречаться практически не будут. Вместо них вы увидите схе- мы с буферами, инверторами, четырьмя основными логичес- кими вентилями и более изощренными приборами (вроде де- шифратора «2 на 4»), построенными из логических вентилей. Конечно, все эти компоненты собраны из реле, но это еще не повод вырисовать их на схемах. Ранее, собирая дешифратор «2 на 4», мы встречались с не- большой схемой типа: Два входных сигнала инвертируются и подаются на входы вен- тиля И. Иногда такую конфигурацию изображают без инвер- торов. 150 Глава одинадцатая Обратите внимание на кружки на входе вентиля И. Они озна- чают, что сигнал в этой точке инвертируется — 0 (нет напря- жения) становится 1 (есть напряжение) и наоборот. Работа вентиля И с двумя инверторами на входах анало- гична работе вентиля ИЛИ-НЕ: = Выход равен 1, только если оба входа равны 0. Так же и вентиль ИЛИ с двумя инвертированными входа- ми эквивалентен вентилю И-НЕ: = Выход равен 0, только если оба входа равны 1. Две этих пары эквивалентных схем являются электричес- ким воплощением законов Моргана. Огастес Морган (Augustus De Morgan) на 9 лет старше Буля. Его книга «Формальная ло- гика» опубликована в 1847 г., в тот же самый день (как гласит предание), что и «Математический анализ логики» Буля. Боль- ше того, на занятия логикой Буля подвигла открытая вражда между Морганом и другим британским математиком, связан- ная с обвинениями в плагиате (история Моргана оправдала). Морган с самого начала понял важность исследований Буля. Он бескорыстно вдохновлял Буля и помогал ему, но сегодня, увы, практически забыт за исключением своих знаменитых законов. Проще всего записать законы Моргана так: A × B = A + B A + B = A × B Здесь А и В — булевы операнды. В первом выражении они инвертируются, а затем объединяются булевым оператором И. Оказывается, что это эквивалентно логическому сложению этих же операндов с последующим инвертированием суммы (что соответствует оператору ИЛИ-НЕ). Во втором выраже- нии операнды инвертируются, а затем объединяются булевым 151 Вентили, которые не протекают оператором ИЛИ. Это выражение эквивалентно булеву умно- жению операндов с последующим инвертированием произ- ведения (что соответствует оператору И-НЕ). Законы Моргана — важный инструмент для упрощения булевых выражений и соответствующих им электрических цепей. Исторически именно в этом соответствии и состоит смысл статьи Клода Шеннона. В этой книге мы не ставим пе- ред собой цель до умопомрачения упрощать электрические цепи. Всегда предпочтительнее получить работающее устрой- ство, а не устройство, работающее с максимальной простотой. Именно этим мы и займемся в следующей главе — создадим действующее устройство для суммирования чисел. Глава 12 Двоичный сумматор Сложение — основное арифметическое действие, и потому, если мы хотим построить компьютер (а в этом и заключается тайная цель моей книги), надо прежде всего разобраться, как создать устройство, которое складывало бы два числа. Когда вы сделаете это, то поймете, что сложение — это практически единственное действие, которое выполняют компьютеры. Раз- работав суммирующее устройство, мы окажемся на пути к со- зданию прибора, в котором сложение используется для вычи- тания, умножения, деления, расчета выплат по закладной, вы- числения траектории полета на Марс, игры в шахматы и обо- гащения провайдеров Интернета. Сумматор, который мы создадим в этой главе, будет гро- моздким, неуклюжим, медленным и шумным, по крайней мере в сравнении с современными калькуляторами и компьютера- ми. Самое интересное, что мы соберем его из простейших элек- тронных устройств, изученных нами в предыдущих главах: переключателей, лампочек, проводов, источника питания и реле, объединенных в различные логические вентили. В этом сумматоре не будет ни единой детали, не изобретенной мини- мум 120 лет назад. Что особенно приятно, мы не будем зах- ламлять всей этой электроникой вашу квартиру. Мы постро- им сумматор на бумаге и в воображении. Наш сумматор работает только с двоичными числами и лишен некоторых современных прелестей. В нем, например, 154 Глава двенадцатая нельзя применять для ввода складываемых чисел клавиатуру. Вместо нее вы будете использовать вереницу переключателей. Роль дисплея для отображения результата будет играть ряд лампочек. И все же эта машина будет находить сумму двух чисел, причем почти так же, как это происходит в современном ком- пьютере. Сложение двоичных чисел очень похоже на сложение де- сятичных. Чтобы сложить два десятичных числа, например, 245 и 673, вы разбиваете задачу на несколько простых шагов. На каждом шаге требуется сложить две десятичных цифры. В данном примере суммирование начинается с цифр 5 и 3. Сде- лать это гораздо проще, если вы на каком-то жизненном этапе выучили таблицу сложения. Важное различие между десятичными и двоичными чис- лами в том, что таблица сложения для двоичных чисел значи- тельно проще аналогичной таблицы для десятичных чисел. + 0 1 0 0 1 1 1 10 Если бы вы учились в дельфиньей школе, вам пришлось бы учить именно эту таблицу. Вы, наверное, читали бы ее вслух, хором. 0 плюс 0 равно 0. 0 плюс 1 равно 1. 1 плюс 0 равно 1. 1 плюс 1 равно 0 и 1 в уме. Можно переписать эту таблицу с дополнительным нуля- ми, чтобы каждый результат был двухбитовой величиной. + 0 1 0 00 01 1 01 10 Результат сложения пары двоичных чисел, представленный подобным образом, содержит 2 бита: разряд суммы (sum bit) и разряд переноса (carry bit). Теперь можно разделить таблицу 155 Двоичный сумматор сложения двоичных чисел на две, первая из которых предназ- начена для разряда суммы. + сумма 0 1 0 0 1 1 1 0 А вторая — для разряда переноса. + перенос 0 1 0 0 0 1 0 1 Двоичное сложение удобно рассматривать именно с такой точ- ки зрения, так как в нашем сумматоре суммы и переносы бу- дут вычисляться раздельно. Построение сумматора состоит в проектировании схемы, которая выполняла бы эти операции. Работа в двоичной системе здорово упрощает нашу задачу, так как все части схемы — переключатели, лампочки и провода — могут символизировать двоичные разряды. Как и в десятичном сложении, мы будем складывать циф- ры столбец за столбцом, начиная с крайнего правого: 01100101 +10110110 100011011 Заметьте, что при сложении цифр в третьем столбце спра- ва 1 переносится в следующую колонку. То же самое происхо- дит в шестом, седьмом и восьмом столбцах справа. Какого размера двоичные числа мы собираемся складывать? Конечно, воображаемый сумматор в принципе способен скла- дывать числа любой разрядности. Но давайте ограничимся разумной длиной и будем складывать числа не длиннее 8 би- тов, т. е. в диапазоне от 0000-0000 до 1111-1111, или в десятич- ном выражении от 0 до 255. Сумма двух 8-битовых чисел мо- жет достигать значения 1-1111-1110, или 510. Пульт управления нашим сумматором может выглядеть примерно так. 156 Глава двенадцатая 1 0 1 0 На пульте размещены два ряда переключателей по 8 в каж- дом. Это устройство ввода, которое мы будем использовать для ввода 8-разрядных чисел. В нем нижнее положение пере- ключателя (выключен) соответствует вводу 0, а верхнее (вклю- чен) — вводу 1. Устройство вывода в виде ряда из 9 лампочек находится в нижней части пульта. Эти лампочки будут пока- зывать ответ. Горящая лампочка соответствует 1, выключен- ная — 0. Нам нужны 9 лампочек, так как сумма двух 8-разряд- ных чисел может быть 9-разрядным числом. В остальном сумматор состоит из логических вентилей, соединенных разными способами. Переключатели будут вы- зывать срабатывание реле в логических вентилях, которые подадут питание на нужные лампочки. Например, чтобы сло- жить 0110-0101 и 1011-0110, мы включим переключатели, как показано на рисунке. 1 0 1 0 Горящие лампочки показывают ответ — 1-0001-1011 (пока примем его на веру — ведь мы еще ничего не собирали!). Я говорил в предыдущей главе, что намерен в этой книге активно использовать реле. Создаваемый нами 8-разрядный сумматор будет состоять из 144 реле, по 18 для каждой из 8 пар 157 Двоичный сумматор битов, которые мы будем складывать. Если бы я показал вам схему соединений всех этих реле, вы определенно посинели бы. Нет абсолютно никакой надежды, что кто-то сумеет разобрать- ся в хитросплетениях схемы, состоящей из 144 реле. Чтобы не сойти с ума до срока, мы предпримем модульный подход к ре- шению этой проблемы, а помогут нам логические вентили. Вполне вероятно, что вы уже увидели связь между логи- ческими вентилями и двоичным сложением. Для этого доста- точно взглянуть на таблицу переноса разряда при сложении двух однобитовых чисел. + перенос 0 1 0 0 0 1 0 1 Она ведь совершенно идентична таблице с результатами ра- боты вентиля И, описанного в предыдущей главе. И 0 1 0 0 0 1 0 1 Итак, вентиль И считает перенос разряда при сложении двух двоичных цифр. Ага! Мы подбираемся к сути. Очередной шаг состоит, ви- димо, в проверке, ведут ли себя какие-нибудь реле следующим образом: + сумма 0 1 0 0 1 1 1 0 Это вторая часть задачи сложения пары двоичных цифр. Раз- ряд суммы получается не столь прямолинейно, как разряд пе- реноса, но в дальнейшем мы решим и эту проблему. Для начала сообразим, что вентиль ИЛИ дает почти то, что нужно, не считая ячейки в правом нижнем углу таблицы. ИЛИ 0 1 0 0 1 1 1 1 158 Глава двенадцатая Результат действия вентиля И-НЕ тоже близок к нашим по- требностям, кроме верхней левой ячейки таблицы. И-НЕ 0 1 0 1 1 1 1 0 Подключим к одним и тем же входам вентиль ИЛИ и вен- тиль И-НЕ. Выход ИЛИ Выход И�НЕ Вход А Вход В В следующей таблице возможные сигналы на выходах со- единенных вентилей ИЛИ и И-НЕ сравниваются с тем, что нужно для сумматора. Вход А Вход В Выход ИЛИ Выход И-НЕ Что нужно 0 0 0 1 0 0 1 1 1 1 1 0 1 1 1 1 1 1 0 0 Обратите внимание: единица на выходе нам нужна, только если единице равны выход вентиля ИЛИ и выход вентиля И-НЕ. Это наводит на мысль, что два этих выхода могут быть входа- ми вентиля И. Выход Вход А Вход В То, что нужно. 159 Двоичный сумматор Отметим, что во всей схеме по-прежнему всего два входа и один выход. Два входа принадлежат как вентилю ИЛИ, так и вентилю И-НЕ. Два выхода от вентиля ИЛИ и от вентиля И- НЕ идут на вход вентиля И, который и выдает необходимый нам результат. Вход А Вход В Выход ИЛИ Выход И-НЕ Выход И 0 0 0 1 0 0 1 1 1 1 1 0 1 1 1 1 1 1 0 0 У созданной нами схемы есть собственное имя — исключаю- щее ИЛИ (Exclusive OR, Искл-ИЛИ). Исключающей схема на- звана потому, что ее выход равен 1, если единичный сигнал есть на входе А или на входе В, но не на обоих. Чтобы не рисо- вать каждый раз вентили ИЛИ, И-НЕ и И, мы будем исполь- зовать для схемы Искл-ИЛИ обозначение: Выход Входы Оно очень похоже на символ вентиля ИЛИ за исключением того, что на нем со стороны входа нарисована еще одна кри- вая линия. Поведение вентиля Искл-ИЛИ проиллюстрирова- но в таблице. Искл-ИЛИ 0 1 0 0 1 1 1 0 Вентиль Искл-ИЛИ — последний, подробно описанный в этой книге. На практике иногда применяют еще один вентиль — вентиль совпадения (coincidence gate) или эквивалентности (equivalence), выход которого равен 1, только если сигналы на обоих входах одинаковы. На выходе вентиль совпадения ве- дет себя противоположно вентилю Искл-ИЛИ, поэтому обо- значается почти так же, только с кружком со стороны выхода. Подведем итог. Сложение двух двоичных чисел приводит к появлению бита суммы и бита переноса. 160 Глава двенадцатая + сумма 0 1 0 0 1 1 1 0 + перенос 0 1 0 0 0 1 0 1 Разряд суммы двух двоичных чисел задается выходом венти- ля Искл-ИЛИ, а разряд переноса — выходом вентиля И. Искл-ИЛИ 0 1 0 0 1 1 1 0 И 0 1 0 0 0 1 0 1 Для сложения двух двоичных цифр А и В мы можем объеди- нить два этих вентиля. Разряд переноса Разряд суммы Вход А Вход В Чтобы не рисовать многократно вентили И и Искл-ИЛИ, за- меним эту схему обозначением Разряд суммы Вход А Вход В Разряд переноса Полусумматор A B С П 161 Двоичный сумматор Полусумматором (half-adder) эта схема названа неспроста. Ко- нечно, он складывает две двоичные цифры и выдает разряд суммы и разряд переноса. Но подавляющее большинство дво- ичных чисел записывается несколькими битами. Наш полу- сумматор не делает одной важной вещи: не прибавляет к сум- ме возможный разряд переноса от предыдущего суммирова- ния. Допустим, мы складываем два двоичных числа, как пока- зано ниже: 1111 +1111 11110 Полусумматор можно использовать только для сложения край- него правого столбца: 1 плюс 1 равно 0, и 1 идет в перенос. Для второго столбца справа из-за переноса нам на самом деле нуж- но сложить три двоичных цифры. То же относится и к осталь- ным столбцам. Каждое последующее сложение двух двоичных цифр может включать перенос из предыдущего столбца. Чтобы сложить три двоичных цифры, нам нужны два по- лусумматора и вентиль ИЛИ: Выход для суммы Вход для переноса Выход для переноса Вход А Вход В Полусум� матор A B C П Полусум� матор A B С П Чтобы разобраться в работе этой схемы, начнем со входов А и В в первом полусумматоре (том, что слева). Результатом его работы являются сумма и перенос. Эту сумму нужно приба- вить к переносу из предыдущего столбца, поэтому оба числа подаются на вход второго полусумматора. Сумма из второго полусумматора будет окончательной суммой. Два переноса из полусумматоров попадают на входы вентиля ИЛИ. В этом месте, конечно, можно использовать еще один полусумматор, который выполнит необходимые действия. Но, проанализи- ровав возможные варианты, вы убедитесь, что выходы для переноса из двух полусумматоров никогда не будут одновре- менно равны 1. Для их сложения вполне достаточно вентиля 162 Глава двенадцатая ИЛИ, который действует аналогично вентилю Искл-ИЛИ, если его входы не равны 1 одновременно. Теперь назовем эту схему полным сумматором (full adder) и введем для нее обозначение (расшифровка английских обо- значений будет дана чуть позже): Выход для суммы Вход А Вход B Выход для переноса Полный  сумматор Вход для переноса A B S CO CI В следующей таблице приводятся все возможные комби- нации входных и выходных сигналов полного сумматора. Вход А Вход В Вход Выход Выход для для переноса для суммы переноса 0 0 0 0 0 0 1 0 1 0 1 0 0 1 0 1 1 0 0 1 0 0 1 1 0 0 1 1 0 1 1 0 1 0 1 1 1 1 1 1 Я говорил чуть раньше, что для всего сумматора нам пона- добится 144 реле. Теперь я могу пояснить это число. В каждом вентиле И, ИЛИ и И-НЕ по 2 реле. Таким образом, вентиль Искл-ИЛИ построен из 6 реле. Полусумматор состоит из вен- тиля Искл-ИЛИ и вентиля И, т. е. из 8 реле. Каждый полный сумматор состоит из двух полусумматоров и одного вентиля ИЛИ, итого 18 реле. Для нашего сумматора нам нужны 8 пол- ных сумматоров. Всего получается 144 реле. Вспомним пульт управления с переключателями и лам- почками. 163 Двоичный сумматор 1 0 1 0 Можем приступать к соединению полных сумматоров с пере- ключателями и лампочками. Начнем с того, что соединим два крайних правых переклю- чателя, крайнюю правую лампочку и полный сумматор. V V Полный сумматор Выход для переноса A B S CO CI Выход  для суммы Вход для переноса При сложении двух двоичных чисел первый столбец цифр, которые вы складываете, не похож на другие тем, что в отли- чие от последующих столбцов в нем не может быть разряда переноса из предыдущего столбца. Поэтому вход для перено- са у первого полного сумматора соединяется с землей. Это зна- чит, что его значение всегда 0. Конечно, разряд переноса мо- жет появиться в результате сложения первой пары двоичных чисел. Со следующей парой переключателей и следующей лам- почкой полный сумматор соединяется так: 164 Глава двенадцатая V V Вход для переноса Полный сумматор Выход для переноса A B S CO CI Выход для переноса из первого полного сумматора становит- ся входом для переноса во второй полный сумматор. Схемы для сложения всех последующих столбцов аналогичны. Раз- ряд переноса из одного столбца подается на вход для переноса следующего столбца. И, наконец, восьмая и последняя пара переключателей со- единяется с последним полным сумматором так: V V Вход для переноса Полный сумматор A B S CO CI Последний выход для переноса соединяется с девятой лам- почкой. Готово! Теперь изобразим все восемь полных сумматоров (Full Adder, FA) сразу, подключив все выходы для переноса (Carry Out, CO) к последующим входам для переноса (Carry In, CI) и обозначив сумму буквой S (Sum). 165 Двоичный сумматор Выход для переноса 8�битовая сумма Вход для  переноса A B CI FA  CO S A B CI FA  CO S A B CI FA  CO S A B CI FA  CO S A B CI FA  CO S A B CI FA  CO S A B CI FA  CO S A B CI FA  CO S Наконец, введем единое обозначение для 8-битового сум- матора. Его входы обозначены буквами от А0 до А7 и от В0 до В7, а выходы — буквами от S0 до S7. Выход для переноса 8�битовый сумматор Вход  для  переноса Вход для числа А Вход для числа В A7...A0 B7...B0 S7...S0 Выход для суммы CO CI Отдельные биты многобитового числа часто обозначают бук- вами с нижними индексами. Биты A0, B0 и S0 называются млад- шими (least-significant), а A7, B7 и S7 — старшими (most- significant). Ниже в качестве примера показано соответствие буквенных обозначений разрядам двоичного числа 0110-1001. A7 A6 A5 A4 A3 A2 A1 A0 0 1 1 0 1 0 0 1 Индексы начинаются с 0 и увеличиваются с продвижением ко все более значимым цифрам, так как они соответствуют пока- зателю степени двойки. 27 26 25 24 23 22 21 20 0 1 1 0 1 0 0 1 Если вы умножите каждую степень двойки на расположенную под ней цифру, а затем сложите результаты, то получите деся- тичный эквивалент суммы — 64 + 32 + 8 + 1 = 105. 166 Глава двенадцатая 8-битовый сумматор можно изобразить и так: 8 8 8 CO CI Выход для переноса Вход для переноса 8�битовый сумматор Вход А  Вход В A7...A0 B7...B0 S7...S0 Восьмерки внутри стрелок означают, что каждая из них соот- ветствует группе из 8 отдельных сигналов. Восьмиразрядность числа подчеркивается также нумерацией символов A7… A0, B7… B0 и S7… S0. Создав один 8-битовый сумматор, вы легко построите и второй. Их можно расположить каскадом для сложения 16- битовых чисел. Выход для  переноса Вход для переноса 8�битовый сумматор Выход для переноса Вход  для переноса 8�битовый сумматор Вход А  (старшие  8 битов) 8 8 8 8 Вход В (старшие 8 битов) Вход А (младшие 8 битов) 8 8 Вход В (младшие 8 битов) CO CI CO CI 16�битовая сумма A7...A0 A15...A8 B7...B0 B15 ...B8 S7...S0 S15...S8 Выход для переноса сумматора справа соединяется с входом для переноса сумматора слева. Сумматор слева получает на входе 8 старших цифр двух складываемых чисел и выдает на выходе 8 старших разрядов результата. Теперь вы можете спросить: «Неужели в компьютерах сло- жение действительно осуществляется именно так?» 167 Двоичный сумматор В общем, да, но не совсем. Во-первых, сумматор может работать быстрее, чем тот, с которым мы разбирались. Взгляните, как действует цепь: вы- ход переноса от младшей пары цифр требуется для сложения со следующей парой цифр, выход переноса второй пары цифр требуется для третьей пары цифр и т. д. Скорость суммирую- щей схемы равна произведению числа битов на скорость дей- ствия одного полного сумматора. Такой перенос называется сквозным (ripple). В быстродействующих сумматорах с помо- щью дополнительной цепи реализован ускоренный (look-ahead) перенос. Во-вторых (и это более важно), в компьютерах больше не используют реле! Лишь первые цифровые компьютеры, создан- ные в начале 1930-х, были основаны на реле и чуть позже на ва- куумных лампах. Сегодняшние компьютеры собирают из тран- зисторов. В компьютере транзисторы выполняют те же функции, что и реле. Разница в том, что они гораздо быстрее, компактнее, тише, экономичнее и дешевле. Для создания 8-битового сумма- тора вам по-прежнему потребуется 144 транзистора (или боль- ше, если вы решите заменить сквозной перенос ускоренным), но схема будет иметь микроскопические размеры. Глава 13 А как же вычитание? Итак, реле действительно можно соединить проводами и скла- дывать с помощью полученной схемы двоичные числа, но воз- никает вопрос: «А как же вычитание?» Задавая его, не опасай- тесь прослыть занудой. На самом деле вы просто осмотритель- ны. Сложение и вычитание определенным образом дополня- ют друг друга, но механика двух этих операций различна. Сло- жение выполняется последовательно от крайнего правого стол- бца цифр к крайнему левому. Перенос из каждого столбца прибавляется к следующему столбцу. При вычитании мы не переносим, а заимствуем, и это приводит к внутренне отлич- ной последовательности действий, усложненной своего рода движением вперед и назад. Рассмотрим типичную задачу на вычитание, усложненную заимствованием: 253 –176 ??? Начнем с крайнего правого столбца. Очевидно, что 6 боль- ше 3, поэтому приходится занять 1 у 5 и вычесть 6 из 13. Полу- чается 7. Поскольку мы заняли у пятерки единицу, она пре- вратилась в 4. Эта цифра меньше 7, и мы занимаем 1 у 2 и вычитаем 7 из 14. Получаем 7. Вспоминаем, что заняли 1 у 2, так что вместо 2 имеем 1 и вычитаем 1 из 1. Получаем 0. Окон- чательный ответ 77. 170 Глава тринадцатая 253 –176 77 Как нам заставить набор вентилей разобраться в столь за- путанной логике? На самом деле, не стоит даже пробовать. Вместо этого мы прибегнем к небольшой хитрости, которая позволит выпол- нять вычитание без заимствования. Это порадовало бы Поло- ния («Не занимай и не ссужай», — напутствовал он Лаэрта) да и всех остальных. Кроме того, подробное исследование этого способа вычитания полезно и с теоретической точки зрения, так как он напрямую связан с методикой хранения двоичных отрицательных чисел в компьютерах. Для начала вспомним, что числа, участвующие в вычита- нии, называются уменьшаемым и вычитаемым. Вычитаемое вычитается из уменьшаемого, а результат называется разностью. Уменьшаемое –Вычитаемое Разность Чтобы обойтись в вычитании без заимствования, во-пер- вых, вычтем вычитаемое не из уменьшаемого, а из 999: 999 –176 823 Здесь мы используем 999, поскольку вычитаемое является трех- значным числом. Если бы оно было четырехзначным, мы выч- ли бы его из 9999. Результат вычитания числа из строки девя- ток называется дополнением до девяти (nines’ complement). Дополнение до девяти числа 176 есть 823. Верно и обратное: дополнение до девяти числа 823 есть 176. И что приятно: ка- ким бы ни было вычитаемое, вычисление его дополнения до девяти никогда не требует заимствования. Вычислив дополнение числа до девяти, прибавьте к нему уменьшаемое: 253 +823 1076 171 А как же вычитание? Наконец, сложите результат с 1 и вычтите 1000: 1076 +1 –1000 77 Готово. Мы получили тот же результат, что и раньше, без еди- ного заимствования. Как это получилось? Исходная задача на вычитание выгля- дит так: 253 – 176 К этому выражению можно прибавить и вычесть любое число — результат от этого не изменится. Прибавим и вычтем 1000. 253 – 176 + 1000 – 1000 Это выражение эквивалентно выражению 253 – 176 + 999 + 1 – 1000 Эти числа можно перегруппировать: 253 + (999 – 176) + 1 – 1000. Это как раз и есть тот расчет, что я провел, используя допол- нение вычитаемого до девяти. Мы заменили одно вычитание двумя вычитаниями и двумя сложениями, попутно освободив- шись от всех заимствований. Что делать, если вычитаемое больше уменьшаемого? Ведь задача на вычитание может выглядеть и так: 176 –253 ??? Опытный математик, глядя на это, говорит: «Хммм. Я вижу, что вычитаемое больше уменьшаемого. Я меняю числа местами и произвожу вычитание, помня при этом, что результат будет отрицательным». Ответ записывается следующим образом: 176 –253 –77 172 Глава тринадцатая Чтобы выполнить такой расчет без заимствования, придет- ся поступить несколько иначе, чем в предыдущем примере. Начинаем опять с вычисления дополнения вычитаемого (253) до девяти: 999 –253 746 Теперь складываем дополнение до девяти с уменьшаемым: 176 +746 922 В предыдущей задаче на этом этапе нужно было прибавить 1 и вычесть 1000, чтобы получить окончательный ответ. В дан- ном случае эта стратегия не сработает. Пришлось бы вычесть 1000 из 923, а это в реальности оборачивается вычитанием 923 из 1000 и требует заимствований. На самом деле, вычисляя дополнение вычитаемого до де- вяти, мы фактически прибавили к нему 999, поэтому теперь будем вычитать 999: 922 –999 ??? Глядя на этот пример, мы понимаем, что ответ будет отрица- тельным. Поэтому числа нужно поменять местами и вычесть 922 из 999. Это действие снова не требует заимствования. От- вет, как мы и ожидали, равен –77: 922 –999 77 При вычитании двоичных чисел используется точно такой же метод. Более того, он проще, чем в десятичном случае. По- смотрим, как он работает. Вот как выглядит наша задача на вычитание: 253 –176 ??? 173 А как же вычитание? Записав эти числа в двоичном представлении, получаем зада- чу такого вида: 11111101 –10110000 ????????? Шаг 1. Вычтем вычитаемое из 11111111 (т. е. 255). 11111111 –10110000 01001111 Когда мы работали с десятичными числами, вычитаемое вы- читалось из строки девяток, а результат назывался дополне- нием до девяти. При расчетах с двоичными числами вычитае- мое вычитается из строки единиц, и результат называется до- полнением до единицы (ones’ complement). Но заметьте, чтобы получить дополнение до единицы, вычитать на самом деле не нужно. И вот почему: каждый 0 в исходном числе становится 1 в дополнении, а каждая 1 превращается в 0. Именно поэтому дополнение до единицы иногда также называют отрицанием (negation) или инверсией (inversion). Здесь уместно вспомнить, что в главе 11 мы встречались с инвертором, который как раз и меняет 0 на 1, а 1 на 0. Шаг 2. Складываем дополнение вычитаемого до 1 с умень- шаемым. 11111101 +01001111 101001100 Шаг 3. Прибавляем к результату 1. 101001100 +1 101001101 Шаг 4. Вычитаем 100000000 (т. е. 256). 101001101 –100000000 1001101 174 Глава тринадцатая Этот результат соответствует десятичному числу 77. Теперь повторим последовательность действий, выполнен- ных для тех же чисел, но с заменой вычитаемого на уменьша- емое. В десятичном виде эта задача записывалась так: 176 –253 ??? В двоичном она выглядит так: 10110000 –11111101 ????????? Шаг 1. Вычитаем вычитаемое из 11111111, чтобы получить его дополнение до единицы. 11111111 –11111101 00000010 Шаг 2. Прибавляем дополнение вычитаемого до единицы к уменьшаемому. 10110000 –00000010 10110010 Теперь из результата нужно вычесть 11111111. Когда вы- читаемое было меньше уменьшаемого, эта задача решалась добавлением 1 и вычитанием 100000000. Теперь сделать это без заимствования не удастся, поэтому мы вычитаем получен- ный результат из 11111111: 11111111 –10110010 01001101 Как и ранее, это действие эквивалентно инвертированию. В ответе получилось 77, но мы помним, что в действительнос- ти это –77. Теперь у нас есть все необходимые познания для модерни- зации сумматора из предыдущей главы, чтобы он выполнял не только сложение, но и вычитание. Чтобы не слишком ус- 175 А как же вычитание? ложнять задачу, наша новая суммирующая и вычитающая машина будет выполнять вычитание, только когда вычитае- мое меньше уменьшаемого, т. е. когда результат положителен. Основой суммирующей машины был 8-битовый сумма- тор, собранный из логических вентилей: Выход для переноса 8�битовый сумматор Вход  для  переноса Вход А Вход В Выход для суммы CO CI A7...A0 B7...B0 S7...S0 Как вы помните, входы с A7 по A0 и с B7 по B0 соединялись с переключателями, задававшими два 8-битовых слагаемых. Вход для переноса соединялся с землей. Выходы с S7 по S0 соединя- лись с 8 лампочками, отображавшими результат сложения. По- скольку результатом сложения могла быть 9-битовая величина, выход для переноса соединялся с девятой лампочкой. Пульт управления сумматором выглядел примерно так: 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 На этом рисунке переключатели установлены в положения, соответствующие сложению 183 (10110111) и 22 (00010110). Результат сложения, о чем свидетельствуют лампочки, равен 205 (11001101). 176 Глава тринадцатая Вид пульта управления для сложения или вычитания двух 8-битовых чисел слегка иной. На нем появился дополнитель- ный переключатель, с помощью которого можно задать дей- ствие — вычитание или сложение. 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 Вычитание Сложение Переполнение/ Исчезновение Если этот переключатель разомкнут, производится сложение, если замкнут — вычитание. Кроме того, теперь для отображе- ния результата используются только правые 8 лампочек. Де- вятая лампочка подписана «Переполнение/Исчезновение». Она сигнализирует, что вычисленное число не может быть пред- ставлено только 8 лампочками. Это происходит, если сумма больше 255 (переполнение разрядов) или если разность оказа- лась отрицательной (исчезновение разрядов). Основным новшеством в сумматоре станет схема, которая вычисляет дополнение 8-разрядного числа до единицы. Как вы помните, это эквивалентно инвертированию битов, так что для вычисления дополнения 8-разрядного числа до единицы можно использовать просто 8 инверторов. Входы Выходы Но эта схема всегда инвертирует биты, поступающие на ее вхо- ды, а в машине для сложения и вычитания нам нужно устрой- 177 А как же вычитание? ство, которое инвертировало бы биты, только если произво- дится вычитание. Более подходящая схема выглядит так: Выходы Входы Инверсия Сигнал Инверсия подается на входы всех девяти вентилей Искл-ИЛИ. Напомню, что вентиль Искл-ИЛИ работает так: Искл-ИЛИ 0 1 0 0 1 1 1 0 Если сигнал Инверсия равен 0, восемь выходов вентилей Искл-ИЛИ повторяют сигнал на восьми их входах. Например, если на вход подается число 01100001, на выходе также будет 01100001. Если же сигнал Инверсия равен 1, восемь входных сигналов будут инвертироваться. Если на входе 01100001, на выходе имеем 10011110. Давайте поместим восемь вентилей Искл-ИЛИ в общий прямоугольник под названием дополнение до единицы (ones’ complement): Инверсия Дополнение до единицы Вх7 Вх6 Вх5 Вх4 Вх3 Вх2 Вх1 Вх0 Вых7 Вых6 Вых5 Вых4 Вых3 Вых2 Вых1 Вых0 Теперь вентиль «дополнение до единицы», 8-битовый сумматор и выходной вентиль Искл-ИЛИ можно собрать в единую схему: 178 Глава тринадцатая Выч Выч CO 8�битовый сумматор CI Вход А Вход В Выход для суммы Инверсия Дополнение до единицы Выч Переполнение/ Исчезновение A7...A0 B7...B0 S7...S0 Обратите внимание на сигнал Выч, идущий с переключа- теля «Сложение/Вычитание». Этот сигнал равен 0, если нужно выполнить сложение, и 1, если нужно выполнить вычитание. При вычитании входы В (второй ряд переключателей) перед сумматором инвертируются схемой «дополнение до единицы», а к результату сумматора прибавляется 1, для чего его вход CI установлен в 1. При сложении схема «дополнение до едини- цы» не делает ничего; сигнал на входе CI равен 0. Сигнал Выч и выход CO (выход для переноса) сумматора также поступают в вентиль Искл-ИЛИ, который управляет включением лампочки «Переполнение/Исчезновение». При равенстве 0 сигнала Выч (выполняется сложение) лампочка горит, если сигнал CO сумматора равен 1, т. е. результат сло- жения оказался больше 255. Пусть вас не смущает, что выход CO сумматора равен 1, если выполняется вычитание и вычитаемое (переключатели B) меньше уменьшаемого (переключатели А). Так проявляет- ся число 100000000, которое в этом случае должно вычитаться на заключительном шаге. Лампочка «Переполнение/Исчезно- вение» горит, только если выход CO сумматора равен 0. Это 179 А как же вычитание? означает, что вычитаемое больше уменьшаемого и результат отрицателен. Отображение отрицательных чисел в нашем ус- тройстве не предусмотрено. Теперь вы, верно, радуетесь, что спросили: «А как же вы- читание?» Я в этой главе уже неоднократно говорил об отрицатель- ных числах, но все еще не показал, на что они похожи в двоич- ном представлении. Можно, конечно, обозначать отрицатель- ные двоичные числа знаком «минус», как и в десятичной сис- теме, скажем, записать число –77 как –1001101. Но одна из це- лей введения двоичных чисел в том, чтобы представлять в виде нулей и единиц все что угодно, в том числе и знак «минус» пе- ред отрицательным числом. Признаком знака может служить и дополнительный бит, который, например, равнялся бы 1 у отрицательных чисел и 0 у положительных. Однако есть другой способ представления отрицательных чисел, который позволяет без особых хлопот складывать отрицательные и положительные числа. Недоста- ток его лишь в том, что вы должны заранее решить, сколько цифр понадобится для представления чисел, с которыми вам предстоит иметь дело. Давайте малость подумаем. Преимущество стандартного способа записи положительных и отрицательных чисел в том, что он не накладывает никаких ограничений на их величины. Как отрицательные, так и положительные числа расходятся от 0 до бесконечности. … –1000000 –999999 … –3 –2 –1 0 1 2 3 … 999999 1000000 … Но допустим, что бесконечный числовой ряд нам не ну- жен, так как мы заранее знаем, что все числа, с которыми мы столкнемся, заключены в определенных пределах. Рассмотрим в качестве примера чековый банковский счет, где нам иногда приходится на практике сталкиваться с отри- цательными числами. Предположим, что мы никогда не дер- жали на счете больше 500 долларов и что банк разрешает крат- ковременный перерасход также на 500 долларов. Это значит, что баланс нашего чекового счета всегда заключен между 499 долларами и –500 долларами. Допустим также, что мы никог- да не вносим на счет больше 500 долларов, никогда не выпи- 180 Глава тринадцатая сываем чеки больше, чем на 500 долларов, и, наконец, имеем дело только с долларами, не обращая внимания на центы. Этот набор условий означает, что в работе со счетом нам никогда не приходится иметь дело с числами, выходящими за пределы от –500 до 499. Всего в этом диапазоне 1000 целых чисел. Это значит, что для представления всех нужных чисел мы можем использовать три десятичные цифры и не прибе- гать к знаку «минус». Хитрость в том, что нам не нужны поло- жительные числа из диапазона от 500 до 999, так как по нашим условиям максимальное положительное число, в котором мы нуждаемся, — 499. Значит, с помощью трехзначных чисел из диапазона от 500 до 999 можно представлять отрицательные числа. Вот как это сделать: Вместо –500 используем 500 Вместо –499 используем 501 Вместо –498 используем 502 … Вместо –2 используем 998 Вместо –1 используем 999 Вместо 0 используем 000 Вместо 1 используем 001 Вместо 2 используем 002 … Вместо 497 используем 497 Вместо 498 используем 498 Вместо 499 используем 499 Иначе говоря, все трехзначные числа, начинающиеся с 5, 6, 7, 8 и 9, представляют отрицательные значения. Вместо записи чисел с минусами –500 –499 –498 … –4 –3 –2 –1 0 1 2 3 4 … 497 498 499 мы записываем их так: 500 501 502 … 996 997 998 999 000 001 002 003 004 … 497 498 499 Заметьте: числа идут по кругу. Наименьшее отрицательное число (500) выглядит как продолжение наибольшего положи- тельного (499). Число 999 (представляющее –1) на единицу меньше 0. Если прибавить к 999 единицу, мы получим 1000, 181 А как же вычитание? но поскольку мы имеем дело только с тремя цифрами, в дей- ствительности получаем 000. Такой способ обозначения отрицательных чисел называ- ется дополнением до десяти (ten’s complement). Чтобы преоб- разовать трехзначное отрицательное число в дополнение до 10, вычитаем его из 999 и добавляем 1. Иными словами, до- полнение до десяти — это дополнение до девяти плюс 1. На- пример, чтобы переделать –255 в дополнение до десяти, выч- тем его из 999, получив 744, и прибавим 1, что дает 745. Вам, вероятно, приходилось слышать, что «вычитание — это просто сложение с отрицательным числом». На это вы ско- рее всего отвечали: «Да, но при этом оно остается вычитани- ем». Дополнение до десяти позволяет избавиться от вычита- ния, полностью заменив его сложением. Пусть на вашем счете 143 доллара. Вы выписали чек на 78 долларов. Это означает, что к 143 нужно прибавить –78. До- полнение –78 до десяти равно 999 – 078 + 1, или 922. Таким образом, ваш баланс составляет 143 + 922, что равно 65 долла- рам (без учета переполнения). Если вы после этого выпишете чек на 150 долларов, то должны будете прибавить к балансу число –150, дополнение которого до десяти равно 850. Сумма предыдущего баланса 065 и 850 равна 915. В обычном пред- ставлении число 915 эквивалентно –85 долларам — вашему новому балансу. Аналогичная система в двоичном счислении называется дополнением до двух (two’s complement). Предположим, что мы работаем только с 8-битовыми числами, заключенными в пре- делах от 00000000 до 11111111, или от 0 до 255 в десятичной системе. Чтобы отображать с их помощью также и отрицатель- ные числа, придется отдать в отрицательную область все 8- битовые числа, начинающиеся с 1, как показано в таблице. Двоичное Десятичное 10000000 –128 10000001 –127 10000010 –126 10000011 –125 … 11111101 –3 182 Глава тринадцатая Двоичное Десятичное 11111110 –2 11111111 –1 00000000 0 00000001 1 00000010 2 … 01111100 124 01111101 125 01111110 126 01111111 127 Диапазон чисел, которые вы теперь можете представить, огра- ничен пределами от –128 до +127. Старший значащий бит (крайний слева) называется знаковым разрядом (sign bit). Зна- ковый разряд равен 1 для отрицательных чисел и 0 для поло- жительных. Чтобы вычислить дополнение до двух, нужно посчитать дополнение до единицы и прибавить 1 или, что эквивалентно, инвертировать все цифры и прибавить 1. Например, десятич- ное число 125 в двоичной системе выглядит как 01111101. Что- бы представить –125 в виде дополнения до двух, инвертируем цифры в числе 01111101, получая в результате 10000010, а за- тем прибавляем единицу, что дает 10000011. Проверьте резуль- тат по таблице. Чтобы проделать обратную операцию, нужно сделать то же самое — инвертировать все биты и прибавить 1. Эта система позволяет выражать положительные и отри- цательные числа без знака «минус», а также складывать поло- жительные и отрицательные числа, используя только правила сложения. Давайте в качестве примера сложим двоичные эк- виваленты –127 и 124. Используя предыдущую таблицу как шпаргалку, запишем 10000001 +01111100 11111101 Этот результат эквивалентен десятичному числу –3. (продолжение) 183 А как же вычитание? При этом необходимо следить за переполнением или ис- чезновением разрядов. Такое случится, если результат сложе- ния окажется больше 127 или меньше –128. Допустим, мы хо- тим сложить число 125 с ним самим. 01111101 +01111101 11111010 Старший бит равен 1, т. е. результат интерпретируется как от- рицательное число и становится равным –6. То же самое про- исходит, если с самим собой вы сложите число –125. 10000011 +10000011 100000110 Мы условились в начале, что ограничимся 8-битовыми числа- ми, поэтому крайнюю левую цифру результата приходится игнорировать. Правые же 8 битов эквивалентны +6. Вообще результат сложения положительных и отрицатель- ных чисел неверен, если знаковые разряды двух операндов совпадают, а знаковый разряд результата от них отличается. Итак, есть два способа использования двоичных чисел. Двоичное число может быть со знаком (signed) или без знака (unsigned). 8-битовые числа без знака попадают в диапазон от 0 до 255. 8-битовые числа со знаком попадают в диапазон от –128 до 127. Только по виду числа вы не сможете определить, является оно числом со знаком или без знака. Например, кто- то скажет вам: «У меня есть 8-битовое двоичное число, равное 10110110. Каков его десятичный эквивалент?» Вам придется осведомиться: «Со знаком или без знака? Это может быть либо –74, либо 182». Вот такие они, биты — всего лишь нули и единицы, кото- рые ничего не говорят вам о себе. Глава 14 Обратная связь и триггеры Все знают, что электричество приводит предметы в движение. Даже при поверхностном осмотре типичного жилища вы обна- ружите электродвигатели в таких разных устройствах, как часы, вентиляторы, кухонные комбайны и проигрыватели компакт- дисков. Электричество заставляет вибрировать конус громко- говорителя, и вы слышите звуки, речь и музыку, воспроизво- димые магнитофоном или телевизором. Но, вероятно, самый простой и элегантный способ превратить электричество в дви- жение используется в электрических зуммерах и звонках, кото- рые уже практически превратились в антиквариат. Взгляните на реле, соединенное с переключателем и элект- рической батарейкой. 186 Глава четырнадцатая Странноватый способ соединения, правда? Реле, подключен- ное таким образом, нам еще не встречалось. Обычно вход реле отделен от выхода, здесь же они образуют кольцо. Когда вы замыкаете переключатель, цепь становится непрерывной, и по ней течет ток. Ток заставляет электромагнит притянуть гибкую металличес- кую полоску. Но как только она смещается, цепь размыкается, электромаг- нит теряет свои магнитные свойства, полоска возвращается в первоначальное положение 187 Обратная связь и триггеры и, конечно, снова замыкает цепь. В целом работу этой схемы можно описать так: пока переключатель замкнут, металличес- кая полоска будет метаться между двумя контактами, то за- мыкая, то размыкая цепь, причем ее движения, вероятно, бу- дут сопровождаться шумом. Такое шумящее реле называется зуммером (buzzer). Прикрепите к полоске металла молоточек, поставьте рядом металлическую чашку — вот вам и электри- ческий звонок. Есть и другой способ собрать зуммер с помощью реле. На схеме он показан с использованием общепринятых обозначе- ний для источника питания и земли. V Вы, вероятно, узнали в этой схеме инвертор из главы 11. А зна- чит, ее можно перерисовать так: Выход Как вы помните, выход инвертора равен 1, если вход равен 0, и наоборот. Замыкание переключателя в этой цепи вызовет по- переменное включение и выключение реле. Чтобы схема ра- ботала вечно, можно обойтись и без переключателя: Выход В этом рисунке, кажется, есть логическое противоречие: выход инвертора, как мы знаем, электрически противополо- жен его входу, но здесь вход и выход — одно и то же! Но не забывайте, что инвертор — это только реле, и ему требуется 188 Глава четырнадцатая время, чтобы перейти из одного состояния в другое. Поэтому, даже если в данный момент вход равен выходу, через мгнове- ние реле сработает, и выход станет противоположен входу (при этом, конечно, изменится и входной сигнал, в свою очередь изменив выход и т. д.). И чему же равен выход такой цепи? А его значение будет периодически меняться: есть напряжение, нет напряжения. Или, иначе говоря, выход попеременно равен то 0, то 1. Такая цепь называется вибратором (oscillator). Это устрой- ство существенно отличается от всего, с чем мы имели дело до сих пор. Все предыдущие цепи изменяли состояние после вме- шательства человека, который замыкал или размыкал пере- ключатель. Вибратор же, по существу, работает сам по себе. Конечно, в вибраторе, который работает сам по себе, мало проку. Однако и в этой главе, и в некоторых следующих мы убедимся, что это устройство, включенное в электрическую схему, — важная часть автоматизации. Так, в любом компью- тере имеется вибратор определенного типа, обеспечивающий синхронную работу всех компонентов компьютера. Выход вибратора осциллирует между 0 и 1. Обычно такое изменение сигнала изображают так: Это можно считать графиком, у которого по горизонтальной оси отложено время, а по вертикальной — выходное напряже- ние (0 или 1). 0 1 Время Смысл этого графика в том, что с течением времени сигнал на выходе вибратора периодически переключается с 0 на 1 и об- ратно. Поэтому вибратор иногда сравнивают с часами: под- считав число колебаний, вы (после некоторых вычислений) сможете сказать, сколько прошло времени. Как быстро переключается вибратор? Точнее, сколько вре- мени уходит на одно колебание металлического контакта? 189 Обратная связь и триггеры Сколько раз в секунду это происходит? Это, очевидно, зави- сит от устройства реле. Легко представить себе большое непо- воротливое реле, которое с глухим стуком медленно замыкает и размыкает контакт, и небольшую легкую релюшку, которая тоненько жужжит. Циклом колебаний называется интервал, в течение кото- рого выход вибратора изменяется, а затем возвращается в ис- ходное состояние. Один цикл Время 0 1 Время, которое занимает один цикл, называется периодом ко- лебаний. Предположим, что период нашего вибратора равен 0,05 сек, и проградуируем горизонтальную ось в секундах, на- чиная с некоторого момента времени, который будем считать нулевым. Время Один цикл 0 1 0  0,025 0,05 0,075 0,10 0,125 0,15 Частота колебаний есть величина, обратная периоду. На- пример, если период колебаний равен 0,05 сек, частота колеба- ний 1/0,05 = 20 колебаний в секунду, т. е. выход вибратора ме- няет свое состояние и возвращается обратно 20 раз в секунду. Число колебаний в секунду — единица столь же понятная, как число километров в час, килограммов на квадратный сан- тиметр, килокалорий на 100 г продукта. Но в отличие от при- веденных примеров у нее есть собственное название. В при- знание заслуг Генриха Рудольфа Герца (1857–1894), который первым отправил и принял радиоволны, частоту измеряют не в колебаниях в секунду, а в герцах (Гц). В 20-х годах XX века эту единицу измерения начали использовать в Германии, и за не- сколько лет она распространилась на другие страны. 190 Глава четырнадцатая Таким образом, мы можем сказать, что наш вибратор име- ет частоту 20 герц, или сокращенно 20 Гц. Конечно, эту частоту мы просто придумали. Однако к кон- цу этой главы мы создадим устройство, с помощью которого частоту колебаний можно будет измерять. Чтобы привести это начинание в жизнь, рассмотрим пару вентилей ИЛИ-НЕ, соединенных особым образом. Мы по- мним, что напряжение на выходе вентиля ИЛИ-НЕ имеется, только если напряжения нет ни на одном из входов. ИЛИ-НЕ 0 1 0 1 0 1 0 0 Вот как выглядит нужная нам цепь с двумя вентилями ИЛИ- НЕ, двумя переключателями и лампочкой. V V Провода идут весьма странно: выход левого вентиля ИЛИ- НЕ подключен ко входу правого вентиля ИЛИ-НЕ, а выход правого вентиля ИЛИ-НЕ является входом левого вентиля ИЛИ-НЕ. Такое соединение называется обратной связью (feedback). Как и в вибраторе, выход цепи является ее же вхо- дом. Это особенность подавляющего большинства схем, рас- сматриваемых в этой главе. Поначалу ток протекает только по цепи от выхода левого вентиля ИЛИ-НЕ. Это происходит из-за того, что оба входа этого вентиля равны 0. Замкнем верхний переключатель. Вы- ход левого вентиля ИЛИ-НЕ становится 0, что означает появ- ление 1 на выходе правого вентиля ИЛИ-НЕ — лампочка за- горается: 191 Обратная связь и триггеры V V Чудеса начнутся, когда вы снова разомкнете верхний пере- ключатель. Выход вентиля ИЛИ-НЕ равен 0 независимо от того, на каком входе он получает 1, поэтому выход левого вен- тиля ИЛИ-НЕ остается неизменным, и свет продолжает гореть. V V Не странно ли? Оба переключателя разомкнуты, как и на пер- вом рисунке, но теперь свет горит. Ни с чем подобным мы еще не сталкивались. Обычно выход цепи зависел исключительно от ее входа, но в данном случае это не так. Более того, теперь вы вольны сколько угодно замыкать и размыкать верхний пе- реключатель — свет все равно будет гореть. Этот переключа- тель больше на цепь не влияет, поскольку выход левого вен- тиля ИЛИ-НЕ независимо от него остается 0. Замкнем теперь нижний переключатель. На один из вхо- дов правого вентиля ИЛИ-НЕ теперь подается 1, его выход становится 0, и лампочка гаснет. Выход левого вентиля ИЛИ- НЕ становится равным 1. 192 Глава четырнадцатая V V Теперь нижний переключатель можно разомкнуть — лампочка останется выключенной. V V Мы вернулись к тому, с чего начали. На этот раз без каких бы то ни было последствий можно замыкать и размыкать ниж- ний переключатель. Подведем итог наших экспериментов. • Замыкание верхнего переключателя приводит к включению лампочки. Она продолжает гореть, даже если верхний пе- реключатель после этого разомкнуть. • Замыкание нижнего переключателя приводит к выключе- нию лампочки. Она не загорается, даже если нижний пере- ключатель после этого разомкнуть. Странность этой схемы в том, что когда оба переключате- ля разомкнуты, в одном случае лампочка горит, а в другом — нет. Можно сказать, что при разомкнутых переключателях у этой схемы есть два устойчивых состояния. Такая схема на- зывается триггером (flip-flop). История триггера началась в 1918 г. с работ английского физика Вильяма Генри Эклса (William Henry Eccles) (1875–1966) и Ф. В. Джордана (F. W. Jordan), о котором, кажется, больше ничего не известно. Триггер сохраняет информацию. Он «запоминает». В част- ности, в последней схеме триггер помнит, какой переключа- тель был замкнут последним. Если в своих изысканиях вы на- толкнетесь на такой триггер и увидите, что лампочка горит, 193 Обратная связь и триггеры вы сделаете вывод, что последним был замкнут верхний пере- ключатель, а если не горит — нижний. Триггер — весьма полезное устройство. Он снабжает элек- трическую схему памятью, в которой хранится информация о том, что в этой схеме происходило раньше. Представьте себе, что пытаетесь считать, не обладая способностью к запомина- нию. Ничего бы у вас не получилось: ведь чтобы назвать оче- редное число, нужно помнить, какое число было названо пе- ред этим! Поэтому схема, предназначенная для подсчета чего- либо, обязательно содержит триггеры. Существует несколько разновидностей триггеров. Простей- ший триггер — я его только что показал — называется RS- триггером (Reset-Set, Сброс-Установка). Вентили ИЛИ-НЕ на схеме RS-триггера обычно изображаются симметрично: Q Q R S Выход, к которому мы подключали лампочку, традиционно обозначается Q. Его дополняет выход  _ Q, электрически проти- воположный Q. Если Q равен 0, то  _ Q равен 1 и наоборот. Вхо- ды S и R используются для установки (set) и сброса (reset). Ког- да на вход S подается сигнал 1 (это соответствует замыканию верхнего переключателя на предыдущей схеме), выход Q ра- вен 1, а  _ Q — 0. Когда на входе R — 1 (что соответствует замы- канию нижнего переключателя), Q становится 0, а  _ Q — 1. Ког- да на оба входа подается 0, значение на выходе Q зависит от предыдущего действия. Эти правила обобщены в таблице. Входы Выходы S R Q _ Q 1 0 1 0 0 1 0 1 0 0 Q _ Q 1 1 Запрещено 194 Глава четырнадцатая Эта таблица называется функциональной таблицей, или таб- лицей логики, или таблицей истинности, или таблицей состо- яний. В ней показана зависимость результата на выходах от комбинаций сигналов на входах. У RS-триггера всего два вхо- да, поэтому число возможных комбинаций на входах равно 4. Они соответствуют четырем строкам таблицы. Обратите внимание на вторую строку снизу: в ней значения входов S и R равны 0. Значения выходов в ней обозначены Q и _ Q, т. е. выходы Q и  _ Q остаются такими же, какими они были до того, как входы S и R обратились в 0. Последняя строка указы- вает, что ситуация, в которой входы S и R имеют значение 1, запрещена. Это не значит, что вас оштрафуют, если вы подади- те 1 на оба входа. Просто если в этой схеме на оба входа попада- ет 1, оба выхода будут иметь значения 0, а это противоречит нашему желанию, чтобы выход  _ Q был противоположен выходу Q. Проектируя схему с RS-триггером, избегайте ситуаций, при которых входы R и S одновременно равны 1. RS-триггер часто изображают как небольшой прямоуголь- ник с двумя входами и двумя выходами: Q R S Q RS-триггер, безусловно, интересен как первый пример схе- мы, которая как бы «запоминает», который из двух входов был в последний раз под напряжением. Однако полезнее схема, способная запоминать, был ли данный сигнал нулем или еди- ницей в определенный момент времени. Прежде чем начинать ее сборку, подумаем о том, как такая схема должна себя вести. У нее будет два входа. Назовем один из них Данные. Как обычно, сигнал на входе Данные может быть 0 или 1. Второй вход назовем «Запомнить этот бит». Обычно на этот вход подается 0, и сигнал Данные на состоя- ние схемы не влияет. Когда сигнал «Запомнить этот бит» ра- вен 1, сигнал Данные копируется на выходе схемы. После это- го сигнал «Запомнить этот бит» может вернуться в состояние 0. В этот момент схема запоминает последнее значение сигна- ла Данные; последующие изменения сигнала Данные на состо- яние схемы не влияют. 195 Обратная связь и триггеры Словом, нам нужна схема с такой таблицей логики. Входы Выходы Данные «Запомнить этот бит» Q 0 1 0 1 1 1 0 0 Q 1 0 Q В первых двух случаях, когда сигнал «Запомнить этот бит» равен 1, выход Q имеет то же значение, что и вход Данные. Когда сигнал «Запомнить этот бит» обращается в 0, выход Q сохраняет значение, которое было на нем до этого. Заметьте: при нулевом сигнале «Запомнить этот бит», значение выхода Q не зависит от изменений в сигнале Данные. Таблицу логики можно упростить так: Входы Выходы Данные «Запомнить этот бит» Q 0 1 0 1 1 1 Х 0 Q Символ «Х» означает «не важно», т. е. при нулевом сигнале на входе «Запомнить этот бит» значение входа Данные не имеет значения — выход Q останется неизменным. Чтобы реализовать сигнал «Запомнить этот бит» в нашем RS-триггере, придется добавить на входе два вентиля И, как показано на схеме: Q Сброс Установка Запомнить этот бит Q 196 Глава четырнадцатая Как вы помните, выход вентиля И равен 1, если сигнал на обоих входах равен 1. В этой схеме выход Q равен 0, а выход  _ Q — 1. Если сигнал «Запомнить этот бит» равен 0, значение сигна- ла Установка не влияет на выходные сигналы: Q Сброс Установка Запомнить этот бит Q Не влияет на них и сигнал Сброс: Q Сброс Установка Запомнить этот бит Q Чтобы схема работала подобно обычному RS-триггеру, сиг- нал на входе «Запомнить этот бит» должен равняться 1: Q Сброс Установка Запомнить этот бит Q В этом случае выход верхнего вентиля И совпадает с сигналом Сброс, а выход нижнего вентиля И — с сигналом Установка. 197 Обратная связь и триггеры Но мы пока не достигли поставленной цели. Нам нужно два выхода, а не три. Как сократить их число? Вспомним ис- ходную таблицу логики RS-триггера: одновременное равенство 1 сигналов Сброс и Установка не допускается, и подобных си- туаций следует избегать. Кроме того, не имеет смысла и их одновременное равенство 0: эта ситуация означает неизмен- ность выходного сигнала, что в новой схеме соответствует ус- тановке в 0 сигнала «Запомнить этот бит». Схему следует организовать так, чтобы при единичном сиг- нале Установка сигнал Сброс равнялся 0, а при сигнале Уста- новка равном 0 сигнал Сброс устанавливался бы в 1. Сигнал Данные может быть эквивалентен сигналу Установка, а инвер- тированный сигнал Данные — сигналу Сброс. Q Запомнить этот бит Q Данные В такой ситуации оба входа равны 0, и выход Q тоже равен 0 (т. е. выход  _ Q равен 1). Пока сигнал «Запомнить этот бит» ра- вен 0, сигнал Данные на состояние схемы не влияет. Q Запомнить этот бит Q Данные Когда сигнал «Запомнить этот бит» обращается в 1, сигнал на выходе схемы равен сигналу на входе Данные. 198 Глава четырнадцатая Q Запомнить этот бит Q Данные Выход Q теперь имеет то же значение, что и вход Данные, а выход  _ Q противоположен ему. Теперь входу «Запомнить этот бит» можно вернуть значение 0. Q Запомнить этот бит Q Данные Схема запомнила величину сигнала Данные, имевшую ме- сто в тот момент, когда сигнал «Запомнить этот бит» равнялся 1. Последующие изменения сигнала на нее не влияют. Q Запомнить этот бит Q Данные Эта схема называется D-триггером со срабатыванием по уровню (level-triggered D-type flip-flop). Буква D происходит от английского слова «data» (данные). Срабатывание по уровню означает, что триггер сохраняет значение сигнала на входе Дан- ные, когда сигнал «Запомнить этот бит» достигает определен- 199 Обратная связь и триггеры ного уровня, в нашем случае 1 (вскоре мы рассмотрим другой способ срабатывания триггера). Обычно в книгах по схемотехнике вместо «Запомнить этот бит» применяется обозначение Синхронизация (Clock) — оно говорит о том, что иногда этот сигнал используется в качестве метронома, который периодически колеблется между 0 и 1. Но пока сигнал на входе Clock просто говорит, что значение на входе Данные нужно сохранить. Q Clock Q Данные В таблицах логики и на схемах часто название входа Дан- ные (data) сокращается до D, а вход Clock записывают как Clk. Входы Выходы D Clk Q   _ Q 0 1 0 1 1 1 1 0 Х 0 Q _ Q Иногда разобранную схему называют также защелкой (latch) D-типа со срабатыванием по уровню. Термин «защел- ка» означает, что схема как бы «запирает» один бит информа- ции и хранит его для дальнейшего использования. При жела- нии такую схему можно считать памятью емкостью в 1 бит. В главе 16 я покажу, как из множества подобных триггеров мож- но собрать память гораздо большего объема. Необходимость сохранения многобитовых величин возни- кает довольно часто. Допустим, вы хотите использовать сумма- тор из главы 12 для сложения трех 8-битовых чисел. Первое чис- ло вы, как обычно, набираете с помощью первого ряда тумбле- ров, второе число — с помощью второго ряда, но при этом вам 200 Глава четырнадцатая придется записать результат их сложения на бумажке. Затем вы набираете его с помощью первого ряда тумблеров, а второй ряд используете для ввода третьего слагаемого. Можно ли избавить- ся от необходимости записывать промежуточный результат, как-то «запомнив» его внутри сумматора? Мы решим эту проблему с помощью 8 защелок, в каждой из которых используются 2 вентиля ИЛИ-НЕ, 2 вентиля И и 1 инвертор. Объединим их в одно устройство, соединив между собой все входы Clk: Clk Восьмибитовая защелка D7 D6 D5 D4 D3 D2 D1 D0 Q7 Q6 Q5 Q4 Q3 Q2 Q1 Q0 Эта защелка может одновременно хранить 8 битов. Восемь входов обозначены D0–D7, восемь выходов — Q0–Q7. С левой стороны расположен вход Clk. Обычно сигнал на нем равен 0. Когда же он обращается в 1, 8-битовое значение на входах D передается на выходы Q. Это 8-битовое число остается на вы- ходе и после того, как сигнал Clk снова становится нулевым и сохраняется там до следующего перехода сигнала Clk в 1. В обозначении 8-битовой защелки 8 входов D и 8 выходов Q можно сгруппировать: D7...D0 8 Clk 8�битовая защелка Q7...Q0 8 А вот и наш старый знакомый — восьмибитовый сумматор. 201 Обратная связь и триггеры 8 8 8 CO CI 8�битовый сумматор A7...A0 B7...B0 S7...S0 Обычно (забудем пока про вычитание) входы A и B соеди- няются с переключателями, вход для переноса CI — с землей, а выходы S и CO — с лампочками. В модифицированном варианте сумматора выходы S мож- но подключить не только к лампочкам, но и ко входам D 8-би- товой защелки. Для сохранения суммы ко входу Clk защелки можно подключить тумблер «Сохранить». 8 8 8 V V 8 CO CI 8�битовый сумматор S 8 Селектор 2�на�1 Sel 8�битовая защелка Переключатели A 8 Q Переключатели Лампочка Лампочки От защелки Сохранить Clk D B B A Селектор 2 линии на 1 (2-Line-to-1-Line Selector) позволяет с помощью переключателя выбирать, откуда следует подавать 202 Глава четырнадцатая информацию на вход B — со второго ряда переключателей или с выходов Q защелки. Чтобы выбрать выходы 8-битовой за- щелки, переключатель нужно замкнуть. В селекторе «2 на 1» используется 8 одинаковых схем: Выход A Выборка B Если вход Выборка (Sel) равен 1, выход вентиля ИЛИ со- впадает со входом B. Дело в том, что выход верхнего вентиля И равен входу B, а выход нижнего вентиля И — 0. Если вход Выборка равен 0, выход совпадает со входом A. Правила рабо- ты этой схемы обобщены в такой таблице логики. Входы Выходы Выборка A B Q 0 0 X 0 0 1 X 1 1 X 0 0 1 X 1 1 В селекторе, включенном в модифицированный сумматор, содержится 8 таких 1-битовых селекторов. Их входы Выборка соединены между собой. Новый сумматор не совсем корректно обрабатывает сигнал CO (выход для переноса). Даже если сложение двух чисел при- водит к появлению переноса (сигнал CO равен 1), при сложе- нии суммы с третьим числом этот сигнал игнорируется. Решить эту проблему можно, создав сумматор, защелку и селектор, раз- рядность которых равна 16 или хотя бы превышает разрядность максимального числа, с которым вам предстоит иметь дело. Но мы отложим решение этой проблемы до главы 17. Пока же займемся делом поинтереснее — избавимся от одного ряда переключателей. Но для начала немного модифи- цируем D-триггер, добавив к нему вентиль ИЛИ и входной сигнал Очистка (Clear или Clr), обычно равный 0. Но когда он обращается в 1, сигнал на выходе Q становится равным 0: 203 Обратная связь и триггеры Q Данные Clk Q Clr Обращение сигнала Q в 0 происходит независимо от сигналов на других входах: информация, записанная в триггере, как бы стирается. Зачем? Почему нельзя очистить триггер, подав 0 на вход Данные и 1 на вход Clk? Дело в том, что состояние входа Дан- ные не всегда поддается управлению. Допустим, у нас имеют- ся 8 защелок, соединенных с выходами 8-битового сумматора: 8 V 8 V Clr Clk 8�битовая защелка 8 Лампочки Сложить CI Восьмибитовый сумматор Переключатели 8 Очистка D Q S A B Заметьте: сигнал на вход Clk защелки теперь подается с помо- щью переключателя Сложить (вместо него и переключателя Очистка лучше использовать кнопки). 204 Глава четырнадцатая Не исключено, что этот сумматор покажется вам удобнее предыдущего, особенно если вам нужно сложить несколько чисел. В начале работы вы нажимаете кнопку Очистка. В ре- зультате этого действия все выходы защелки обращаются в 0, все лампочки выключаются, на второй набор входов 8-бито- вого сумматора подаются нули. Затем вы вводите первое чис- ло и нажимаете кнопку Сложить. Лампочки отображают вве- денное число. Вы вводите второе число и снова нажимаете кнопку Сложить. Число, набранное с помощью переключате- лей, складывается с предыдущим числом, и сумма отобража- ется с помощью лампочек. Работу можно продолжить, наби- рая новые числа и нажимая кнопку Сложить. Я уже говорил, что спроектированный нами D-триггер сра- батывает по уровню. Это значит, что для сохранения в защел- ке сигнала на входе Данные уровень сигнала на входе Clk дол- жен измениться с 0 до 1. Если в течение того времени, пока сигнал Clk равен 1, сигнал Данные изменится, все его измене- ния будут отражаться на величине выходов Q и  _ Q. Часто это именно то, что нужно. Но иногда предпочтитель- нее вход Clk со срабатыванием по фронту (edge-triggered), при котором выход может меняться, только когда сигнал Clk пере- ходит из 0 в 1. Как и в триггере со срабатыванием по уровню, при нулевом сигнале на входе Clk триггера со срабатыванием по фронту изменения на входе Данные не отражаются на вы- ходах. Отличие в том, что в этом триггере изменения на входе Данные не отражаются на выходах и при сигнале Clk, равном 1. Вход Данные влияет на выходы только в момент перехода сигнала Clk из 0 в 1. D-триггер со срабатыванием по фронту, собирается из двух блоков RS-триггера, соединенных так: Q Q Clk Данные 205 Обратная связь и триггеры Суть этой схемы в том, что вход Clk управляет как первым блоком, так и вторым, но в первом блоке сигнал Clk инверти- руется. Это значит, что первый блок работает как D-триггер за исключением того, что содержимое входа Данные сохраняет- ся, когда сигнал Clk равен 0. Выходы первого блока являются входами для второго блока, и их содержимое сохраняется при обращении сигнала Clk в 1. Общий результат таков: сигнал на входе Данные сохраняется только при переходе сигнала Clk из 0 в 1. Рассмотрим работу триггера подробнее. На схеме он пока- зан в состоянии покоя с нулями на входах Данные и Clk и ну- лем же на выходе Q. Q Q Данные Clk Подадим 1 на вход Данные. Q Q Данные Clk При этом изменяется состояние первого блока триггера, так как инвертированный сигнал Clk равен 1. Второй блок на из- менение входа Данные не реагирует, так как неинвертирован- ный сигнал Clk равен 0. Подаем 1 на вход Clk: 206 Глава четырнадцатая Q Q Данные Clk Срабатывает второй блок, и выход Q становится равным 1. Теперь сигнал на входе Данные может меняться (например, снова стать нулевым), но на выход Q это не повлияет. Q Q Clk Данные Выходы Q и  _ Q меняются только при изменении сигнала Clk с 0 на 1. В таблице логики D-триггера, срабатывающего по фронту, нам потребуется новый символ — стрелка, направленная вверх. Она означает изменение сигнала с 0 на 1. Входы Выходы D Clk Q _ Q 0 � 0 1 1 � 1 0 X 0 Q _ Q Стрелка указывает, что выход Q копирует вход Данные, когда сигнал Clk переходит с 0 на 1, т. е. совершает положительный переход (отрицательным называется переход с 1 на 0). На схе- мах этот триггер обозначается так: 207 Обратная связь и триггеры Q D Clk Q Треугольная скобка указывает, что триггер срабатывает по фронту. А теперь я покажу вам схему с D-триггером, срабатываю- щим по фронту, которую нельзя продублировать с помощью триггера, срабатывающего по уровню. Вспомните вибратор, о котором мы говорили в начале главы. Выход вибратора осцил- лирует между 0 и 1: Выход Соединим выход вибратора со входом Clk D-триггера, сра- батывающего по фронту, а выход  _ Q соединим с входом D: Q D Clk Q Здесь выход триггера является его же входом — обратная связь с обратной связью! (Практическое воплощение этой схемы не лишено трудностей. Основу конструкции вибратора состав- ляет реле, которое осциллирует с некоторой скоростью. Вы- ход вибратора соединяется с другими реле, из которых собран триггер. Может статься, что эти реле обладают другой конст- рукцией и неспособны срабатывать с той же скоростью, что и вибратор. Чтобы не столкнуться с этой проблемой, будем счи- тать, что реле в вибраторе работает гораздо медленнее осталь- ных реле в схеме.) Чтобы разобраться, что происходит в этой схеме, рассмот- рим таблицу ее логики. Для начала примем, что вход Clk и вы- ход Q равны 0, т. е. выход  _ Q, соединенный со входом D, равен 1. Входы Выходы D Clk Q _ Q 1 0 0 1 208 Глава четырнадцатая Когда вход Clk меняется с 0 на 1, на выходе Q копируется зна- чение со входа D. Входы Выходы D Clk Q _ Q 1 0 0 1 1 � 1 0 Значение на выходе  _ Q обратилось в 0, такой же сигнал пошел и на вход D. Сигнал Clk обратился в 1. Входы Выходы D Clk Q _ Q 1 0 0 1 1 � 1 0 0 1 1 0 Значение сигнала Clk, поступающего из вибратора, снова об- нулилось, но на выходе это не сказалось. Входы Выходы D Clk Q _ Q 1 0 0 1 1 � 1 0 0 1 1 0 0 0 1 0 Затем сигнал Clk снова обратился в 1. Выход D равен 0, и пото- му выход Q обращается в 0, а выход  _ Q — соответственно в 1. Входы Выходы D Clk Q _ Q 1 0 0 1 1 � 1 0 0 1 1 0 0 0 1 0 0 � 0 1 209 Обратная связь и триггеры Сигнал на входе D тоже обращается в 1. Входы Выходы D Clk Q _ Q 1 0 0 1 1 � 1 0 0 1 1 0 0 0 1 0 0 � 0 1 1 1 0 1 Изменения, которые мы проследили, можно подытожить так: каждый раз, когда вход Clk меняется с 0 на 1, выход Q ме- няется или с 0 на 1, или с 1 на 0. Ситуацию проясняет график: D/Q Clk Q Когда вход Clk переходит из 0 в 1, значение на входе D (совпа- дающее со значением на выходе  _ Q) передается на выход Q, од- новременно изменяя  _ Q, а значит, и D до следующего перехода входа Clk из 0 в 1. Если частота вибратора — 20 Гц (т. е. 20 колебаний в се- кунду), частота изменений выхода Q вдвое меньше, т. е. 10 Гц. По этой причине схема, в которой выход  _ Q соединен со вхо- дом Данные триггера, называется делителем частоты (frequency divider). Конечно, выход делителя частоты может быть входом Clk другого делителя для следующего деления частоты. Вот схема из трех делителей частоты: 210 Глава четырнадцатая Q Q QQ Clk D Clk Q D Clk Q D Clk Q Clk Q1 Q2 Q3 Посмотрим как изменяются четыре сигнала, которые я от- метил в верхней части схемы. Clk Q 1 Q 2 Q 3 Ничего не напоминает? Я вам помогу. Пометим сигналы нулями и единицами. Clk Q 1 Q 2 Q 3 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 Все еще не догадались? Тогда разверните эту диаграмму по часовой стрелке на 90° и прочитайте 4-битовые числа по гори- зонтали. Они соответствуют десятичным числам от 0 до 15. Двоичное число Десятичное число 0000 1 0001 2 211 Обратная связь и триггеры 0010 3 0011 4 0100 5 0101 6 0110 7 0111 8 1000 9 1001 10 1010 11 1011 12 1100 13 1101 14 1111 15 Таким образом, схема считает в двоичном формате от 0 до максимального числа, зависящего от количества триггеров в схеме. В главе 8 я уже говорил, что в последовательности уве- личивающихся двоичных чисел каждая колонка двоичных цифр меняется между 0 и 1 с частотой, вдвое меньшей, чем колонка справа от нее. Данный счетчик имитирует эту после- довательность. При каждом положительном переходе сигнала Clk происходит приращение (increment) выходов счетчика на 1. Соединим 9 триггеров и поместим их в общий корпус. Clk 8�битовый счетчик импульсов  Q7 Q6 Q5 Q4 Q3 Q2 Q1 Q0 Эта схема называется сквозным счетчиком (ripple counter), так как в ней выход каждого триггера становится входом Clk сле- дующего триггера. Изменения сигнала последовательно про- ходят через все триггеры, и триггеры в конце схемы могут сра- батывать с небольшой задержкой. Более надежный счетчик — синхронный (synchronous), в котором все выходы меняются одновременно. (продолжение) 212 Глава четырнадцатая Я обозначил выходы от Q0 до Q7. Они собраны так, что вы- ход первого триггера в цепочке (Q0) расположен справа. Под- ключив к этим выводам лампочки, вы сможете прочитать 8- битовое число. На временной диаграмме выходы такого счетчика можно отображать как раздельно, так и все вместе: Clk 00000000 00000001 00000010 00000011 00000100 Q При каждом положительном переходе сигнала Clk некото- рые выходы меняются, некоторые — нет, но все вместе они отображают увеличивающиеся двоичные числа. Я говорил в начале главы, что мы определим частоту коле- баний вибратора. Пришла пора это сделать. Если соединить вибратор с входом Clk 8-битового счетчика, счетчик покажет, сколько колебаний совершил вибратор. Когда результат дос- тигнет 11111111 (255 в десятичной системе), счетчик сбросит- ся в 00000000. Вероятно, легче всего определить частоту виб- ратора так. Соедините с выходами 8-битового счетчика лам- почки. Дождитесь, чтобы сигнал на всех выходах стал 0 (когда это произойдет, все лампочки погаснут), и запустите секундо- мер. Остановите его, когда все лампочки снова погаснут. Вы получите время, которое потребовалось для 256 колебаний вибратора. Допустим, это 10 секунд. Частота колебаний, та- ким образом, равна 256 � 10, или 25,6 Гц. По мере того, как у триггеров появляются новые возмож- ности, возрастает и их сложность. Взгляните на D-триггер с предустановкой и очисткой, срабатывающий по фронту (edge- triggered D-type flip-flop with preset and clear): 213 Обратная связь и триггеры Q Q Clr Pre D Clk Входы Pre и Clr обладают более высоким приоритетом, чем входы Clk и Данные. Обычно оба они равны 0. Когда вход Pre обращается в 1, выход Q также обращается в 1, а  _ Q — в 0. Ког- да вход Clr равен 1, выход Q равен 0, а  _ Q  — 1. Подобно входам Установка и Сброс RS-триггера, входы Pre и Clr не должны одновременно обращаться в 1. В остальном этот триггер ведет себя как обычный D-триггер со срабатыванием по фронту. Входы Выходы Pre Clr D Clk Q _ Q 1 0 Х Х 1 0 0 1 Х Х 0 1 0 0 0 � 0 1 0 0 1 � 1 0 0 0 Х 0 Q _ Q D-триггер, срабатывающий по фронту, с предустановкой и сбросом обозначается так: 214 Глава четырнадцатая Q D Clk Q Pre Clr Итак, мы научили реле складывать, вычитать и считать в двоичной системе. Это немалое достижение, особенно учиты- вая, что все устройства, которые мы использовали, изобрете- ны более ста лет назад. Но на этом наши открытия не заканчи- ваются. Пока же мы немного оторвемся от сборки электри- ческих схем и еще раз посмотрим на системы счисления. Глава 15 Байты и шестнадцатеричные числа Две усовершенствованных версии суммирующей машины из предыдущей главы наглядно иллюстрируют концепцию по- токов данных (data paths). В пределах схемы от одного компо- нента к другому перемещаются 8-битовые значения. Они по- даются на входы сумматоров, защелок и селекторов, они же выводятся из этих устройств. 8-битовые значения задаются переключателями и отображаются лампочками. Говорят, что поток данных в этой схеме имеет ширину 8 битов. Почему именно 8? Почему не 6, или 7, или 9, или 10? Можно было бы сказать: потому, что в основу этих усо- вершенствованных версий положена исходная суммирующая машина из главы 12, а она работает с 8-битовыми значениями. Но никаких особых причин делать ее 8-битовой у нас не было. Просто это число в тот момент показалось особенно удобным. Впрочем, признаюсь, что все это время я немного хитрил, так как прекрасно знал (как, вероятно, и вы), что именно 8 битов составляют один байт (byte). Слово «байт» родилось в фирме IBM году этак в 1956. Про- изошло оно от английского слова «bite» (кусок), но писалось 216 Глава пятнадцатая через «y», чтобы никто не путал его со словом «bit» (т. е. бит). В течение некоторого времени термином «байт» обозначалось просто число битов в потоке данных. Но в середине 60-х, в связи с созданием в IBM компьютеров System/360, это слово стало обозначать группу из 8 битов. Будучи 8-разрядным числом, байт может принимать зна- чения от 00000000 до 11111111. Этими кодами можно обозна- чить положительные числа от 0 до 255 или положительные и отрицательные числа от –127 до 128 (если они записаны с по- мощью дополнения до 2). 1 байт позволяет зашифровать 28, или 256, различных вариантов. Потом выяснилось, что 8-разрядность байта очень удобна по многим причинам. Для IBM она оказалась привлекатель- ной, так как облегчала хранение данных в формате BCD, к ко- торому я вернусь в главе 23. Но, как мы убедимся в следую- щих главах, по случайному совпадению именно 8-битовый байт удобен для хранения текста, поскольку практически лю- бой язык мира (кроме идеографического письма, используе- мого в Китае, Японии и Корее) можно представить в виде на- бора менее чем 256 символов. Байт также идеален для кодиро- вания оттенков серого на черно-белых фотографиях, посколь- ку человеческий глаз этих оттенков также различает прибли- зительно 256. А там, где не хватает 1 байта (как, скажем, в упо- мянутых идеографических языках), обычно любую проблему можно решить с помощью 2 байтов, которыми кодируются уже 216, или 65 536 вариантов. Половину байта, т. е. 4 бита, иногда называют тетрадой (nibble или nybble), но используют этот термин гораздо реже термина «байт». Поскольку в описании внутренней жизни компьютеров байты используются очень часто, их значения желательно за- писывать максимально кратко. 8-разрядное двоичное число 10110110, например, весьма наглядно, но коротким его не на- зовешь. Конечно, к байтам всегда можно обращаться по их деся- тичным значениям, но для этого их придется постоянно пере- водить из двоичной в десятичную систему счисления. Вычис- ление хоть и не особо сложное, но утомительное. В главе 8 я продемонстрировал способ решения этой задачи «в лоб». По- 217 Байты и шестнадцатеричные числа скольку каждая двоичная цифра соответствует степени двой- ки, мы можем просто выписать все цифры двоичного числа, указав под каждым из них двойку в соответствующей степе- ни. Затем перемножаем числа в столбцах и складываем резуль- таты. Вот как преобразуется число 10110110: x128 + x64 x32 x16 x8 x4 x2 x1 + + + + + + = 1 0 1 1 0 1 1 0 128 0 32 16 0 4 2 0 182 Для обратного преобразования потребуется более неуклю- жая процедура, состоящая в последовательном делении деся- тичного числа на убывающие степени двойки. При этом част- ное есть соответствующая двоичная цифра, а остаток делится на следующую по убыванию степень двойки. Вот как преоб- разовать число 182 обратно в двоичный формат: 128 64 32 16 8 4 2 1 1 0 1 1 0 1 1 0 182 54 54 22 6 6 2 0 В главе 8 этот метод описан очень подробно. Но даже из одно- го примера ясно, что для преобразования десятичных чисел в двоичные и обратно нужно запастись листом бумаги, каран- дашом и терпением. В главе 8 мы познакомились также с восьмеричной систе- мой счисления, в которой используются только цифры 0, 1, 2, 3, 4, 5, 6 и 7. Превращать восьмеричные числа в двоичные и обратно очень просто. Нужно лишь запомнить 3-битовые эк- виваленты всех восьмеричных цифр, указанных в следующей таблице. Двоичное Восьмеричное 000 0 001 1 010 2 011 3 218 Глава пятнадцатая Двоичное Восьмеричное 100 4 101 5 110 6 111 7 Возьмите нужное двоичное число (например, 10110110) и разбейте на группы по три бита, начиная справа. Каждая груп- па из трех битов соответствует восьмеричной цифре. 10110110 2 6 6 Таким образом, байт 10110110 выражается восьмеричным чис- лом 266. Что ж, число существенно сократилось, а значит восьмеричные числа действительно удобны для записи бай- тов. К сожалению, с восьмеричной системой связана неболь- шая проблема. В двоичном выражении значение байта варьируется от 00000000 до 11111111. В восьмеричной системе этому диапа- зону соответствуют числа от 000 до 377. Очевидно, что в пре- дыдущем примере, правой и средней восьмеричным цифрам соответствуют полные тройки битов, а на левую цифру оста- лось только два бита. Это значит, что восьмеричное представ- ление 16-битового числа: 1011001111000101 1 3 1 7 0 5 не совпадает с восьмеричным представлением двух составля- ющих его байтов: 10110011 2 6 3 11000101 3 0 5 Чтобы представление многобайтового значения согласовыва- лось с представлением входящих в него байтов, нужна систе- (продолжение) 219 Байты и шестнадцатеричные числа ма, в которой байт делился бы на группы с равным числом битов. Это значит, что мы должны делить байт либо на 4 груп- пы по 2 бита (четверичная система), либо на 2 группы по 4 бита (шестнадцатеричная система). С шестнадцатеричной системой мы до сих пор не сталки- вались, и хорошо. У нее и название-то — язык сломаешь! — шестнадцатеричная (hexadecimal). Но это еще полбеды, есть и другие проблемы. В десятичной системе мы считаем так: 0 1 2 3 4 5 6 7 8 9 10 11 12… В восьмеричной системе, как вы помните, нам удалось изба- виться от цифр 8 и 9: 0 1 2 3 4 5 6 7 10 11 12… В четверичной системе отпадает нужда в цифрах 4, 5, 6 и 7: 0 1 2 3 10 11 12… И, наконец, в двоичной можно обойтись только 0 и 1: 0 1 10 11 100… С шестнадцатеричной системой все не так просто — в ней требуется больше цифр, чем в десятичной. Счет в этой шест- надцатеричной системе выглядит примерно так: 0 1 2 3 4 5 6 7 8 9 ? ? ? ? ? ? 10 11 12… где 10 в действительности означает 16ДЕСЯТЬ. Знаки вопроса на- глядно демонстрируют, что для представления шестнадцате- ричных чисел нам необходимо еще 6 символов. Что это за сим- волы? Откуда их взять? Что ж, ни из какой многовековой тра- диции они не проистекают, поэтому мы вольны выбрать их по своему усмотрению, например: В отличие от символов, которыми обозначаются другие циф- ры, у этих есть большое преимущество — их легко запомнить и отождествить с тем количеством, что они выражают: ковбой- ская шляпа (емкость — 10 галлонов), футбольный мяч (в ко- манде 11 игроков), дюжина (т. е. 12) пончиков, черная кошка 220 Глава пятнадцатая (неразрывно связанная с числом 13), полная луна (красуется на небе через 14 дней после новолуния) и, наконец, кинжал, кото- рый напомнит нам об убийстве Юлия Цезаря в 15-й день марта. Для выражения байта нужны две шестнадцатеричных циф- ры. Иначе говоря, шестнадцатеричная цифра эквивалентна четырем битам, или тетраде. В таблице показано, как преобра- зовывать двоичные, шестнадцатеричные и десятичные числа. 1000 1010 1011 1100 1101 1110 8 8 10 11 12 13 14 15 0100 0110 0101 4 6 5 4 6 5 0000 0001 0010 0011 0 0 1 2 3 3 2 1 0111 7 7 Двоич� ное Шестнадца� теричное Деся� тичное Двоич� ное Шестнад� цатеричное Деся� тичное 1111 15 1001 9 9 Вот как выглядит в шестнадцатеричном формате число 10110110: 10110110 6 При работе с многобайтовыми числами все происходит точно так же. 11000101 5 10110110 6 Один байт всегда представляется одной и той же парой шест- надцатеричных цифр. 221 Байты и шестнадцатеричные числа К сожалению (а может, и к счастью), использовать футболь- ные мячи и пончики в качестве цифр мы не будем, помня, одна- ко, что они с этой ролью вполне справлялись. Вместо них в шестнадцатеричной системе приняты куда менее понятные обо- значения цифр, которые многих навсегда сбивают с толку. Шесть недостающих цифр в действительности представляются первы- ми шестью буквами латинского алфавита: 0 1 2 3 4 5 6 7 8 9 A B C D E F 10 11 12… В следующей таблице показано истинное соответствие между двоичными, шестнадцатеричными и десятичными числами. Двоичное Шестнадцатеричное Десятичное 0000 0 0 0001 1 1 0010 2 2 0011 3 3 0100 4 4 0101 5 5 0110 6 6 0111 7 7 1000 8 8 1001 9 9 1010 A 10 1011 B 11 1100 C 12 1101 D 13 1110 E 14 1111 F 15 Таким образом, байт 10110110 представляется парой шестнад- цатеричных чисел В6, а футбольный мяч вам рисовать не при- дется. В предыдущих главах я указывал вид системы счисле- ния в нижнем индексе, например: 10110110ДВА — для двоичной системы, 2312чЕТЫРЕ 222 Глава пятнадцатая — для четверичной, 266ВОСЕМЬ — для восьмеричной, 182ДЕСЯТЬ — для десятичной. Продолжая ту же традицию, записываем В6ШЕСТНАДЦАТЬ — для шестнадцатеричной системы. Получилось очень гро- моздко, но, к счастью, на практике используются другие, бо- лее экономные способы обозначения шестнадцатеричных чи- сел. Можно, например, идентифицировать шестнадцатерич- ное число так: B6HEX В дальнейшем я буду использовать еще более популярный способ обозначения шестнадцатеричных чисел, который со- стоит в добавлении к числу строчной латинской буквы h: B6h В шестнадцатеричной системе положение цифры соответ- ствует степени числа 16. Количество 1 Количество 16 Количество 256 Количество 4 096 Количество 65 536 Шестнадцатеричное число 9A48Ch представляется так: 9A48Ch = 9 � 10000h + A � 1000h + 4 � 100h + 8 � 10h + C � 1h Переписываем это выражение с помощью степеней числа 16: 223 Байты и шестнадцатеричные числа 9A48Ch = 9 � 164 + A � 163 + 4 � 162 + 8 � 161 + C � 160 или их десятичных значений: 9A48Ch = 9 � 65 536 + A � 4 096 + 4 � 256 + 8 � 16 + C � 1 Заметьте, что при записи одиночных цифр (9, A, 4, 8, C) нет нужды указывать в индексе систему счисления. 9 всегда 9 не- зависимо от того, десятичная или шестнадцатеричная система счисления использована. С другой стороны, А очевидно явля- ется шестнадцатеричной цифрой, эквивалентной числу 10 в десятичной системе. Чтобы завершить вычисление, все шестнадцатеричные цифры нужно заменить их десятичными значениями: 9A48Ch = 9 � 65 536 + 10 � 4 096 + 4 � 256 + 8 � 16 + 12 � 1 Ответ — 631 948. Так шестнадцатеричные числа преобразу- ются в десятичные. Нарисуем шаблон для преобразования произвольного 4- значного шестнадцатеричного числа в десятичный формат. ×4096 + ×256 ×16 ×1 + + = Подставим в него число 79ACh. Учитывая, что шестнадцате- ричные числа A и C равны десятичным 10 и 12, получаем: 224 Глава пятнадцатая ×4 096 + ×256 ×16 ×1 + + = 28 672 2304 160 12 31 148 7 9 A C При преобразовании десятичного числа в шестнадцатерич- ный формат, не обойтись без деления. Если число меньше либо равно 255, его можно представить одним байтом, т. е. двумя шестнадцатеричными цифрами. Чтобы вычислить их, разде- лите число на 16, чтобы получить частное и остаток. Рассмот- рим уже знакомый пример — десятичное число 182. Разделив его на 16, получаем 11 (шестнадцатеричная цифра В) и 6 в ос- татке. Итак, шестнадцатеричный эквивалент — В6h. Если преобразуемое число меньше 65 536, для его представ- ления понадобится не более четырех цифр. Вот как выглядит шаблон для преобразования такого числа в шестнадцатерич- ный формат: 256 16 1 4 096 Для начала поместите исходное десятичное число в левый верхний прямоугольник. Это ваше первое делимое. Разделите его на 4 096, первый делитель. Частное записываете в прямо- угольник под делимым, а остаток — в прямоугольник справа от делимого. Остаток становится следующим делимым, кото- рое нужно разделить на 256. Вот как преобразовать в шестнад- цатеричный формат число 31 148: 256 16 1 31 148 2476 172 12 7 9 10 12 4 096 Разумеется, вместо 10 и 12 нужно написать соответствующие шестнадцатеричные цифры и получить в результате 79ACh. 225 Байты и шестнадцатеричные числа Если вы решите выполнять все вычисления на калькуля- торе, то столкнетесь с проблемой: калькулятор не показывает остаток от деления. Разделив 31 148 на 4 096, вы получите 7,6044921875. Чтобы узнать остаток, вам придется умножить 4 096 на 7 (получив 28 672) и вычесть результат из 31 148 или умножить 4 096 на 0,6044921875, т. е. дробную часть результа- та деления (или просто применить функцию преобразования чисел между десятичным и шестнадцатеричным форматами, которая имеется во многих калькуляторах!). Еще один способ преобразования числа от 0 до 65 535 в шестнадцатеричный формат состоит в его делении на 256, что- бы сразу разбить число на два байта. Затем каждый байт нуж- но разделить на 16. Вот как выглядит шаблон для этой проце- дуры: 16 16 256 Начинайте с самого верха. При каждом делении записывайте частное в левый прямоугольник под делимым, а остаток — в правый прямоугольник под делимым. Вот как выглядит пре- образование числа 51 966: 16 16 256 12 10 15 14 51 966 202 254 Заменив десятичные числа 12, 10, 15 и 14 шестнадцатеричны- ми цифрами, получаем CAFE, что больше напоминает слово, чем число! 226 Глава пятнадцатая Ниже приводится таблица сложения для шестнадцатерич- ного формата. + 0 1 2 3 4 5 6 7 8 9 A B C D E F 0 0 1 2 3 4 5 6 7 8 9 A B C D E F 1 1 2 3 4 5 6 7 8 9 A B C D E F 10 2 2 3 4 5 6 7 8 9 A B C D E F 10 11 3 3 4 5 6 7 8 9 A B C D E F 10 11 12 4 4 5 6 7 8 9 A B C D E F 10 11 12 13 5 5 6 7 8 9 A B C D E F 10 11 12 13 14 6 6 7 8 9 A B C D E F 10 11 12 13 14 15 7 7 8 9 A B C D E F 10 11 12 13 14 15 16 8 8 9 A B C D E F 10 11 12 13 14 15 16 17 9 9 A B C D E F 10 11 12 13 14 15 16 17 18 A A B C D E F 10 11 12 13 14 15 16 17 18 19 B B C D E F 10 11 12 13 14 15 16 17 18 19 1A C C D E F 10 11 12 13 14 15 16 17 18 19 1A 1B D D E F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C E E F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D F F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E С помощью этой таблицы и обычных правил сложения в стол- бик, вы будете легко складывать шестнадцатеричные числа. 4A3378E2 + 877AB982 D1AE3264 Как вы помните из главы 13, для представления отрица- тельных чисел можно использовать дополнения до 2. В этом случае в двоичном формате все 8-разрядные отрицательные числа начинаются с 1. В шестнадцатеричном формате двузнач- ные числа со знаком являются отрицательными, если они на- чинаются с 8, 9, A, B, C, D или F, поскольку в двоичном пред- ставлении все эти цифры начинаются с 1. Например, число 99h 227 Байты и шестнадцатеричные числа в десятичном формате может означать 153 (если вы знаете, что имеете дело с однобайтовым беззнаковым числом) или –103 (если это число со знаком). Вообще-то байт 99h может соответствовать и десятичному числу 99! В этом что-то есть, а? Но как это согласуется со всем тем, что вы до сих пор узнали? На этот вопрос я отвечу в главе 23, а пока поговорим о памяти. Глава 16 Сборка памяти Каждое утро мы пробуждаемся ото сна, и память заполняет пробелы в нашем сознании. Человек вспоминает, кто он та- кой, что делал вчера и чем собирается заняться сегодня. Па- мять возвращается мгновенно или по каплям. Иногда даже несколько минут спустя в ней все еще остаются белые пятна («Странно, совершенно не помню, что ложился спать в нос- ках»), но в конце концов мы собираем из этой мозаики целос- тную картину и готовы вступить в новый день. Конечно, человеческая память не очень-то упорядочена. Попробуйте вспомнить что-нибудь из школьного курса гео- метрии. Скорее всего начнете вы с воспоминаний о пареньке, сидевшем прямо перед вами, или об учебной пожарной тре- воге, которая случилась как раз в тот момент, когда учитель собирался рассказать вам о треугольнике АВС. И работает наша память небезупречно. Ведь и письмо, ве- роятно, было изобретено именно для противодействия «про- валам памяти». Представьте: в три часа ночи вы просыпаетесь от того, что в голову пришел замечательный сюжет. Вы хвата- ете ручку и листок бумаги, которые держите у кровати как раз для таких оказий, и записываете все-все, чтобы до утра не за- быть. С первыми лучами солнца вы прочитываете свою блес- тящую задумку («Парень встречает дев. с маш., погоня, все взрыв.» Я угадал?) и начинаете работать над сценарием блок- бастера. 230 Глава шестнадцатая Мы пишем, чтобы позже прочитать. Мы переносим слова и числа на бумагу, чтобы позже при необходимости иметь воз- можность мгновенно обратиться к ним. Мы сохраняем инфор- мацию, чтобы позже использовать ее. Назначение запомина- ющих устройств как раз и состоит в том, чтобы хранить ин- формацию между двумя этими событиями. Сохранение ин- формации требует некоторого носителя. Бумага — замечатель- ный носитель для текста, а магнитная лента идеально подхо- дит для записи музыки и кино. Реле — в составе вентилей и триггеров — также хранят информацию. Мы уже убедились, что триггер способен хра- нить 1 бит. Это, конечно, немного, но для начала сойдет. Ведь научившись сохранять 1 бит, мы легко сохраним и 2, и 3. В главе 14 мы познакомились с D-триггером со срабатыва- нием по уровню, состоящим из инвертора, двух вентилей И и двух вентилей ИЛИ-НЕ: Q Данные Clk Q Если сигнал на входе Clk равен 1, выход Q совпадает со входом Данные. Когда сигнал Clk обращается в 0, выход Q сохраняет последнее значение на входе Данные. Дальнейшие изменения сигнала Данные не влияют на выходной сигнал, пока сигнал Clk снова не станет равным 1. Таблица логики триггера выгля- дит так: Входы Выходы D Clk Q   _ Q 0 1 0 1 1 1 1 0 Х 0 Q _ Q 231 Сборка памяти В главе 14 мы использовали этот триггер по-разному, но отныне у него останется только одна забота — хранить 1 бит информации. Поэтому я намерен дать его входам и выходам новые имена, более отвечающие их предназначению:  Ввод данных Запись  Вывод данных Это тот же триггер, только его выход Q назван Выводом данных (Data Out, DO), а вход Clk (который мы называли «За- помнить этот бит») получил имя Запись (Write, W). Сигнал на этом входе означает, что значение сигнала на входе Ввод дан- ных (Data In, DI) нужно записать, или сохранить. В обычном состоянии сигнал Запись равен 0, и сигнал Ввод данных на выходной сигнал не влияет. Если значение сигнала Ввод дан- ных нужно сохранить, мы подаем на вход Запись 1, а затем снова 0. Я уже говорил в главе 14, что триггеры такого типа называются защелками, так как данные в них как бы заперты. Чтобы не рисовать все компоненты, 1-битовую защелку мож- но изобразить так: DI W DO Из нескольких 1-битовых защелок легко собрать многоби- товую. Достаточно соединить их входы Запись: DI W DO DI W DO DI W DO DI W DO DI W DO DI W DO DI W DO DI W DO  Входы для данных  Выходы для данных Запись 232 Глава шестнадцатая У этой 8-битовой защелки 8 входов и 8 выходов. Кроме того, у нее имеется единственный вход Запись, в обычном состоянии равный 0. Чтобы сохранить 8 битов информации, на вход За- пись подается 1, а затем снова 0. Для 8-битовой защелки тоже можно ввести единое обозначение: W 8�битовая защелка DI7 DI6 DI5 DI4 DI3 DI2 DI1 DI0 DO7 DO6 DO5 DO4 DO3 DO2 DO1 DO0 Или такое, не слишком отличающееся от обозначения 1-бито- вой защелки: W DI DO 8 Ввод данных Вывод данных Запись 8�битовая защелка 8 Другой способ соединения восьми 1-битовых защелок не столь нагляден. Допустим, у нас всего один вход и один выход для данных. При этом нам нужно записать 8 однобитовых зна- чений, а затем и просмотреть их. Иными словами, мы хотим сохранить не одно 8-битовое число (как в 8-битовой защелке), а 8 независимых 1-битовых величин, причем используя только один вход и один выход. Представьте, что у нас в наличии только одна лампочка. Понятно, что нам понадобятся восемь 1-битовых защелок. Пока не будем беспокоиться о том, как именно в них попадут данные. Сосредоточимся на поиске способа проверять значе- ние сигнала Вывод данных для каждой защелки, используя единственную лампочку. Конечно, мы всегда можем перено- сить лампочку от защелки к защелке вручную, но хочется чего- то более автоматизированного. Хорошо бы, скажем, номер защелки для просмотра задавать переключателями. Сколько их нужно? Чтобы выбрать один из 8 вариантов нам понадобится три переключателя — ими можно предста- вить 8 чисел: 000, 001, 010, 011, 100, 101, 110 и 111. 233 Сборка памяти Итак: 1-битовых защелок — 8, переключателей — 3, лам- почка — 1 и еще некое устройство, которое должно распола- гаться между лампочкой и переключателями. V DI W DO DI W DO DI W DO DI W DO DI W DO DI W DO DI W DO DI W DO Некое устройство Это устройство представляет собой корпус с 8 входами сверху и 3 входами слева. Замыкая и размыкая три переключателя, вы задаете, какой из входов должен перенаправляться на вы- ход, подключенный к лампочке. Что это за устройство? Что-то похожее мы уже встречали, хотя и не с таким большим количеством входов. Подобную схе- му мы применяли в модернизированном сумматоре (глава 14). С ее помощью мы задавали, откуда должен поступать сигнал на вход сумматора: с набора переключателей или с защелки. Тогда мы называли этой устройство селектором 2 линии на 1. Сейчас нам нужен селектор 8 линий на 1: Селектор 8 линий на 1 Входы для данных Выход S0 S1 S2 Входы для выборки D7 D6 D5 D4 D3 D2 D1 D0 234 Глава шестнадцатая Наверху показаны 8 входов для данных, а слева — 3 входа для выборки (Select). Используя их, вы задаете вход, сигнал с кото- рого попадает на выход. Если сигналы Select равны 000, на вы- ход попадает сигнал со входа D0. Сигналы 111 задают вывод дан- ных со входа D7, а число 101 на входах для выборки означает вывод сигнала D5. Вот как выглядит таблица логики селектора. Входы Выходы S2 S1 S0 Q 0 0 0 D0 0 0 1 D1 0 1 0 D2 0 1 1 D3 1 0 0 D4 1 0 1 D5 1 1 0 D6 1 1 1 D7 Селектор «8 на 1» состоит из трех инверторов, восьми 4- входовых вентилей И и одного 8-входового вентиля ИЛИ: D7 D6 D5 D4 D3 D2 D1 D0 S0 S1 S2 Выход 235 Сборка памяти Я попытаюсь на одном примере убедить вас, что эта паутина проводов все-таки работает. Предположим, что сигналы S2 и S0 равны 1, а сигнал S1 — 0. На шестой сверху вентиль И пода- ются сигналы S0, S– 1 и S2, все равные 1. Ни на один другой вен- тиль И эти сигналы не попадают, поэтому выход всех осталь- ных вентилей И равен 0. Понятно, что выход шестого вентиля И будет равен 0, если сигнал D5 = 0, или 1 при D5 = 1. То же относится и к вентилю ИЛИ. Таким образом, если сигналы для выборки равны 101, выход совпадает с сигналом D5. Вы еще не забыли, чем мы занимаемся? Мы пытаемся свя- зать восемь 1-битовых защелок так, чтобы данные в них мож- но было записывать и считывать индивидуально, используя единственный вход DI и единственный выход DO. Мы уже убедились, что для вывода содержимого одной из защелок можно применить селектор 8 линий на 1: V DI W DO DI W DO W DO DI W DO DI W DO DI W DO DI W DO DI W DO Селектор 8 линий на 1 Выход DI S0 S1 S2 D7 D6 D5 D4 D3 D2 D1 D0 Мы на полпути к успеху. Теперь, зная, какое устройство нуж- но на выходе, займемся входом. На входе мы имеем сигналы Данные и Запись. И если вхо- ды D всех 1-битовых защелок можно соединить между собой, с сигналами Запись это уже не пройдет, поскольку мы хотим осуществлять запись в каждую защелку индивидуально. Нам нужен сигнал Запись, подаваемый на одну (и только одну) за- щелку: 236 Глава шестнадцатая V V Некое устройство DI W DO DI W DO DI W DO DI W DO DI W DO DI W DO DI W DO DI W DO Ввод данных Запись Для решения этой задачи нам понадобится схема, которая напоминает селектор, но в действительности выполняет пря- мо противоположное действие, а именно дешифратор 3 ли- нии на 8 (3-to-8 Decoder). С простым дешифратором мы уже встречались — в главе 11 он помогал нам задать цвет идеаль- ной кошки. У дешифратора «3 на 8» восемь выходов. В любой момент времени все они равны 0, кроме выхода, указанного сигнала- ми S0, S1 и S2. Его значение совпадает со значением входа Ввод данных. O7 O6 O5 O4 O3 O2 O1 O0 S0 S1 S2 Ввод данных 237 Сборка памяти И снова обратим внимание на шестой сверху вентиль И. Три из его сигналов равны S0, S– 1 и S2, которые ни на один дру- гой вентиль не подаются. Это значит, что если на входы для выборки подается 101, то выход всех вентилей, кроме шесто- го, будет равен 0. Его же выход равен 1, если сигнал Данные равен 1, и 0, если сигнал Данные равен 0. Заполним таблицу логики для этого дешифратора. Входы Выходы S2 S1 S0 O7 O6 O5 O4 O3 O2 O1 O0 0 0 0 0 0 0 0 0 0 0 Дан- ные 0 0 1 0 0 0 0 0 0 Дан- 0 ные 0 1 0 0 0 0 0 0 Дан- 0 0 ные 0 1 1 0 0 0 0 Дан- 0 0 0 ные 1 0 0 0 0 0 Дан- 0 0 0 0 ные 1 0 1 0 0 Дан 0 0 0 0 0 ные- 1 1 0 0 Дан- 0 0 0 0 0 0 ные 1 1 1 Дан- 0 0 0 0 0 0 0 ные А теперь посмотрим, как полностью выглядит схема с за- щелками. 238 Глава шестнадцатая Дешифратор «3 на 8» Ввод данных Запись Селектор «8 на 1» DI W DO Адрес Выход Данные Вывод данных DI W DO DI W DO DI W DO DI W DO DI W DO DI W DO DI W DO S0 S1 S2 S0 S1 S2 D7 D6 D5 D4 D3 D2 D1 D0 О7 О6 О5 О4 О3 О2 О1 О0 Заметьте: сигналы выборки для дешифратора и селектора совпадают. Обратите внимание и на слово, которым я назвал эти сигналы — адрес (address). 3-битовый адрес действует по- добно почтовому индексу, указывая, к которой из 8 защелок происходит обращение. На входе сигнал Адрес определяет, в какую защелку будет записан сигнал Ввод данных. На выходе (в нижней части рисунка) адрес используется, чтобы с помо- щью селектора «8 на 1» считать содержимое одной из восьми защелок. Защелки в такой конфигурации иногда называют памятью с записью/чтением (read/write memory), а чаще — памятью с произвольным доступом, или произвольной выборкой (random access memory, RAM). В данном варианте память RAM исполь- зуется для хранения 8 независимых 1-битовых величин. На схеме ее можно обозначить так: DO A0 A1 A2 Адрес Вывод данных Запись DI W Ввод данных 8 × 1 RAM  239 Сборка памяти Памятью это устройство названо из-за его способности сохранять информацию. Возможность записи/чтения означа- ет, что вы вольны сохранить (записать) нужное значение в любую из защелок или определить (прочитать), какое значе- ние в ней уже находится. Термин «произвольный доступ» оз- начает, что данные могут быть записаны или прочитаны из любой защелки — достаточно подать соответствующие сиг- налы на вход Адрес. Этим память с произвольным доступом отличается от устройств с последовательным доступом: в них нельзя прочитать данные по адресу 101, не прочитав перед этим данные по адресу 100. Разобранную нами конфигурацию RAM часто называют массивом RAM (RAM array). Наш массив собран по схеме, ко- торую иногда сокращенно обозначают «8 � 1», т. е. восемь 1- битовых значений. Перемножив два этих числа, вы получите полное число битов, которое можно сохранить в массиве. Массивы RAM можно объединять по-разному. Вот, напри- мер, как создать память для хранения восьми 2-битовых зна- чений. 8 × 1 RAM  DO Вывод данных Адрес Ввод данных Запись DI W DO Вывод данных Ввод данных DI W 8 × 1 RAM  A0 A1 A2 A0 A1 A2 Как видите, сигналы Адрес и Запись двух массивов соединены между собой, поэтому в результате получаем массив 8 � 2. 240 Глава шестнадцатая 8 × 2 RAM  DO1 Вывод данных Адрес Запись DI0 W DO0 Ввод данных DI1 A0 A1 A2 Массив по-прежнему способен хранить 8 значений, но каждое из них имеет размер 2 бита. В другой схеме два массива RAM 8 � 1 соединены подобно отдельным защелкам — с помощью селектора «2 на 1» и де- шифратора «1 на 2». DO A0 A1 A2 Вывод данных Адрес DI W DO DI W Селектор «2 на 1» D0 D1 Дешифратор «1 на 2» DO0 DO1 Запись Ввод данных Выборка S S 8 × 1 RAM  8 × 1 RAM  A0 A1 A2 Сигнал Выборка, подаваемый на селектор и дешифратор, по сути выбирает один из двух массивов RAM 8 � 1 и является 241 Сборка памяти четвертой адресной линией. Иначе говоря, мы собрали мас- сив RAM 16 � 1 Вывод данных Адрес Запись W DO Ввод данных DI 16 × 1 RAM  A0 A1 A2 A3 В нем можно хранить шестнадцать 1-битовых значений. Число значений, хранение которых допускается в массиве, непосредственно связано с количеством адресных линий. Если бы входов Адрес вовсе не было (как в 1-битовой или 8-бито- вой защелке), хранить можно было бы всего одно значение. С одним входом Адрес допускается хранение уже двух значений, с тремя входами — 8 значений, с четырьмя — 16 и т. д. в соот- ветствии с формулой: Число значений в массиве RAM = 2Количество входов Адрес Собрав небольшой массив RAM, мы легко представим себе сборку большого массива, например, такого: Addr W DO DI 10 8 8 Вывод данных Адрес Запись Ввод данных 1024 × 8 RAM  Это массив предназначен для хранения 8 196 битов, разбитых на 1 024 восьмибитовых числа. Для выбора из них нужного используются 10 адресных линий, поскольку 1024 = 210. Кроме того, в массиве 8 входов и 8 выходов для данных. Другими словами, в этом массиве, как в почтовом отделе- нии с 1 024 абонентскими ящиками, хранятся 1 024 байта, или 1 килобайт. Термин «килобайт» часто становится причиной не- которой путаницы. Приставка «кило», происходящая от гречес- кого слова, означающего тысячу, часто используется в обыден- 242 Глава шестнадцатая ной жизни. Например, в килограмме 1 000 граммов, а в кило- метре 1 000 метров. Но в килобайте 1 024 байта, а вовсе не 1 000. Проблема в том, что метрическая система мер основана на десятичной системе счисления, а компьютерные единицы — на двоичной системе. Степени 10 равны 10, 100, 1 000, 10 000, 100 000 и т.д. Степени 2 равны 2, 4, 8, 16, 32, 64 и т.д. Ни одна степень 10 не равна степени 2. Но иногда они подходят близко друг к другу. Да, 1 000 дей- ствительно мало отличается от 1 024, что выражается матема- тическим знаком «приблизительно равно»: 210 � 103. Ничего волшебного в этом соотношении нет. Оно просто го- ворит о том, что данная степень 2 приблизительно равна дан- ной (другой) степени 10. Это замечательное совпадение и по- зволяет называть 1 024 байта килобайтом. Сокращенно кило- байт обозначается кб или просто К. Говорят, что объем памя- ти равен 1 024 байтам, или 1 килобайту, или 1 кб, или 1 К. Но, конечно, нельзя говорить, что в 1 килобайте 1 000 байтов. У памяти объемом 1 кб по 8 входов для ввода и вывода дан- ных и 10 адресных линий. Этих десяти линий необходимо и достаточно для адресации 210 байтов. Добавив еще один адрес- ный вход, мы удваиваем объем адресуемой памяти. В приве- денном ниже примере каждая следующая строчка есть удвое- ние предыдущей строчки: 1 килобайт = 1 024 байта = 210 байтов � 103 байтов 2 килобайта = 2 048 байтов = 211 байтов 4 килобайта = 4 096 байтов = 212 байтов 8 килобайтов = 8 192 байта = 213 байтов 16 килобайтов = 16 384 байта = 214 байтов 32 килобайта = 32 768 байтов = 215 байтов 64 килобайта = 65 536 байтов = 216 байтов 128 килобайтов = 131 072 байта = 217 байтов 256 килобайтов = 262 144 байта = 218 байтов 512 килобайтов = 524 288 байтов = 219 байтов 1024 килобайта = 1 048 576 байтов = 220 байтов � 106 байтов Та же логика, что позволила нам называть 1 024 байта ки- лобайтом, приводит и к следующему обозначению — 1 024 243 Сборка памяти килобайта будем называть мегабайтом (приставка «мега» в обычных единицах означает миллион и происходит от гречес- кого слова «великий»), или сокращенно Мб или MB. Продол- жаем удваивать память. 1 мегабайт = 1 048 576 байтов = 220 байтов � 106 байтов 2 мегабайта = 2 097 152 байта = 221 байтов 4 мегабайта = 4 194 304 байта = 222 байтов 8 мегабайтов = 8 388 608 байтов = 223 байтов 16 мегабайтов = 16 777 216 байтов = 224 байтов 32 мегабайта = 33 554 432 байта = 225 байтов 64 мегабайта = 67 108 864 байта = 226 байтов 128 мегабайтов = 134 217 728 байтов = 227 байтов 256 мегабайтов = 268 435 456 байтов = 228 байтов 512 мегабайтов = 536 870 912 байта = 229 байтов 1024 мегабайта = 1 073 741 824 байта = 230 байтов Следующей по очереди идет приставка «гига» (от греческого «гигантский»), и мы уже уверенно называем 1024 мегабайта гигабайтом (Гб или GB). Далее, один терабайт (от греческого «тера» — «чудовищ- ный») равен 240 байтов (приблизительно 1012) = 1 099 511 627 776 байтов. Сокращается он как Тб или TB. Килобайт примерно равен тысяче байтов, мегабайт — мил- лиону байтов, гигабайт — миллиарду байтов, терабайт — трил- лиону байтов. Теперь мы вступаем туда, где до нас отваживались побы- вать немногие, и знакомимся с петабайтом (250 = 1 125 899 906 842 624 байтов, т. е. приблизительно 1015 или квадриллион) и экзабайтом (260 = 1 152 921 504 606 846 976 байтов, т. е. при- близительно 1018, или квинтиллион). В качестве практического примера сообщу, что во время написания этой книги (1999 г.) домашние компьютеры, как правило, обладали 32 или 64 (реже 128) Мб памяти с произ- вольным доступом (не запутайтесь — я говорю именно о па- мяти RAM, пока не упоминая жесткие диски). Эти объемы со- ответствуют 33 554 432, 67 108 864 и 134 217 728 байтам. Конечно, на практике никто такие страшные числа и слова не использует. Говорит человек просто: «У моего компьютера 64 К памяти», — и все понимают, что это гость из далекого прошлого. Обладатели памяти объемом 33 554 432 байта на- 244 Глава шестнадцатая зывают ее «32 мега». Счастливый владелец 1 073 741 824 бай- тов говорит о них, как об «одном гиге». Иногда приходится слышать и о килобитах или мегабитах (именно битах, а не байтах), но в подобных случаях речь по- чти наверняка идет не о памяти. Как правило, в этих единицах измеряют объем информации, передаваемой по различным кабелям, или о скорости передачи. В последнем случае, конеч- но, говорят о килобитах в секунду или о мегабитах в секунду. Например, 56К в обозначении модема означает именно 56 ки- лобит в секунду. Теперь, когда мы научились собирать память любого объе- ма, главное не увлечься и не утратить контроль над происхо- дящим. Поэтому пока ограничимся сборкой массива емкос- тью 65 536 байтов: 64K × 8 RAM Addr W DO DI 16 8 8 Вывод данных Адрес Запись Ввод данных Почему именно 64 К, а не 32 или 128? Потому что 65 536 — очень красивое и круглое число, равное 216. Для адресации ячеек памяти понадобится 16-битовый адрес, т. е. адрес, занимаю- щий ровно 2 байта. В шестнадцатеричной системе адрес мо- жет принимать значение от 0000h до FFFFh. Я намекал чуть раньше, что в далеком прошлом (в начале 1980-х) компьютеры часто выпускались с памятью объемом 64 К, хотя делали ее, конечно, не из реле. Да и можно ли со- брать память такой емкости из реле? Уверен, у вас хватит ума никогда этим не заниматься. В нашей схеме для хранения од- ного бита используется 9 реле, стало быть массив RAM 64K � 8 будет содержать их почти 5 миллионов! Было бы неплохо обзавестись пультом управления памя- тью, который позволял бы записывать данные в ячейки памя- ти и проверять их содержимое. На этом пульте будет 16 пере- ключателей для указания адреса, 8 — для ввода числа, которое нужно записать, еще один — для подачи сигнала на запись и 8 лампочек для отображения 8-разрядного числа из памяти. 245 Сборка памяти 1 0 1 0 Пульт управления RAM 64K Запись Перехват 1 0 1 0 A15 A14 A13 A12 A11 A10 A9 A8 A7 A6 A5 A4 A3 A2 A1 A0 D7 D6 D5 D4 D3 D2 D1 D0 На рисунке все переключатели стоят в положении «выключе- но» (0). Обратите внимание на переключатель Перехват. Его назначение — разрешить другим устройствам использование той же памяти, к которой подключен пульт. Когда этот пере- ключатель выключен (как на рисунке), остальные переключа- тели на пульте с памятью не связаны. Когда же включен, уп- равление памятью осуществляется исключительно с помощью пульта. Для реализации переключателя Перехват нам потребуется 25 селекторов «2 на 1» — 16 для адресных переключателей, 8 для переключателей, с помощью которых вводится число, и еще один для переключателя Запись. Вот как выглядит нуж- ная схема: V Addr 8 лампочек W DO DI 16 8 8 Вывод данных 25 селекторов «2 на 1» 8 16 8 16 25 переключателей Адрес Данные Вход Запись 16 8 Перехват S 64K × 8 RAM 246 Глава шестнадцатая Когда переключатель Перехват разомкнут, как показано на рисунке, информация на входы массива памяти Адрес, Дан- ные и Запись поступает извне (эти сигналы схематически изоб- ражены в верхней левой части рисунка). Если переключатель замкнут, информация на эти входы подается с переключате- лей. Независимо от того, откуда в память поступает информа- ция, из нее она идет на 8 лампочек и, возможно, куда-нибудь еще. Массив памяти RAM 64K � 8 с пультом управления я буду изображать так: Пульт управления Addr Вывод данных Запись W DO Ввод данных DI Адрес 16 8 8 64K × 8 RAM Если переключатель Перехват замкнут, с помощью 16 ад- ресных переключателей вы можете задать любой из 65 536 ад- ресов. На 8 лампочках будет отображено число, хранящееся в соответствующей ячейке в данный момент. Чтобы записать в ячейку другое число, введите его с помощью переключателей D и замкните переключатель Запись. Пульт управления, подключенный к массиву RAM 64K � 8, безусловно поможет вам разобраться во всех 65 536 восьмиби- товых значениях, записанных в памяти. Но заметьте: пульт не захватывает память в единоличное владение. Другим схемам также позволено записывать в нее данные и считывать их. В заключение — важнейший комментарий. Определив в главе 11 понятие логического вентиля, я перестал рисовать на схемах отдельные реле, из которых эти вентили состоят. А это, в частности, значит, что на схемах теперь не указывается под- ключение каждого реле к тому или иному источнику питания. 247 Сборка памяти А ведь именно электричество заставляет железный брусок ста- новиться магнитом и притягивать металлический контакт. Что же случится, если вы соберете память объемом 64K � 8, заполните ее до отказа самыми любимыми байтами, а потом выключите питание? Электромагниты утратят магнитные свойства, и все металлические контакты вернутся в исходные положения с громким «блямс»! А содержимое памяти превра- тится в ничто, и навсегда. Вот почему память с произвольным доступом называют иногда энергозависимой (volatile). Для хранения информации ей требуется непрерывное энергоснабжение. Глава 17 Автоматизация Род человеческий наделен удивительной смекалкой и усерди- ем, но в то же время чудовищно ленив. Не открою страшной тайны, сказав, что работать люди не любят. Наше отвращение к труду столь сильно, а ум столь изобретателен, что мы гото- вы посвящать бесчисленные часы проектированию и сборке устройств, которые на пару минут сократят рабочий день. И ошеломляюще воздействует на мозговой центр удовольствий волшебная греза: я блаженно раскачиваюсь в гамаке, а агрегат, только что собранный мною по последнему слову техники, подстригает лужайку перед домом. Не надейтесь, что на ближайших страницах вам попадутся чертежи автоматической газонокосилки. Вам предстоит позна- комиться с набором устройств куда более сложных, посред- ством которых я намерен автоматизировать сложение и вы- читание. Знаю: звучит это не слишком внушительно. И все же к концу главы в нашем распоряжении появится устройство, способное решить практически любую задачу, в которой ис- пользуется сложение и вычитание, а круг таких задач гораздо шире, чем вы представляете. Конечно, разнообразие внешних функций подразумевает внутреннюю сложность, и потому путь, по которому нам пред- стоит идти, не всегда будет гладким. Никто не обвинит вас, если несколько особо запутанных страниц вы пролистаете, не читая. Временами вам будет хотеться стукнуть кулаком по сто- 250 Глава семнадцатая лу и поклясться страшной клятвой никогда не прибегать к помощи электрических и механических приспособлений для решения математических задач. Но не сдавайтесь — устрой- ство, которое мы соберем, может с полным правом именовать- ся компьютером. Последнюю модель сумматора мы разработали в главе 14. В эту модель входила 8-битовая защелка, в которой накапли- валась сумма чисел, вводимых с помощью набора из 8 пере- ключателей: 8 V 8 V Clr Clk 8�битовая защелка 8 Лампочки Сложить CI 8�битовый сумматор Переключатели 8 Очистка B A S DO DI Как вы помните, в защелке с помощью триггеров сохраняется 8-битовое значение. Чтобы задействовать сумматор, на мгно- вение нажмите кнопку Очистка, чтобы записать в защелку 8 нулей, а затем введите с помощью переключателей первое чис- ло и нажмите кнопку Сложить. Сумматор прибавит его к ну- левому содержимому защелки, получив в результате все то же введенное число. Оно будет отображено лампочками. Введите с помощью переключателей второе число и снова нажмите кнопку Сложить. Сумматор прибавит введенное значение к содержимому защелки, запишет в защелку текущий резуль- тат суммирования и отобразит его с помощью лампочек. Та- ким образом вы можете складывать длинные ряды чисел, по- мня, естественно, об ограничении — с помощью 8 лампочек нельзя отобразить число, превышающее 255. 251 Автоматизация К тому времени, когда я в главе 14 показал вам эту схему, мы успели познакомиться только с защелками со срабатыва- нием по уровню. В такой защелке запись входного сигнала осу- ществляется, когда сигнал Clk обращается сначала в 1, а потом в 0. Пока сигнал Clk равен 1 все изменения входного сигнала отражаются на содержимом защелки. Потом в той же главе мы узнали еще об одном типе защелок — со срабатыванием по фронту. В таких защелках входной сигнал сохраняется в краткий промежуток времени, когда значение сигнала Clk ме- няется с 0 на 1. Защелками со срабатыванием по фронту легче пользоваться, поэтому далее я буду предполагать, что нам встречаются защелки только этого типа. Защелка, применяемая для хранения текущего значения суммы, называется аккумулятором (accumulator). Чуть позже мы убедимся, что накоплением суммы роль аккумулятора не ограничивается. В нем часто сначала хранится исходное чис- ло, а потом результат произведенного над этим числом дей- ствия (сложения или вычитания). Недостаток показанного сумматора очевиден. Допустим, вам нужно найти сумму 100 двоичных чисел. Вы подсаживаетесь к сумматору и усердно вводите всю сотню число за числом. И вот, когда работа закончена, вдруг оказывается, что пару чисел из списка вы ввели неправильно. Придется начинать все сызнова. Или не придется? В главе 16 мы узнали, как из 5 миллионов реле собрать память RAM объемом 64 кб, и разработали пульт для работы с этой памятью. На этом пульте есть переключатель Перехват, позволяющий перехватывать управление памятью и вручную изменять ее содержимое с помощью тумблеров. Ввод данных DI 8 Addr Вывод  данных Запись W DO Адрес 16 8 Пульт управления 64K × 8 RAM 252 Глава семнадцатая Если бы вы ввели 100 ваших слагаемых в память, а не пря- мо в сумматор, исправить ошибки было бы куда легче. Итак, перед нами нелегкая задача: подключить память RAM к сумматору с накоплением суммы. Совершенно ясно, что вместо переключателей к сумматору нужно подключить вы- ходы DO массива памяти. А вот возможность управлять ад- ресными входами памяти с помощью двоичного счетчика (мы познакомились с ним в главе 14) уже не так очевидна. Сигна- лы массива DI и Запись в этой схеме не нужны: Clk Clr 8�битовая защелка 8 Лампочки Очистка Addr DO 16 8 16�битовый счетчик Clk Clr Вибратор 8 V 8 8�битовый CI сумматор Пульт управления B A S DI DO 64K × 8 RAM Смело утверждаю, что людям случалось изобретать вычис- лительные устройства и поудобнее. Чтобы воспользоваться этой штукой, вы должны прежде всего замкнуть переключа- тель Очистка, тем самым обнулив содержимое защелки и ус- тановив выходной сигнал 16-битового счетчика в 0000h. За- тем замкнем переключатель Перехват на пульте управления памятью и введем первое слагаемое в память по адресу 0000h. Если вы собираетесь сложить 100 чисел, они займут в памяти адреса с 0000h по 0063h. По всем неиспользованным адресам должны быть записаны нули. Разомкните переключатель Пе- рехват на пульте управления памятью (чтобы вернуть сумма- 253 Автоматизация тору доступ к памяти) и переключатель Очистка. А теперь рас- слабьтесь и получайте удовольствие от созерцания мигающих лампочек! А чтобы вы при этом не скучали, я расскажу, что именно происходит в сумматоре. В момент размыкания переключате- ля Очистка текущий адрес памяти равен 0000h. На один из входов сумматора подается сохраненная по этому адресу ве- личина. На второй вход подается число 00h, поскольку содер- жимое защелки также очищено. Вибратор подает в схему синхронизирующий сигнал, т. е. сигнал, осциллирующий между 0 и 1. Если переключатель Очистка разомкнут, при переходе синхронизирующего сигнала из 0 в 1 одновременно происходят две вещи. Во-первых, в за- щелку записывается результат суммирования, во-вторых, вы- ход счетчика увеличивается на 1, указывая теперь на следую- щую ячейку памяти. Когда сигнал вибратора переходит из 0 в 1 в первый раз после размыкания переключателя Очистка, в защелку записывается первое слагаемое, а выход счетчика об- ращается в 0001h. Во второй раз в защелку записывается сум- ма первого и второго слагаемых, а сигнал на выходе счетчика становится 0002h. И т. д. Конечно, для работы этой схемы требуется соблюдение некоторых условий. Например, колебания сигнала вибратора должны происходить достаточно медленно, чтобы схема ус- певала на них реагировать. Ведь каждое изменение синхрони- зирующего сигнала приводит в действие множество реле, ко- торые переключают другие реле и т. д. У этой схемы есть и крупный недостаток: мы не в состоя- нии остановить ее работу! В какой-то момент лампочки пере- станут мигать, так как, начиная с некоторой ячейки, в памяти хранятся одни нули. Но когда счетчик достигнет значения FFFFh, он обнулится, совсем как счетчик километров на спи- дометре автомобиля, и сумматор начнет прибавлять те же сла- гаемые к уже посчитанной сумме. Этот не единственный недостаток. Наш сумматор спосо- бен только складывать и работает только с 8-битовыми значе- ниями. Величиной 255 ограничены как числа, записанные в память, так и их сумма. Если вы решите реализовать не только сложение, но и вычитание (с помощью дополнений до 2), дос- тупный вам диапазон будет ограничен значениями от –128 до 254 Глава семнадцатая 127. Очевидный способ научить сумматор работать с больши- ми числами (например, 16-битовыми) — удвоить ширину массива RAM, сумматора, защелки, а также добавить на пульт управления 8 лампочек. Но давайте считать, что к такому вло- жению капитала вы пока не готовы. Конечно, я не заговорил бы об этих проблемах, если бы не собирался в конце концов решить их. Но давайте пока сформу- лируем еще одну проблему. Что если сумма сотни слагаемых вас не интересует, а хочется вам сложить 100 чисел попарно, получив 50 различных сумм? Что если вам хочется машину, которой можно было бы указывать, как именно нужно разбить сотню чисел на суммы? Причем все результаты суммирования должны сохраняться для последующего использования. Автоматический сумматор, с которым мы работали до сих пор, с помощью лампочек, подключенных к защелке, отобра- жает только текущее значение суммы. От этих лампочек мало проку, если вам нужно просмотреть 50 сумм, полученных в результате попарного суммирования 100 слагаемых. Удобнее записывать эти суммы обратно в память. С помощью пульта управления памятью вы потом просмотрите эти числа в лю- бое удобное для вас время. Специально для таких случаев на пульте управления памятью предусмотрен собственный набор лампочек. Но это значит, что от лампочек, подключенных к защелке, мы и вовсе можем отказаться. Подключим выходы защелки вместо лампочек ко входам массива RAM, чтобы результаты суммирования записывались прямо в память. Из схемы, показанной на следующей странице, я также уда- лил некоторые другие компоненты сумматора, а именно виб- ратор и переключатель Очистка. Я сделал это потому, что те- перь уже не так очевидно, откуда на счетчик и защелку посту- пают сигналы Clk и Clr. Кроме того, мы задействовали входы массива RAM, а значит нам понадобится вход W (Запись). Но давайте не будем пока тревожиться о деталях схемы, со- средоточившись вместо этого на проблеме, которую пытаемся решить. Нам нужно изменить конфигурацию сумматора так, чтобы его функции не ограничивались простым накоплением суммы набора чисел. Мы хотим полной свободы в выборе ко- личества слагаемых и количества сумм, которые мы собираем- ся записывать в память для дальнейшего использования. 255 Автоматизация Clk Clr Clk Clr 8�битовая защелка 8 Addr DO 16 8 8 8�битовый CI сумматор Пульт управления DI 8 W B A S DO DI 16�битовый счетчик 64K × 8 RAM Допустим, нам нужно найти три суммы: трех слагаемых, двух слагаемых и еще трех слагаемых. Представим себе, что мы ввели все слагаемые в память, начиная с адреса 0000h. Со- держимое памяти после этого выглядит так: 27h A2h 18h 1Fh 89h 33h 2Ah 55h 0000h: 0004h: 0007h: Первую сумму запишем сюда Вторую сумму запишем сюда Третью сумму запишем сюда Именно так я буду показывать содержимое памяти. Прямо- угольники представляют собой отдельные ячейки памяти. Каждый байт находится в своей ячейке. Адрес ячейки указан 256 Глава семнадцатая слева. Все адреса указывать нужды нет, так как они идут пос- ледовательно друг за другом, и вы всегда легко подсчитаете, чему равен отсутствующий адрес. Справа указаны пояснения к содержимому памяти. В данном случае я отметил, что сум- матор должен записывать суммы в пустые ячейки. (Кстати, на самом деле память не бывает пустой. Она всегда что-то содер- жит, даже если это что-то — случайное сочетание битов. Важ- но, что в данный момент эти ячейки не содержат нужной ин- формации.) Я знаю, вы сейчас боретесь с искушением попрактиковать- ся в шестнадцатеричной арифметике и заполнить пустые ячей- ки самостоятельно. Но не забывайте, что наша задача не в этом. Мы хотим, чтобы сложением вместо нас занимался автомати- ческий сумматор. До сих пор он выполнял единственное действие: склады- вал содержимое ячейки памяти с содержимым 8-битовой за- щелки, которую я назвал аккумулятором. Но этого мало — теперь он должен выполнять четыре различных операции. Что- бы начать сложение, сумматор должен переписать содержи- мое ячейки памяти в аккумулятор. Эту операцию я буду назы- вать загрузкой. Второе действие — сложить байт из памяти с содержимым аккумулятора. В-третьих, мы должны сохранить в памяти сумму из аккумулятора. Наконец, надо как-то оста- новить работу сумматора. Если разобрать эту последовательность по косточкам, то в данном конкретном примере сумматор должен сделать сле- дующее: • загрузить значение из ячейки 0000h в аккумулятор; • сложить значение из ячейки 0001h с аккумулятором; • сложить значение из ячейки 0002h с аккумулятором; • сохранить значение из аккумулятора в ячейке 0003h; • загрузить значение из ячейки 0004h в аккумулятор; • сложить значение из ячейки 0005h с аккумулятором; • сохранить значение из аккумулятора в ячейке 0006h; • загрузить значение из ячейки 0000h в аккумулятор; • сложить значение из ячейки 0001h с аккумулятором; • сложить значение из ячейки 0002h с аккумулятором; • сохранить значение из аккумулятора в ячейке 0003h; • остановить работу. 257 Автоматизация Заметьте: как и в исходном сумматоре, байты в памяти адре- суются последовательно, начиная с адреса 0000h. Раньше ис- пользование памяти сводилось к тому, что содержимое кон- кретной ячейки складывалось с содержимым аккумулятора. Потребность в этой функции сохранилась и теперь. Но в до- полнение к ней мы хотим иногда прямо загружать в аккуму- лятор значение из памяти или сохранять в памяти значение из аккумулятора. Кроме того, сумматор, закончив работу, дол- жен остановиться и дать нам возможность проверить содер- жимое памяти. Как этого достичь? Не ждем же мы, что сумматор сам сооб- разит, что делать с введенными в память числами. Каждое чис- ло в памяти нужно сопроводить кодом, который указывал бы сумматору нужное действие: загрузить, сложить, сохранить или остановить. Вероятно, проще всего (хотя и не дешевле всего) завести для решения этой задачи отдельный массив RAM, доступ к которому будет осуществляться одновременно с первым. Толь- ко содержать он будет не складываемые числа, а коды, симво- лизирующие действия, которые сумматор должен выполнять с заданными ячейками памяти. Будем называть старый мас- сив Данные, а новый — Коды. DO 8 Пульт  управления Пульт  управления Addr DO 8 Коды Данные 8 16 DI Addr 16�битовый счетчик W 64K × 8 RAM 64K × 8 RAM 258 Глава семнадцатая Мы уже разобрались, что в новом автоматическом сумматоре нам понадобится возможность записи чисел в массив Данные. Доступ к массиву Коды, напротив, будет осуществляться толь- ко с пульта управления. Для четырех действий, выполнения которых мы ожидаем от сумматора, нам понадобятся четыре кода. Коды эти в прин- ципе произвольны. Например, они могут быть такими: Действие Код Загрузить 10h Сохранить 11h Сложить 20h Остановить FFh Для выполнения троекратного сложения в нашем примере вы должны с помощью пульта управления записать в массив Коды такие значения: 10h 20h 20h 10h 20h 10h 20h 20h 0000h: 0004h: 0007h: Сохранить Сохранить Сохранить 11h 11h 11h FFh Загрузить Сложить Сложить Загрузить Сложить Загрузить Сложить Сложить Остановить 000Bh: Сравните содержимое этого массива с массивом Данные, ко- торый содержит числа для сложения. Каждому коду в массиве Коды соответствует число из массива Данные, которое нужно загрузить в аккумулятор или сложить с его содержимым, или пустая ячейка, в которую нужно поместить значение из акку- 259 Автоматизация мулятора. Используемые таким образом численные коды на- зываются кодами команд (instruction code), или кодами опера- ций. Они «командуют» схеме выполнить определенную «опе- рацию». Раньше я уже упоминал, что выход 8-битовой ячейки дол- жен быть входом массива Данные. Это необходимо для вы- полнения команды Сохранить. Необходимо и другое измене- ние. Поначалу входом 8-битовой защелки был выход 8-бито- вого сумматора. Однако для выполнения команды Загрузить вход 8-битовой защелки иногда должен соединяться с выхо- дом массива Данные. Нам, очевидно, нужен селектор 2 линии на 1. Исправленная схема сумматора выглядит так: Clk Clr Clk Clr S 8�битовая защелка 8 8 8 8�битовый CI сумматор DO 8 Пульт управления Пульт управления Addr DO Коды Данные 16 DI Селектор «2 на 1» 8 Addr 16�битовый счетчик W 64K × 8 RAM 64K × 8 RAM 260 Глава семнадцатая В этой схеме все еще много не хватает, но все 8-битовые кана- лы между различными компонентами показаны. Адреса для двух массивов RAM выдает 16-битовый счетчик. Выход мас- сива Данные, как обычно, соединен со входом сумматора для выполнения команды Сложить. На вход 8-битовой защелки сигнал подается либо с выхода массива Данные (для выполне- ния команды Загрузить), либо с выхода сумматора (для вы- полнения команды Сложить). Вот здесь-то и нужен селектор «2 на 1». Выход защелки, как обычно, возвращается на вход сумматора, но он же является и входом массива Данные (для выполнения команды Сохранить). Чего на этой схеме нет, так это сущего пустяка — сигна- лов, которые руководили бы работой всех компонентов, т. е. управляющих сигналов (control signals). К ним относятся входы Clk и Clr 16-битового счетчика, входы Clk и Clr защелки, вход W массива данные и вход S селектора «2 на 1». Некоторые из этих сигналов, очевидно, будут определяться содержимым массива Коды. Например, на вход S селектора «2 на 1» подает- ся 0 (выбрано поступление данных из памяти), если в теку- щей ячейке массива Коды записана команда Загрузить. Вход W массива Данные обращается в 1, только если в текущей ячей- ке массива Коды содержится команда Сохранить. Эти управ- ляющие сигналы можно генерировать с помощью различных комбинаций логических вентилей. Еще немного оборудования и новая команда позволят нам, используя ту же схему, вычитать число из содержимого акку- мулятора. Начнем с расширения таблицы кодов команд. Команда Код Загрузить 10h Сохранить 11h Сложить 20h Вычесть 21h Остановить FFh Коды команд Сложить и Вычесть отличаются только младшим битом — обозначим его C0. Если текущий код команды равен 21h, схема осуществляет те же действия, что и при выполне- нии команды Сложить, только на этот раз данные из памяти 261 Автоматизация перед поступлением в сумматор инвертируются, и вход сум- матора для переноса (CI) устанавливается в 1. Обе эти задачи можно решить с помощью сигнала C0 при условии, что в кон- струкцию сумматора добавлен инвертор: Clk Clr Clk Clr S 8�битовая защелка 8 8 8 CI 8�битовый сумматор DO 8 Addr DO Коды Данные 16 DI Селектор «2 на 1» 8 Инвертор 8 Addr 16�битовый счетчик C0 W Пульт управления Пульт управления 64K × 8 RAM 64K × 8 RAM Допустим теперь, что нам нужно сложить числа 56h и 2Ah, а затем вычесть из суммы число 38h. Для решения этой задачи в массивы Данные и Коды записываются такие числа: 262 Глава семнадцатая Записываем  результат 10h 20h 21h FFh 0000h: Сохранить 11h Загрузить  Сложить Вычесть Остановить 56h 2Ah 38h 0000h: Данные Коды После выполнения команды Загрузить в аккумуляторе запи- сано число 56h. После команды Сложить в нем содержится сумма 56h и 2Ah, т. е. 80h. При выполнении команды Вычесть биты следующего по порядку числа в массиве Данные (38h) инвертируются. Инвертированное значение C7h складывает- ся с числом 80h, при этом на вход сумматора для переноса (CI) подается 1. C7h +80h +1h 48h Окончательный результат равен 48h (в десятичной системе 86 + 42 – 56 = 72). Настало время обратиться к проблеме недостаточной раз- рядности сумматора и подключенных к нему устройств. Рань- ше я говорил лишь о наиболее прямолинейном решении этой проблемы: включить в схему еще один 8-битовый сумматор (и еще одну защелку, и еще один набор лампочек и т. д.), что- бы в итоге получить 16-битовое устройство. Но есть и более экономичное решение. Рассмотрим в каче- стве примера сумму 16-разрядных чисел: 76ABh +232Ch Сложить два этих 16-битовых числа есть то же самое, что по отдельности сложить их младшие байты: ABh +2Ch D7h 263 Автоматизация и старшие байты: 76h +23h 99h Получаем 99D7h. Если мы расположим 16-разрядные числа в памяти таким образом: Старший  байт результата 10h 20h 11h 20h 0000h: Загрузить 10h Загрузить Сложить Сохранить Сложить ABh 2Ch Данные Коды 11h Сохранить FFh Остановить 76h 23h Младший  байт результата 0000h: число D7h будет сохранено по адресу 0002h, а 99h — по адресу 0005h. Конечно, такая последовательность действий далеко не все- гда будет приводить к желаемому результату. В данном кон- кретном примере она сработала, но что если придется склады- вать числа 76ABh и 236Ch? В этом случае сложение двух млад- ших байтов приведет к появлению переноса: ABh +6Ch 117h Это перенос нужно добавить к сумме старших байтов: 1h +76h +23h 9Ah чтобы получить окончательный результат — 9A17h. Можно ли усовершенствовать наш автоматический сум- матор, чтобы он корректно складывал 16-разрядные числа? Можно. Для этого нужно лишь сохранить бит переноса после 264 Глава семнадцатая первого сложения, а затем подать его на вход сумматора для переноса при втором сложении. Как сохранить этот бит? Ко- нечно, в 1-битовой защелке, которую мы назовем защелкой для переноса. Для работы с защелкой для переноса нам понадобится еще одна команда. Назовем ее Сложить с переносом. При сложе- нии 8-битовых чисел вы используете обычную команду Сло- жить. Вход CI сумматора равен 0, а выход CO сохраняется в защелке для переноса (хотя в данном случае запоминать его и не нужно). Суммируя 16-битовые числа, вы сначала складываете их младшие байты с помощью обычной команды Сложить. Вход CI сумматора и в этом случае равен 0, а выход CO сохраняется в защелке для переноса. Для сложения старших байтов вы при- меняете команду Сложить с переносом. При ее выполнении на вход сумматора для переноса подается содержимое защел- ки для переноса. Если первое суммирование привело к появ- лению переноса, он используется во втором суммировании. Если переноса не было, выход защелки для переноса равен 0. Для вычитания 16-битовых чисел нам понадобится еще одна новая команда — Вычесть с заимствованием. Для выпол- нения обычной команды Вычесть надо инвертировать вычи- таемое и установить в 1 вход сумматора для переноса. При этом обычно 1 равен и выход сумматора для переноса, но на это при обычном вычитании можно закрыть глаза. Другое дело — вычитание 16-битовых чисел. Тут значение выхода для пе- реноса надо сохранять в защелке для переноса. При втором вычитании содержимое этой защелки подается на вход CI сум- матора. С учетом двух новых команд мы набрали уже 7 кодов: Команда Код Загрузить 10h Сохранить 11h Сложить 20h Вычесть 21h Сложить с переносом 22h Вычесть с заимствованием 23h Остановить FFh 265 Автоматизация При выполнении команд Вычесть и Вычесть с заимствовани- ем число, направляемое в сумматор, инвертируется. Выход CO сумматора является входом защелки для переноса. Его значе- ние сохраняется в защелке при выполнении команд Сложить, Вычесть, Сложить с переносом и Вычесть с заимствованием. Вход сумматора для переноса устанавливается в 1 при выпол- нении команды Вычесть или при выполнении команд Сложить с переносом и Вычесть с заимствованием при условии, что 1 равен выход защелки для переноса. Не забывайте, что при выполнении команды Сложить с переносом вход сумматора для переноса устанавливается в 1, только если к появлению переноса привело выполнение пре- дыдущей команды Сложить или Сложить с переносом. При сложении многобайтовых чисел всегда следует применять ко- манду Сложить с переносом независимо от того, появится при суммировании перенос или нет. В разобранном выше приме- ре правильная последовательность команд такова: 10h 20h 11h 22h 0000h: Загрузить 10h Загрузить Сложить Сохранить ABh 2Ch Данные Коды 11h Сохранить FFh Остановить 76h 23h 0000h: Старший  байт результата Младший  байт результата Сложить с переносом Она корректно сложит любые 16-разрядные числа. Всего две новые команды, но как они расширили возмож- ности машины! Мы более не связаны необходимостью рабо- тать только с 8-битовыми числами. Многократное примене- ние команды Сложить с переносом позволит нам суммиро- вать 16-битовые, 24-битовые, 32-битовые, 40-битовые значе- ния и т. д. Например, для сложения 32-битовых чисел 7A892BCDh и 65A872FFh нам понадобится одна команда Сло- жить и три команды Сложить с переносом: 266 Глава семнадцатая 10h 20h 11h 22h 0000h: Загрузить  10h Загрузить Сложить Сохранить Сложить с переносом CDh FFh Данные Коды 11h Сохранить 10h Загрузить  2Bh 72h 0000h: Следующий  за младшим  байт  результата 89h 22h A8h 11h 10h 7Ah 22h 65h 11h FFh Сложить с переносом Сохранить Загрузить Сложить с переносом Сохранить Остановить Младший  байт  результата Предыдущий  перед  старшим  байт  результата Старший  байт  результата Конечно, заносить эти числа в память не ахти как интересно. Мало того, что придется изрядно пощелкать переключателя- ми, нужно еще и следить за тем, чтобы числа вводились в нуж- ные ячейки. Число 7A892BCDh, например, занимает адреса 0000h, 0003h, 0006h и 0009h, начиная с младшего байта. А ре- зультат сложения придется извлекать из ячеек 0002h, 0005h, 0008h и 000Bh. Кроме того, сумматор в его теперешнем виде не допускает повторного использования результатов вычислений. Скажем, сложили вы три 8-битовых числа, а затем вычли из суммы еще одно 8-битовое число. Это легко сделать командами Загрузить, Сложить, Сложить, Вычесть и Сохранить. Но если вы теперь решите вычесть из суммы другое 8-битовое число, вам придет- ся считать ее заново, так как нигде в памяти она не сохранилась. Проблема нашего сумматора в том, что в нем доступ к ячей- кам массивов Данные и Коды осуществляется одновременно и последовательно, начиная с адреса 0000h. Каждой команде в массиве Коды соответствует ячейка массива Данные, располо- женная по такому же адресу. Величину, записанную в массив Данные командой Сохранить, вернуть обратно в аккумулятор нельзя. 267 Автоматизация Для решения этой проблемы я намерен внести в сумматор фундаментальное изменение, которое на первый взгляд кажет- ся довольно сложным. Но со временем вы поймете (надеюсь!), какие просторы оно перед нами открывает. Поехали! Итак, у нас сейчас 7 команд. Команда Код Загрузить 10h Сохранить 11h Сложить 20h Вычесть 21h Сложить с переносом 22h Вычесть с заимствованием 23h Остановить FFh Пока каждый из кодов занимает в памяти 1 байт. Но я своей властью выделяю каждому из них, кроме кода Остановить, по 3 байта памяти. В первом будет находиться сам код, а в двух оставшихся — 16-битовый адрес ячейки памяти. В команде За- грузить, например, это будет адрес ячейки, число из которой нужно загрузить в аккумулятор. В командах Сложить, Вычесть, Сложить с переносом и Вычесть с заимствованием по этому адресу будет храниться число, которое нужно прибавить к со- держимому аккумулятора или вычесть из него. В команде Со- хранить в этих двух байтах будет указываться адрес ячейки, в которую нужно записать содержимое аккумулятора. Рассмотрим в качестве примера простейшую задачу, кото- рую в состоянии решить наш сумматор, — сложение пары чисел. Для ее решения вы заполняете массивы Данные и Коды такими значениями: 10h 20h 11h 0000h: Остановить FFh Загрузить Сложить Сохранить 4Ah B5h Данные Коды 0000h: Сумма В модернизированном сумматоре все команды, кроме Ос- тановить, занимают по 3 байта: 268 Глава семнадцатая 10h 00h 00h 00h 0000h: Сложить байт по адресу 0001h  и содержимое аккумулятора 20h Загрузить в аккумулятор  байт по адресу 0000h Коды 01h 11h Сохранить содержимое  аккумулятора по адресу 0002h 00h 02h FFh Остановить 0003h: 0006h: 0009h: За каждой командой, кроме Остановить, следуют два байта, указывающие 16-битовый адрес ячейки в массиве Данные. В данном случае это адреса 0000h, 0001h и 0002h. Чуть раньше я показал вам, как командами Сложить и Сло- жить с переносом найти сумму двух 16-битовых чисел — 76ABh и 232Ch. При этом младшие байты слагаемых мы дол- жны были записать в ячейки 0000h и 0001h, а старшие — в ячейки 0003h и 0004h. Результат сложения оказывался в ячей- ках 0002h и 0005h. С учетом нашего нововведения слагаемые и результат мож- но разместить в памяти более понятным способом, причем в той ее области, куда мы еще не забирались. 76h ABh Данные 4000h: Сюда запишется старший байт суммы 23h 2Ch Сюда запишется младший байт суммы 4002h: 4004h: 269 Автоматизация В таком порядке я разместил все числа исключительно для удобства. На самом деле они могут быть разбросаны по всем 64 К памяти в произвольном порядке. Для сложения чисел, сохраненных в указанных выше ячейках, в массив Коды мы должны ввести такие команды: 10h 40h 01h 40h 0000h: Сложить байт по адресу 4003h и содержимое аккумулятора 20h Загрузить в аккумулятор байт по адресу 4001h Коды Коды 03h 11h 40h 05h 10h 40h 00h 21h Загрузить в аккумулятор  байт по адресу 4000h Сложить с переносом  байт по адресу 4002h и  содержимое аккумулятора 40h 02h 11h Сохранить содержимое  аккумулятора  по адресу 4004h 40h 04h FFh Остановить 0003h: 0006h: 0009h: 000Ch: 000Fh: 0012h: Сохранить содержимое аккумулятора по адресу 4005h Сначала суммируются два младших байта, расположенные по адресам 4001h и 4003h, а их сумма записывается в ячейку 4005h. Старшие (из ячеек 4000h и 4002h) — суммируются командой Сложить с переносом, а сумма сохраняется по адресу 4004h. Теперь мы можем убрать команду Остановить и записать в массив Коды дополнительные команды. Во всех последующих вычислениях можно будет использовать как сами слагаемые, так и результат их суммирования, просто обращаясь к соот- ветствующим ячейкам памяти. Чтобы воплотить эту систему в жизнь, мы должны под- ключить к выходам массива Коды три 8-битовых защелки. В каждой будет храниться один из байтов 3-байтовой команды. В первую защелку попадет код команды, во вторую — стар- ший байт адреса, в третью — младший. Выход второй и тре- тьей защелок станет 16-битовым адресом ячейки в массиве Данные: 270 Глава семнадцатая Clk Clr Addr DO Пульт управления Пульт управления 16 8 8�битовая защелка 8�битовая защелка 8�битовая защелка 8 8 8 16 8 8 8 Коды Addr DO 8 DI 8 Дан� ные 16�битовый счетчик Clk W Clk Clk 64K × 8 RAM 64K × 8 RAM Процесс извлечения команды из памяти называется выбор- кой команды (instruction fetch). В нашем сумматоре каждая ко- манда занимает по 3 байта и извлекается из памяти побайто- во. Выборка одной команды занимает три цикла синхронизи- рующего сигнала, а полный командный цикл — четыре цикла синхронизирующего сигнала. Из-за этого система управляю- щих сигналов, конечно, усложнится. Слова «машина выполнила команду» подразумевают, что в машине реализованы некие действия, зашифрованные ко- дом команды. Это, разумеется, не означает, что машина живая и способна анализировать код, чтобы решить, что делать даль- ше. Назначение кода команды в том, чтобы генерировать уни- кальную последовательность управляющих сигналов, которые приводят к определенным последствиям. Обратите внимание, что расширение возможностей маши- ны отрицательно сказалось на ее быстродействии. При той же частоте вибратора она занимается сложением вчетверо доль- ше, чем исходная версия сумматора. Это следствие инженер- ного принципа «Бесплатных обедов не бывает», который оз- начает, что усовершенствование машины в одном отношении приводит к ее ухудшению в чем-то другом. Если бы вы в самом деле собирали эту машину из реле, большую часть схемы составляли бы, очевидно, два 64-кило- байтных массива памяти. Конечно, вы можете решить, что для начала вам вполне хватит двух массивов объемом по 1 кб, и 271 Автоматизация скорее всего так оно и есть. Но нельзя ли как-нибудь обойтись одним массивом? Вообще-то можно. Я разбил память на два массива — для данных и для кодов — с единственной целью: сделать архитектуру автоматического сумматора максималь- но простой и понятной. Но теперь, когда мы увеличили длину команд до 3 байтов, используя второй и третий байты для ука- зания адреса в памяти, надобность в двух отдельных массивах отпала. И коды, и данные можно хранить в одном и том же массиве. Для этого нам понадобится селектор 2 линии на 1, кото- рый будет определять способ адресации массива RAM. Один адрес, как и раньше, поступает на селектор с 16-битового счет- чика. Выход массива данных по-прежнему подключен к трем защелкам, в которых сохраняется код команды и сопровожда- ющие его два байта адреса. Этот 16-битовый адрес также по- дается на вход селектора. Когда в защелки записывается адрес, селектор пропускает его на адресный вход массива RAM: Clk Clr Addr DO Пульт управления Селектор «2 на 1» 16 16 16 8 8 8 8 8 16 8 8 8 8 DI Коды Дан� ные 16�битовый счетчик W Clk Clk Clk Sel 8�битовая защелка 8�битовая защелка 8�битовая защелка 64K × 8 RAM Как мы продвинулись! Теперь можно вводить команды и данные в один и тот же массив RAM. Вот как, например, мож- но сложить два 8-битовых числа и вычесть из суммы третье: 272 Глава семнадцатая 10h 00h 10h 00h 0000h: Сложить байт по адресу 0011h  и содержимое аккумулятора 20h Загрузить в аккумулятор байт  по адресу 0010h 11h 21h Вычесть байт по адресу 0012h  из содержимого аккумулятора 00h 12h 11h 00h 13h FFh Сохранить содержимое аккумулятора  по адресу 0013h Остановить ... 45h A9h 8Eh 000Ch: 0010h: Ячейка для окончательного  результата Как обычно, размещение команд начинается с адреса 0000h, так как именно с этого значения начинает считать 16-битовый счетчик. Заключительная команда Остановить находится в ячейке 000Ch. Три обрабатываемых числа и результат можно было разместить в памяти где угодно, кроме, конечно, первых 13 ячеек, занятых командами. Я решил занять для них ячейки, начиная с адреса 0010h. Теперь допустим, что вам понадобилось прибавить к ре- зультату еще два числа. Что ж, можно заменить только что введенные команды новыми. Но не исключено, что вы пред- почтете просто продлить уже введенную последовательность, заменив команду Остановить в ячейке по адресу 000Ch новой командой Загрузить. За ней последуют две команды Сложить, команда Сохранить и команда Остановить. Но вот беда — на- чиная с адреса 0010h, память занята данными. Придется пере- 273 Автоматизация двинуть их дальше, соответствующим образом отредактиро- вав команды, в которых эти данные используются. Да-а-а, думаете вы. Наверное, с объединением данных и кодов в одном массиве мы поторопились. Но уверяю вас, что проблема такого рода возникла бы рано или поздно в любом случае, поэтому мы должны ее решить. Попробуем, не сдви- гая старые данные, разместить новые команды, начиная с ад- реса 0020h, а новые данные — начиная с адреса 0030h: 10h 00h 13h 00h 0020h: Сложить байт по адресу 0030h  и содержимое аккумулятора 20h Загрузить в аккумулятор байт  по адресу 0013h 30h 20h 00h 31h 11h 00h 32h FFh Сохранить содержимое аккумулятора  по адресу 0032h Остановить 43h 2Fh 0030h: Ячейка для окончательного  результата ... Сложить байт по адресу 0031h  и содержимое аккумулятора Заметьте: первая команда Загрузить обращается по адресу 0013h, где сохранен результат предыдущего вычисления. Теперь память заполнена так: по адресу 0000h — команды, по адресу 0010h — данные, по адресу 0020h — опять команды, а по адресу 0030h — снова данные. Мы хотим, чтобы сумматор авто- матически выполнил все команды, начав работу с ячейки 0000h. Прежде всего нужно убрать из ячейки 000Ch команду Ос- тановить. Проблема в том, что записанная по этому адресу 274 Глава семнадцатая величина будет интерпретироваться как код команды. Та же судьба постигнет и величину в ячейке, отстоящей от 000Ch на 3 байта, т. е. 000Fh, а также и в следующих ячейках с 3-байто- вым интервалом — 0012h, 0015h, 0018h, 001Bh и 001Eh. Что если один из этих байтов случайно окажется равен 11h — коду команды Сохранить, а два байта за ним — 00h и 23h? Машина послушно запишет содержимое аккумулятора в ячейку с ад- ресом 0023h. Но эта ячейка содержит важную для нас инфор- мацию! Даже если ничего подобного и не случится, нас все рав- но ждут неприятности. С точки зрения машины, следующая за 001Eh команда расположена в ячейке 0021h, а не 0020h, где она находится на самом деле. Все согласны с тем, что нельзя просто убрать из ячейки 000Ch команду Остановить и уповать на лучшее? Мы должны заменить ее на новую команду, а именно коман- ду Перейти, которую уже давно пора включить в наш репертуар. Команда Код Загрузить 10h Сохранить 11h Сложить 20h Вычесть 21h Сложить с переносом 22h Вычесть с заимствованием 23h Перейти 30h Остановить FFh Обычно адресация ячеек в автоматическом сумматоре проис- ходит последовательно. Команда Перейти позволяет нарушить это правило. После ее выполнения адресация массива RAM начинается с нового адреса. Команды такого рода называют еще командами ветвления (branch). В нашем примере командой Перейти нужно заменить команду Остановить в ячейке 000Ch: 30h 00h 20h 000Ch: Перейти к команде по адресу 0020h 275 Автоматизация Величина 30h — это код команды Перейти. За ней располага- ется 16-битовый адрес ячейки, где содержится следующая команда, которую должен выполнять сумматор. В нашем примере в начале работы сумматор выполняет команду в ячейке 0000h — Загрузить. Затем исполняются команды Сложить, Вычесть и Сохранить. Следующая — Пе- рейти — заставляет сумматор прервать эту последовательность и перейти к команде в ячейке 0020h. Это команда Загрузить, за которой следуют Сложить, Сложить, Сохранить и наконец Остановить. Команда Перейти действует на 16-битовый счетчик. Вся- кий раз, когда она встречается в последовательности команд, на выходе счетчика должен появляться стоящий в ней адрес. Это осуществляется с помощью входов Pre и Clr триггера D-типа со срабатыванием по фронту, Q D Clk Q Pre Clr который, как вы помните, является основным компонентом счетчика. Обычно входы Pre и Clr равны 0. Если сигнал Pre равен 1, в 1 обращается и сигнал Q. Если 1 равен сигнал Clr, сигнал Q обращается в 0. Чтобы записать в триггер новое значение (будем называть его А — адрес), его нужно включить в такую схему: Q Сброс D Clk Q Pre Clr Задать A 276 Глава семнадцатая Как правило, сигнал Задать равен 0. В этом случае вход Pre триггера также равен 0. Если сигнал Сброс не равен 1, нулю равен и сигнал Clr. Вход Сброс нужен, чтобы триггер можно было очистить независимо от значения сигнала Задать. Если сигнал Задать равен 1 и сигнал А тоже равен 1, сигнал Pre об- ратится в 1, а Clr — в 0. Если сигнал А равен 0, сигнал Pre обра- тится в 0, а Clr — в 1. Иными словами, значение выхода Q со- впадает со значением на входе A. В 16-битовом счетчике нам понадобится 16 таких схем. За- грузите в счетчик новое значение, и он будет считать, начиная с него. Других серьезных изменений в схеме пока нет. 16-битовый адрес, переписанный из памяти в защелки, подается как на вход селектора «2 на 1» (откуда он попадает на адресный вход мас- сива RAM), так и на вход 16-битового счетчика. Clk Clr Addr DO Пульт управления Селектор «2 на 1» 16 16 16 8 8�битовая защелка 8�битовая защелка 8�битовая защелка 8 8 8 8 16 8 8 8 8 DI Коды Дан� ные Задать Сброс 16 Sel 16�битовый счетчик W Clk Clk Clk 64K × 8 RAM Разумеется, сигнал должен обращаться в 1 лишь при выпол- нении двух условий: код команды равен 30h и адрес перехода сохранен в защелках. Команда Перейти очень полезна. Но несравненно полез- нее команда, осуществляющая переход лишь при выполнении определенного условия. Такой переход называется условным 277 Автоматизация (conditional jump). Чтобы проиллюстрировать его необходи- мость, зададимся простым вопросом: способен ли наш сумма- тор перемножить два 8-битовых числа, например, A7h и 1Ch? Произведение двух 8-битовых чисел является 16-битовым числом. Для простоты будем считать, что 16-битовыми явля- ются и сомножители. Для начала решим, куда поместить ис- ходные числа и их произведение. 00h A7h 00h 00h 1000h: 16�битовый сомножитель 1Ch 16�битовый сомножитель 00h 1002h: 1004h: 16�битовое произведение разместится здесь и здесь В десятичном счислении 1Ch равно 28. Нет нужды доказы- вать вам, что умножение A7h на 1Ch равносильно сложению 28 чисел A7h. Поэтому в ячейках 1004h и 1005h на самом деле будет размещен 16-битовый результат этих многократных сло- жений. Вот как выглядит набор кодов для размещения по это- му адресу первой суммы: 10h 10h 05h 10h 0000h: Сложить байт по адресу 1001h и содержимое  аккумулятора 20h Загрузить  в аккумулятор байт  по адресу 1005h 01h 11h Сохранить содержимое аккумулятора  по адресу 1005h 10h 05h 10h 10h 04h 22h Сложить байт по адресу 1000h и содержимое аккумулятора Сохранить содержимое аккумулятора по адресу  1004h 04h 00h 11h 10h 0012h: 10h ... Загрузить в аккумулятор  байт по адресу 1004h 0003h: 0006h: 000Fh: 000Ch: 0009h: В начале работы ячейки 1004h и 1005h содержат нули. После выполнения шести этих команд размещенное в них 16-бито- 278 Глава семнадцатая вое значение равно A7h умножить на 1. Чтобы в ячейках 1004h и 1005h оказалось нужное значение, ту же последовательность кодов следует исполнить еще 27 раз. Достичь этого можно, скопировав последовательность 27 раз, начиная с адреса 0012h, или же разместить по этому адресу команду Остановить и 28 раз нажать кнопку Сброс. Конечно, и тот, и другой вариант на практике использо- вать неудобно. В обоих случаях от вас требуется некое действие: ввести набор кодов или нажать кнопку Сброс, причем ровно столько раз, на сколько нужно умножить число. Один-два раза — куда ни шло, но перемножать числа таким способом всю жизнь охотников найдется немного. А что если разместить по адресу 0012h команду Перейти? После ее выполнения счетчик снова начнет счет с 0000h: 30h 00h 00h 0012h: Перейти к команде по адресу 0000h Вроде бы то, что нужно. После первого выполнения кодов ячейки 1004h и 1005h содержат значение, равное произведе- нию A7h и 1. Затем команда Перейти осуществляет переход к началу фрагмента, и после следующего его выполнения в ячей- ках 1004h и 1005h содержится число A7h, умноженное на 2. В конце концов машина доберется и до произведения A7h и 1Ch, но, увы, в нужный момент не остановится! Мы хотим, чтобы команда Перейти срабатывала только нуж- ное число раз, т. е. совершала условный переход. Добиться это- го на самом деле не так сложно. Для начала добавим в схему 1- битовую защелку, похожую на защелку для переноса, и назо- вем ее нулевой защелкой, так как ее содержимое будет равняться 1, только если все выходы 8-битового сумматора равны 0. Флажок нуля DI Clk DO Clr 8�битовый сумматор 279 Автоматизация Выход 8-входового вентиля ИЛИ-НЕ равен 1, только если все входы равны 0. Как и в защелке для переноса, синхронизиру- ющий сигнал Clk в нулевой защелке вызывает запоминание входного сигнала только при выполнении команд Сложить, Вычесть, Сложить с переносом и Вычесть с заимствованием. Величина, хранимая в нулевой защелке, называется флажком нуля (Zero flag). Не запутайтесь: флажок нуля равен 1, если все выходы сумматора равны 0; флажок нуля равен 0, если на не- которых выходах сумматора имеются 1. Защелка для переноса и нулевая защелка позволяют рас- ширить набор доступных действий на 4 команды. Команда Код Загрузить 10h Сохранить 11h Сложить 20h Вычесть 21h Сложить с переносом 22h Вычесть с заимствованием 23h Перейти 30h Перейти если 0 31h Перейти если перенос 32h Перейти если не 0 33h Перейти если не перенос 34h Остановить FFh Например, команда Перейти если не 0 вызывает переход на заданный адрес, только если выход нулевой защелки равен 0. Иначе говоря, перехода не будет, если результат последней команды Сложить, Вычесть, Сложить с переносом или Вычесть с заимствованием равен 0. Для реализации этой команды дос- таточно расширить набор управляющих сигналов, применяе- мых для обычной команды Перейти. При выполнении коман- ды Перейти если 0 сигнал Задать 16-битового счетчика уста- навливается в 1, только если флажок нуля равен 0. Имеющегося в нашем распоряжении набора команд хва- тит для написания кодов, умножающих одно число на другое: 280 Глава семнадцатая 10h 10h 03h 00h 0012h: Сложить байт по адресу 001Eh  и содержимое аккумулятора 20h Загрузить в аккумулятор байт  по адресу 1003h 1Eh 11h Сохранить содержимое аккумулятора  по адресу 1003h 10h 03h 33h 00h 00h FFh Остановить 001Eh: Перейти к команде по адресу 0000h,  если флажок нуля не равен 1 0015h: 0018h: 001Bh: Как мы уже установили, к началу этого фрагмента в ячейках 0004h и 0005h содержится 16-битовое число A7h, умноженное на 1. Первая команда фрагмента загружает в аккумулятор число из ячейки 1003h, т. е. 1Ch. Оно складывается с содержимым ячейки 001Eh. Да, в ячейке 001Eh записан код команды Оста- новить, но это не мешает ему быть и просто обычным чис- лом. Сложить FFh и 1Ch — это все равно что вычесть из 1Ch единицу. В результате получается 1Bh. Это не 0, поэтому фла- жок нуля равен 0. Число 1Bh записывается обратно в ячейку 1003h. Далее следует команда Перейти если не 0. Поскольку результат действительно не равен 0, условие перехода соблю- дается, и следующей будет выполнена команда по адресу 0000h. Не забывайте: команда Сохранить на значение флажка нуля не влияет. Он задается лишь при выполнении команд Сложить, Вычесть, Сложить с переносом и Вычесть с заимствованием и сохраняет значение до следующего выполнения одной из этих команд. При втором выполнении фрагмента ячейки 0004h и 0005h содержат произведение числа A7h на 2. Число 1Bh прибавля- ется к FFh, и получается 1Ah. Это не 0, поэтому вновь проис- ходит возвращение к началу. 281 Автоматизация На 28-й раз ячейки 0004h и 0005h содержат произведение чисел A7h и 1Ch. По адресу 1003h хранится число 1. Его сумма с числом FFh равна 0, и флажок нуля наконец-то устанавливает- ся в 1! Условие команды Перейти если не 0 не выполняется, пе- рехода нет, и следующей командой становится Остановить. Есть! Наступает великий миг: я утверждаю, что собранное нами устройство может с полным правом именоваться компьютером! Очень примитивным, но компьютером. Его ключевое свойство — наличие команды условного перехода. Именно возможность управляемых циклических процедур отличает компьютер от калькулятора. Я только что продемонстрировал, как наша ма- шина с помощью условного перехода умножила одно число на другое. Подобным образом можно осуществить и деление. Да- лее, действие нашей машины не ограничено 8-битовыми чис- лами. Она способна складывать, вычитать, умножать и делить 16-битовые, 24-битовые, 32-битовые числа и числа большей разрядности. А значит, ей подвластны квадратные корни, лога- рифмы и тригонометрические функции. Раз уж мы собрали компьютер, пора начать говорить о нем, как о компьютере. Разработанное нами устройство относится к цифровым (digital) компьютерам, поскольку работает с дискретными циф- рами. Это отличает его от аналоговых (analog) компьютеров, которые существовали некоторое время назад, а сейчас прак- тически исчезли. Напомню: дискретными называются данные, способные принимать лишь набор фиксированных значений. Аналоговые данные непрерывны и могут принимать любое значение из заданного интервала. Цифровой компьютер состоит из 4 основных компонен- тов: процессора, памяти, минимум одного устройства ввода и минимум одного устройства вывода. В нашей машине память состоит из 64-килобайтового массива RAM. Роль устройств ввода и вывода играют ряды переключателей и лампочек на пульте управления памятью. Они позволяют нам (исполняю- щим в этом шоу роли людей) вводить в память числа и про- сматривать результаты вычислений. Все остальное — процессор (processor) или, как его еще называют, центральное процессорное устройство (Central Processor Unit) — ЦПУ (CPU). Процессор часто называют моз- гом компьютера, но я стараюсь не прибегать к подобным срав- 282 Глава семнадцатая нениям, поскольку лично мне собранная схема мозг не напо- минает. В наши дни часто приходится слышать слово микро- процессор. Это тот же процессор, только маленький-малень- кий, благодаря изобретениям, о которых я расскажу в главе 18. К нашему релейному детищу приставка «микро» вряд ли подходит! Процессор, который мы собрали, является 8-разрядным. 8 битам равна ширина аккумулятора и большинства каналов данных. Из 16 битов состоит только адрес в массиве RAM. Если бы он был 8-битовым, мы могли бы адресовать не 65 536, а лишь 256 байтов — тут не разгуляешься. Процессор тоже состоит из нескольких компонентов. Я уже неоднократно упоминал аккумулятор — защелку для хране- ния чисел внутри процессора. 8-битовый инвертор и 8-бито- вый сумматор вместе составляют арифметико-логическое ус- тройство (Arithmetic Logic Unit) — АЛУ (ALU). В нашем слу- чае оно способно выполнять только арифметические действия, а именно сложение и вычитание. В несколько более сложных компьютерах (с которыми мы еще познакомимся) арифмети- ко-логическое устройство выполняет также логические опера- ции — И, ИЛИ и исключающее ИЛИ. 16-битовый счетчик на- зывается программным счетчиком (program counter). Наш компьютер состоит из реле, проводов, переключате- лей и лампочек. Все вместе они называются аппаратным обес- печением (hardware) компьютера. Команды и другие числа, которые мы вводили в память, составляют его программное обеспечение (software). В разговорах о компьютерах программное обеспечение обычно называют просто программами, а процесс их создания — программированием. Придумывая набор команд, которые позволили бы нашему компьютеру умножать одно число на другое, именно программированием я и занимался. Обычно в компьютерных программах различают код (code), т. е. собственно команды, и данные (data), т. е. числа, с которы- ми работает код. Иногда это различие не столь очевидно. На- пример, в разобранном нами примере код команды Остано- вить одновременно играет роль числа –1. Коды команд (на- пример, 10h для команды Загрузить), на основании которых процессор выполняет то или иное действие, называются ма- шинными кодами или машинным языком. Слово «язык» впол- 283 Автоматизация не оправданно, так как именно с помощью кодов человек «объясняет» машине, что она должна сделать. До сих пор я называл команды, выполняемые машиной, довольно длинными словами и целыми фразами, например, Сложить с переносом. Но на практике для обозначения команд используют двух- трехбуквенные английские сокращения — мнемонические коды, — записываемые прописными буквами. Вот как может выглядеть набор мнемокодов для нашего ком- пьютера. Команда Английское название Код Мнемокод Загрузить Load 10h LOD Сохранить Store 11h STO Сложить Add 20h ADD Вычесть Subtract 21h SUB Сложить Add with Carry 22h ADC с переносом Вычесть Subtract with Borrow 23h SBB с заимство- ванием Перейти Jump 30h JMP Перейти Jump If Zero 31h JZ если 0 Перейти Jump If Carry 32h JC если перенос Перейти Jump If Not Zero 33h JNZ если не 0 Перейти Jump If Not Carry 34h JNC если не перенос Остановить Halt FFh HLT Удобство мнемокодов станет более очевидным, если мы присовокупим к ним еще пару обозначений. Например, усло- вимся писать вместо многословной инструкцию «Загрузить в аккумулятор байт по адресу 1003h» короткое выражение: LOD A,[1003h] 284 Глава семнадцатая Обозначения A и [1003h], стоящие справа от мнемокода, на- зываются аргументами. Аргументы конкретизируют выпол- нение команды. Например, в команде Загрузить они указыва- ют, куда (аргумент слева) следует загрузить данные (А означа- ет аккумулятор) и откуда (аргумент справа) их следует извлечь. Квадратные скобки означают, что в аккумулятор надлежит заг- рузить не число 1003h, а содержимое ячейки памяти по адресу 1003h. Подобным же образом инструкцию «Сложить байт по ад- ресу 001Eh и содержимое аккумулятора» можно сократить до: ADD A,[001Eh] а инструкцию «Сохранить содержимое аккумулятора по адре- су 1003h» — до: STO [1003h],A Заметьте: в команде STO мы также слева указываем, куда со- храняются данные, и справа — откуда они извлекаются: со- держимое аккумулятора записывается в ячейку 1003h. Нако- нец, команда «Перейти к команде по адресу 0000h, если фла- жок нуля не равен 1» превращается в краткое указание: JNZ 0000h Здесь квадратные скобки не применяются, поскольку переход всегда осуществляется только по адресу. Числом аргумент этой команды быть не может. С учетом всех обозначений команды удобно записывать в столбик, причем обводить их рамками уже не нужно; они и без этого прекрасно читаются. Адрес, по которому хранится команда (точнее, ее первый байт), мы будем указывать шест- надцатеричными числом с двоеточием: 0000h:LOD A,[1005h] А вот так будут обозначаться записанные в память данные: 1000h:00h, A7h 1002h:00h, 1Ch 1004h:00h, 00h Перечисление байтов через запятую означает, что первый байт записан в ячейке, адрес которой указан слева, а второй байт — 285 Автоматизация в следующей за ней ячейке. Эти три строчки можно было бы заменить одной: 1000h:00h, A7h, 00h, 1Ch, 00h, 00h Целиком программа для умножения выглядит так: 0000h: LOD A,[1005h] ADD A,[1001h] STO [1005h],A LOD A,[1004h] ADC A,[1000h] STO [1004h],A LOD A,[1003h] ADD A,[001Eh] STO [1003h],A JNZ 0000h 001Eh: HLT 1000h: 00h, A7h 1002h: 00h, 1Ch 1004h: 00h, 00h Пробелы и пустые строки расставлены здесь с единственной целью — сделать программу более понятной. При написании кодов численные значения адресов лучше не использовать, так как они могут измениться. Если вы, на- пример, решите хранить данные, начиная с адреса 2000h, а не 1000h, вам придется переписывать многие команды. Для обо- значения ячеек памяти предпочтительнее пользоваться мет- ками (labels): BEGIN: LOD A,[RESULT + 1] ADD A,[NUM1 + 1] STO [RESULT + 1],A LOD A,[RESULT] ADC A,[NUM1] STO [RESULT],A 286 Глава семнадцатая LOD A,[NUM2 + 1] ADD A,[NEG1] STO [NUM2 + 1],A JNZ BEGIN NEG1: HLT NUM1: 00h, A7h NUM2: 00h, 1Ch RESULT: 00h, 00h Метки NUM1, NUM2 и RESULT ссылаются на ячейки, храня- щие по 2 байта. В приведенной выше программе выражения NUM1 + 1, NUM2 + 1 и RESULT + 1 ссылаются на второй байт соответствующей метки. Обратите внимание на метку NEG1 у команды HLT: она означает «negative one», т. е. «минус один». Наконец, на случай, если вы забудете, зачем нужна та или иная команда, в программе предусмотрены комментарии. Они пишутся на простом человеческом языке и отделяются от кода точкой с запятой: BEGIN: LOD A,[RESULT + 1] ADD A,[NUM1 + 1] ; Сложить младшие байты STO [RESULT + 1],A LOD A,[RESULT] ADC A,[NUM1] ; Сложить старшие байты STO [RESULT],A LOD A,[NUM2 + 1] ADD A,[NEG1] ; Уменьшить число на 1 STO [NUM2 + 1],A JNZ BEGIN NEG1: HLT NUM1: 00h, A7h NUM2: 00h, 1Ch RESULT: 00h, 00h 287 Автоматизация Язык программирования такого типа называется языком ас- семблера (assembly language). Это своеобразный компромисс между бессловесными машинными кодами и многословными командами на «человеческом» языке, дополненный текстовы- ми ссылками на ячейки памяти. Язык ассемблера и машинные коды часто путают, поскольку это просто различные способы представления одной и той же программы. Каждому оператору языка ассемблера соответствует определенный числовой код. Если бы вам пришлось писать программу для компьютера, разработанного в этой главе, вы, наверное, предпочли бы сна- чала написать ее на языке ассемблера (и на бумаге). Затем, когда вы решили бы, что программа в основном написана и готова к тестированию, вам пришлось бы вручную ассемблировать ее, т. е. переводить операторы ассемблера в соответствующие чис- ловые машинные коды, опять же на бумаге. Далее машинные коды вводились бы в память компьютера с помощью переклю- чателей, и программу можно было бы запускать, т. е. указать компьютеру выполнить все составляющие ее команды. После знакомства с концепцией программирования самое время поговорить об ошибках. Совершать их при написании программ, особенно, в машинных кодах, очень легко. Нехо- рошо, конечно, когда в программе используются неверные числа. Но что если с ошибкой вы введете код команды, напри- мер, наберете с помощью переключателей 11h (код команды Сохранить) вместо 10h (код команды Загрузить)? Компьютер не только не выполнит нужное действие, т. е. не загрузит чис- ло в аккумулятор, но и выполнит ненужное — запишет по- верх этого числа теперешнее содержимое аккумулятора. Последствия некоторых ошибок бывают непредсказуемы, например, когда по адресу, указанному в команде Перейти, отсутствует корректный код команды или когда командой Со- хранить в ячейку с кодом команды по ошибке записывается число. Произойти в таких случаях может (и происходит) все что угодно. Ошибка имеется даже в моей программе для умножения. Если вы запустите ее во второй раз, она умножит A7h на 256 и запишет результат поверх уже посчитанного произведения. Причина понятна: после первого выполнения программы в ячейке 1003h записан 0. Запустите программу еще раз, и к нему будет прибавлено число FFh. Результат не равен 0, поэтому выполнение программы продолжится. 288 Глава семнадцатая Мы убедились, что наша машина умеет умножать, а зна- чит, и делить. Я заявил также, что эти простейшие операции позволяют находить корни, логарифмы и тригонометричес- кие функции. На аппаратную часть компьютера возлагаются три обязанности: сложение, вычитание и условный переход. Как говорят программисты: «Для остального напишем про- грамму». Конечно, программа эта может оказаться очень сложной. Об алгоритмах решения конкретных вычислительных задач написано множество книг. Но нам пока рано задумываться об этом. Мы ведь до сих пор ограничивались целыми числами, не взяв на себя смелость подумать о дробях. Но мы еще вер- немся к ним — в главе 23. Я несколько раз говорил о том, что все приборы, нужные для сборки компьютера, изобретены более 100 лет назад. Но это, конечно, не означает, что уже тогда создание подобного устройства было возможно. Многие принципы, рассмотрен- ные нами в этой главе, даже в эпоху появления первых релей- ных компьютеров (в 1930-е годы) все еще не были известны. Додуматься до них люди смогли лишь в середине XX в. До того времени многие изобретатели, например, упорно пытались создать устройства, работающие не с двоичными, а с десятич- ными числами. Не сразу оформилась и идея совместного хра- нения кода и данных. Часто предпочитали вводить програм- му в компьютер по мере ее выполнения с помощью перфо- ленты. С памятью на заре компьютерной эры вообще были большие трудности. Сборка 64 К памяти из 5 млн. реле сто лет назад была такой же абсурдной задачей, как и сейчас. Настало время немного оторваться от практических упраж- нений и коротко познакомиться с историей появления счет- ных устройств и машин. Не исключено, что в конце концов окажется, что мы напрасно возились с нашим релейным ком- пьютером. В главе 12 я уже говорил, что на смену реле при- шли вакуумные лампы и транзисторы. Мы узнаем также, что за это время люди научились делать разработанные нами про- цессор и память совсем-совсем миниатюрными. Глава 18 От счетов к микросхемам На протяжении писаной истории человечество изобрело не- мало хитроумных приспособлений и машин в непрерывном стремлении хоть немного облегчить математические вычис- ления. Хотя человеческий род с рождения наделен способнос- тью к счету, в вычислениях нам требуется помощь. Зачастую мы способны формулировать такие сложные задачи, что ре- шить их самостоятельно нам не по силам. Развитие систем счисления можно рассматривать как пер- вое средство для облегчения управления недвижимостью и собственностью. По-видимому, для счета многие культуры, в том числе древние греки и американские индейцы, использо- вали камешки. В Европе это привело к появлению счетных досок, а на востоке — к изобретению счетов. 290 Глава восемнадцатая Хотя появление счетов обычно связывают с азиатскими культу- рами, торговцы в Китае пользовались ими уже в 1200 г. до н. э. Умножение и деление никому и никогда не доставляли ис- тинного удовольствия, но внести свой вклад в решение этой проблемы сумели немногие. В числе этих немногих — шот- ландский математик Джон Непер (1550–1617), который как раз для упрощения этих операций изобрел логарифмы. Произве- дение двух чисел попросту равно сумме их логарифмов. По- этому, чтобы перемножить два числа, вы находите в таблице их логарифмы, складываете их, а затем ищете в таблице чис- ло, логарифм которого равен полученной сумме. Это и есть искомое произведение. На протяжении последующих 400 лет одни лучшие умы человечества строили таблицы логарифмов, другие — изоб- ретали приспособления, которые позволяли бы обходиться без этих таблиц. Долгая история логарифмической линейки нача- лась со счетной линейки, изобретенной Эдмундом Гюнтером (1581–1626), усовершенствованной Вильямом Отредом (1574– 1660), и практически закончилась в 1976 г., когда компания Keuffel & Esser презентовала последнюю изготовленную ею логарифмическую линейку Смитсоновскому институту в Ва- шингтоне (США). Непер изобрел и другое приспособление для умножения, состоявшее из рядов чисел, выгравированных на кости, роге или слоновой кости. Потому это приспособление иногда на- зывали костями Непера. Первая механическая счетная маши- на, созданная приблизительно в 1620 г. Вильгельмом Шикар- дом (1592–1635), была в некоторой степени автоматизирован- ным вариантом костей Непера. Примерно в то же время по- явились и механические калькуляторы, состоящие из зацеп- ляющихся колес и рычагов. Из наиболее известных создате- лей механических счетных устройств упомянем философов и математиков Блеза Паскаля (1623–1662) и Готфрида Вильгель- ма Лейбница (1646–1716). Вы, без сомнения, помните, сколько хлопот доставила нам реализация переноса бита в следующий разряд как в исход- ном 8-разрядном сумматоре, так и в компьютере, который (сре- ди прочего) автоматически складывал числа шириной более 8 битов. На первый взгляд, перенос кажется лишь незначитель- ным нюансом процесса сложения, но в суммирующих маши- 291 От счетов к микросхемам нах он в действительности является главной проблемой. Со- здав суммирующую машину, которая делает все, кроме пере- носа, вы не создали почти ничего! Способность переносить числа из разряда в разряд — глав- ный критерий в оценке счетных устройств. Так, в машине Пас- каля перенос осуществлялся так, что машина не могла вычи- тать. Чтобы вычесть одно число из другого приходилось при- бавлять дополнение до девяти примерно так, как я описал в главе 13. «Нормальные» механические калькуляторы, которые можно было эффективно использовать в повседневной рабо- те, появились лишь в конце XIX в. Приблизительно в 1801 г. появилось занятное изобретение, которое позже сказалось на истории вычислительной техники и оказало громадное влияние на текстильную промышлен- ность, — автоматический ткацкий станок Жозефа Мари Жак- карда (1752–1834). В «машине Жаккарда» узор, вышиваемый на ткани, задавался с помощью металлических пластин с про- битыми отверстиями. Высшим достижением Жаккарда стал его черно-белый автопортрет, вытканный на шелке и закоди- рованный на 10 000 пластин. В XVIII в. (и вплоть до 40-х годов XX в.) компьютером (computer) назывался человек, нанятый специально для про- ведения вычислений. Спрос на таблицы логарифмов был вы- сок, а для проведения навигационных и астрономических рас- четов требовались еще и таблицы тригонометрических функ- ций. Человек, желавший опубликовать новый набор таблиц, нанимал компьютеров, организовывал их работу, а потом со- бирал воедино все результаты. Естественно, на всех этапах ра- боты — от вычислений до набора таблиц в типографии — в них вкрадывались ошибки. Стремление избавиться от ошибок в математических табли- цах побудило к работе Чарльза Бэббиджа (1791–1871), британско- го математика, жившего почти в то же самое время, что и Сэмюэль Морзе. В то время при создании таблиц логарифмов на самом деле лога- 292 Глава восемнадцатая рифмы всех чисел в таблице не вычислялись (на это ушло бы слишком много времени). Их рассчитывали лишь для неко- торых чисел, а логарифмы остальных чисел вычислялись с помощью интерполяции. Расчеты при этом оказывались до- вольно простыми и выполнялись с помощью разностей (differences). Около 1820 г. Бэббидж решил, что способен спроектировать и построить машину, которая автоматизирует создание мате- матических таблиц вплоть до их верстки, полностью устранив все ошибки. Задуманная им Машина Разностей (Difference Engine) была в действительности большой механической сум- мирующей машиной. Многозначные десятичные числа пред- ставлялись зубчатыми колесами, каждое из которых могло на- ходиться в одном из десяти положений. Отрицательные числа обрабатывались с помощью дополнений до 10. Хотя первые модели показали перспективность проекта Бэббиджа и он даже получил какие-то деньги от британского правительства (впро- чем, недостаточные), Машина Разностей так и не была постро- ена. В 1833 г. Бэббидж прекратил работу над ней. К этому времени у него появилась лучшая идея. Он назвал этот проект Аналитической Машиной (Analytical Engine) и про- работал над ней до самой смерти, постоянно перерабатывая кон- струкцию (в «железе» были созданы лишь небольшие модели и отдельные компоненты). В конструкцию Бэббиджа входило хра- нилище (концептуально подобное компьютерной памяти) и «мельница» (арифметическое устройство). Умножение выпол- нялось с помощью повторных сложений, а деление — с помо- щью повторных вычитаний. Самый занимательный аспект про- екта Аналитической Машины в том, что ее можно было про- граммировать с помощью карточек, идею которых Бэббидж позаимствовал у Жаккарда. Августа Ада Байрон графиня Лав- лейс (1815–1852) высказалась об этом так (в заметках к ее пере- воду статьи, написанной об Аналитической Машине Бэббиджа итальянским математиком): «Можно сказать, что Аналитичес- кая Машина вышивает алгебраические узоры, подобно тому, как станок Жаккарда вышивает цветы и листья». По-видимому, Бэббидж был первым человеком, осознав- шим важность условных переходов в программировании. Сно- ва процитируем Аду Байрон: «Цикл операций нужно понимать как любой набор операций, который выполняется более одного 293 От счетов к микросхемам раза. Цикл является таковым независимо от того, повторяется он дважды или неопределенное число раз; поскольку циклом его делает сам факт повторения. Во многих задачах встреча- ются вложенные группы одного или нескольких циклов, т. е. циклы циклов». Хотя в 1853 г. машина разностей была наконец построена Георгом и Эдуардом Шуцами (отцом и сыном), об изобрете- ниях Бэббиджа на многие годы позабыли и вспомнили опять лишь в 1930-е годы, когда люди начали интересоваться корня- ми современной вычислительной техники. К тому времени все, сделанное Бэббиджем, уже устарело. Ему нечего было предло- жить компьютерному инженеру XX в., кроме замечательного предвидения автоматизации. Вторым верстовым столбом истории вычислительной тех- ники мы обязаны Конституции Соединенных Штатов Амери- ки. Среди прочего в ней говорится, что каждые 10 лет в США проводится перепись населения. В перепись 1880 г. включа- лась информация о возрасте, поле и национальности. На об- работку и обобщение данных ушло 7 лет. Опасаясь, что обработка переписи 1890 г. займет больше 10 лет, Бюро переписей исследовало возможность ее автома- тизации и остановилось на разра- ботке Германа Холлерита (Herman Hollerith) (1860–1929), который участвовал в обработке переписи 1880 г. в качестве статистика. Суть проекта Холлерита заклю- чалась в использовании картонных карточек 6 5/8 � 3 1/4 дюйма (Хол- лерит скорее всего не слышал о программировании с помощью карточек Аналитической Машины Бэббиджа, но почти несомненно знал об использовании пластин в ткацком станке Жаккарда). Для отверстий на каждой карточке было предусмотрено 288 позиций — 24 столбца по 12 пози- ций в каждом. Эти позиции обозначали определенные харак- теристики человека, опрашиваемого в ходе переписи. Полу- чив ответ на вопрос, переписчик пробивал в соответствующей позиции карточки отверстие диаметром в четверть дюйма. 294 Глава восемнадцатая Эта книга, вероятно, уже настолько приучила вас мыслить в терминах двоичных кодов, что вы сразу сообразили: карточ- ка с 288 позициями может хранить 288 битов информации. Однако до этого не доходило. Например, если бы в переписи применялась чисто двоич- ная система кодирования, на карточке для обозначения пола нужна была бы всего одна позиция (пробита — мужской, не пробита — женский или наоборот). Но на карточках Холле- рита для пола было предусмотрено две позиции. В одной от- верстие пробивали для мужчин, в другой — для женщин. Два отверстия пробивалось для записи возраста опрашиваемого. Первое означало пятилетний интервал: от 0 до 4, от 5 до 9, от 10 до 14 и т. д. Второе отверстие пробивалось в одной из пяти возможных позиций и указывало точный возраст в пределах 5-летнего интервала. Всего на карточке для кодирования воз- раста использовалось 28 позиций. В чисто двоичной системе для кодирования любого возраста от 0 до 127 лет требуется всего 7 позиций. Вряд ли стоит обвинять Холлерита в том, что в кодирова- нии информации он не «дошел» до двоичной системы. Нельзя требовать от переписчиков 1890 г. умения преобразовывать возраст в двоичный формат. Карточки с отверстиями не мог- ли быть двоичными и по практическим причинам. При дво- ичном кодировании возможны ситуации, когда пробиты дол- жны быть все (или почти все) отверстия. Весьма вероятно, что карточка при этом превратится в лохмотья. Данные переписи должны обобщаться в виде, удобном для вычислений, т. е. в виде таблиц. Важно, конечно, знать, сколько человек живет в том или ином районе, но иногда нужны све- дения и о том, как население распределяется по возрастам. Для проведения таких расчетов Холлерит создал табулирующую машину, в которой сочетались автоматизация и ручное управ- ление. Оператор прижимал к каждой карточке пресс с 288-ю штырьками на пружинах. В тех позициях, где на карточке было отверстие, штырек погружался в кювету с ртутью, замыкая электрическую цепь, которая приводила в действие электро- магнит. Он в свою очередь увеличивал на единицу значение десятичного счетчика. Электромагниты Холлерит применил и в машине, сортиро- вавшей карточки. Допустим, вы хотите статистически проана- 295 От счетов к микросхемам лизировать возрасты представителей различных профессий. Для этого нужно сначала отсортировать карточки по профессиям, а потом в каждой группе провести анализ возрастов. В сортиру- ющей машине использовался такой же пресс, как и в табулято- ре, а электромагниты применялись для того, чтобы открывать задвижки на одном из 26 отделений. Оператор опускал карточ- ку в отделение и вручную закрывал задвижку. Эксперимент по автоматизации переписи 1890 г. закончил- ся полным успехом. Всего было обработано 62 000 000 карто- чек. Данных в них содержалось вдвое больше, чем в переписи 1880 г., а времени на обработку ушло втрое меньше. О Холле- рите и его изобретениях заговорили во всем мире. В 1895 г. он даже ездил в Россию и продал свое оборудование для исполь- зования в первой российской переписи, проведенной в 1897 г. Герман Холлерит положил начало длинной цепи событий. В 1896 г. он основал компанию Tabulated Machine, которая сда- вала напрокат и продавала оборудование для работы с карточ- ками. В 1911 г. после пары слияний она превратилась в компа- нию Computing-Tabulating-Recording (C-T-R). С 1915 г. прези- дентом компании C-T-R был Томас Ватсон (Thomas Watson) (1874–1956). В 1924 г. он переименовал ее в корпорацию International Business Machines, или просто IBM. К 1928 г. карточки переписи 1890 г. окончательно превра- тились в знаменитые перфокарты IBM с 80 столбцами и 12 строками. Они активно применялись в течение 50 лет и даже на закате своей эпохи иногда назывались картами Холлерита. К ним я еще вернусь в главах 20, 21 и 24. Нам пора перебираться в XX век, но мне не хотелось бы покидать век XIX, не убедившись, что у вас осталось правиль- ное впечатление об этой эпохе. По очевидным причинам в этой книге я в основном уделил внимание изобретениям, цифро- вым по своей природе: телеграфу, азбуке Брайля, машинам Бэббиджа и картам Холлерита. Имея дело только с цифровы- ми понятиями и устройствами, легко впасть в иллюзию, что весь мир должен быть исключительно цифровым. Но XIX век более прославлен открытиями и изобретениями, решительно не цифровыми. Честно говоря, окружающий мир, данный нам в ощущениях, очень редко предстает в цифровом обличье. Он скорее представляет собой континуум, который не так-то лег- ко выразить в числах. 296 Глава восемнадцатая Хотя Холлерит уже использовал реле в своих карточных табуляторах и сортировщиках, применять реле в компьюте- рах — которые со временем получили название электромеха- нических — начали лишь в середине 1930-х. В них использова- ли, как правило, не телеграфные, а телефонные реле, разрабо- танные для управления телефонными вызовами. Первые релейные компьютеры совсем не походили на уст- ройство, которое мы разработали в предыдущей главе (позже мы увидим, что архитектуру нашего компьютера я построил на основе микропроцессоров 1970-х). В частности, нам сегод- ня кажется очевидным, что действие компьютеров должно ос- новываться на двоичных числах, но в действительности это имело место далеко не всегда. Другое отличие нашего релейного компьютера от настоя- щих устройств заключается в том, что никто в 30-х годах не терял рассудок настолько, чтобы пытаться собрать из реле 524 288 битов памяти! По цене, занимаемому пространству и по- требляемой мощности память такого объема была совершен- но нереализуема. То мизерное ее количество, что все-таки было доступно, применялось только для хранения промежуточных результатов. Сами программы записывали на физических но- сителях, например ленте с перфорацией. Вообще использован- ная нами концепция совместного хранения кода и данных в памяти возникла несколько позже. По-видимому, хронологически первый релейный компьютер был построен Конрадом Цузе (Conrad Zuse) (1910–1995), кото- рый начал собирать его в 1935 г. в квартире своих родителей в Берлине, будучи студентом инженерного факультета. В нем уже применялось двоичное кодирование, но в первых версиях в ка- честве памяти использовались не реле, а механические приспо- собления. Программы для своих компьютеров Цузе записывал на 35-мм кинопленке, пробивая в ней отверстия. В 1937 г. Джордж Стибиц (George Stibitz) (1904–1995) из Bell Telephone Laboratories принес домой пару телефонных реле и собрал из них на кухонном столе 1-разрядный сумматор, ко- торый его жена позже окрестила «К-машиной» (т. е. кухонной машиной). С этих экспериментов началось создание устрой- ства под названием «Complex Number Computer» (1939). Тем временем студенту выпускного курса Гарвардского университета Говарду Эйкену (Howard Aiken) (1900–1973) по- 297 От счетов к микросхемам надобилось устройство, способное выполнить большой объем однообразных вычислений. На этой основе возникло сотруд- ничество между Гарвардом и IBM, выразившееся в создании компьютера «Automated Sequence Controlled Calculator» (ASCC), позже получившего имя «Марк I». Его строительство завершилось в 1943 г. Это был первый цифровой компьютер, способный печатать таблицы, т. е. наконец-то реализовавший мечту Чарльза Бэббиджа. А компьютер «Марк II» стал самым большим релейным устройством. В нем использовалось 13 000 реле. В Гарвардской вычислительной лаборатории, возглавля- емой Эйкеном, был прочитан и первый в истории курс ин- форматики. Реле оказались далеко не идеальным прибором для созда- ния компьютеров. Будучи механическими устройствами, дей- ствие которых основывалось на изгибании металлической пла- стины, после продолжительной работы они в самом прямом смысле слова ломались. К неисправности реле приводили и кусочки грязи или бумаги, застрявшие между контактами. Особенно прославилась в этом отношении мошка, в 1947 г. извлеченная из реле компьютера «Марк II». Грейс Мюррей Хоп- пер (Grace Murray Hopper) (1906–1992), в 1944 г. ставшая со- трудником Эйкена, а позже прославившаяся как специалист по языкам программирования, приклеила ее в журнал с при- мечанием «первый случай выловленного бага»1. Реле можно заменить вакуумной лампой, изобретенной Джоном Эмброузом Флемингом (John Ambrose Fleming) (1849– 1945) и Ли Форестом (Lee de Forest) (1873–1961) для использо- вания в радио. К 1940-м радиолампы повсеместно применяли для усиления телефонных сигналов, и практически в каждом доме имелся радиоприемник, заполненный этими тускло све- тящимися стеклянными колбами. Из радиоламп, как и из реле, можно собрать вентили И, ИЛИ, И-НЕ и ИЛИ-НЕ. Совершенно не важно, из чего собрана вентильная схема — из реле или из радиоламп. В любом случае из вентилей мож- но собрать сумматоры, селекторы, дешифраторы, триггеры и счетчики. Все, что я говорил в предыдущих главах о компо- нентах, собранных из реле, остается истинным и после заме- ны реле на радиолампы. 1 От англ. «bug» — жучок. На компьютерном жаргоне багом называется ошибка в программе. — Прим. перев. 298 Глава восемнадцатая Но и у радиоламп свои недостатки. Они дороги, энергоем- ки, сильно греются и, главное, рано или поздно сгорают. С этим можно было только смириться. Никто из владельцев лампо- вых приемников не избежал необходимости время от време- ни менять в них лампы. Телефонные системы разрабатыва- лись с избыточной надежностью, поэтому периодический вы- ход ламп из строя не наносил большого ущерба (да никто и не ждет, что телефоны будут работать безупречно). Другое дело — компьютер. Во-первых, в нем выход лампы из строя сразу можно и не заметить. Во-вторых, ламп в компьютере должно быть так много, что они будут сгорать в среднем каждые не- сколько минут. У ламп по сравнению с реле есть одно большое преимуще- ство — переключение лампы из состояния в состояние зани- мает всего одну миллионную долю секунды — одну микросе- кунду. Это в тысячу раз быстрее, чем реле, которое переключа- ется в лучшем случае за 1 миллисекунду, т. е. тысячную долю секунды. Забавно, что создатели первых компьютеров их быс- тродействию большого внимания не уделяли, поскольку ско- рость вычислений определялась скоростью считывания про- граммы с бумажной или пластиковой ленты. В подобных уст- ройствах более высокая по сравнению с реле скорость радио- ламп была не важна. И все же в начале 1940-х вакуумные лампы применялись в компьютерах все чаще, а к 1945 г. реле были вытеснены окон- чательно. В отличие от релейных электромеханических ком- пьютеров новые устройства, основанные на вакуумных лам- пах, стали называться электронными компьютерами. Британский компьютер «Колосс» (начал работать в 1943 г.) создавался в противовес немецкой шифровальной машине «Энигма». В его разработке (а также в разработке других бри- танских компьютерных проектов) принимал участие Алан Тью- ринг (Alan Turing) (1912–1954), прославившийся главным об- разом благодаря двум своим статьям. В первой, опубликован- ной в 1937 г., он ввел концепцию «вычислимости», проанали- зировав, что могут и чего не могут делать компьютеры. Разра- ботанная им абстрактная модель компьютера известна теперь как «машина Тьюринга». Вторая знаменитая статья Тьюринга посвящена проблеме искусственного интеллекта. В ней он опи- сал способ проверки машины на разумность (тест Тьюринга). 299 От счетов к микросхемам Компьютер ENIAC (Electronic Numerical Integrator and Computer, Электронный числовой интегратор и компьютер) на 18 000 лампах был создан в Школе электроинженерии им. Мура при Пенсильванском университете Преспером Экертом (J. Presper Eckert) (1919–1995) и Джоном Моучли (John Mauchly) (1907–1980). Его создание завершилось в конце 1945 г. По тон- нажу (30 т) ENIAC был самым большим компьютером в исто- рии и, вероятно, сохранит этот титул навечно. Домашние ком- пьютеры обогнали его по быстродействию в 1977 г. Попытка Экерта и Моучли запатентовать компьютер не удалась из-за конфликтной заявки конкурента — Джона Атанасоффа (John Atanasoff) (1903–1995), который несколько ранее собрал элек- тронный компьютер, который толком так и не заработал. ENIAC заинтересовал математика Джона фон Неймана (John von Neumann) (1903–1957), венгра по происхождению, который с 1930 г. жил в США. Ней- ман был профессором математики в Принстонском Институте слож- ных исследований, славился спо- собностью производить в уме сложнейшие вычисления и зани- мался всем, начиная с квантовой механики и кончая применением теории игр в экономике. Джон Нейман помогал проек- тировать ENIAC следующего поко- ления — EDVAC (Electronic Discrete Variable Automatic Computer, Электронный автоматический компьютер с дискретными переменными). В статье «Предва- рительное обсуждение логической конструкции электронной вычислительной машины», опубликованной в 1946 г. в соав- торстве с Артуром Берксом (Arthur Burks) и Германом Голд- стайном (Herman Goldstine), он описал некоторые особеннос- ти компьютеров, благодаря которым EDVAC оказался значи- тельным шагом вперед в сравнении с ENIAC. Разработчики EDVAC понимали, что в компьютерах нужно использовать двоичное исчисление (в ENIAC применялась десятичная сис- тема). У компьютера также должно быть как можно больше памяти, и во время выполнения программы эту память надо использовать для хранения как команд, так и данных (програм- 300 Глава восемнадцатая мирование ENIAC осуществлялось с помощью тумблеров и переключения кабелей). Команды должны храниться в памя- ти последовательно и адресоваться с помощью счетчика ко- манд, вместе с тем допуская условные переходы. Эта концеп- ция теперь известна как концепция запоминаемой программы. Эти нововведения оказались столь важным эволюционным этапом, что мы теперь говорим о них, как об архитектуре Неймана. Компьютер, разработанный нами в предыдущей гла- ве, — типичная машина Неймана. Но в архитектуре Неймана есть и «узкое место». Машина Неймана обычно тратит значи- тельное время не на выполнение команд, а на их загрузку из памяти. Как вы помните, компьютер из главы 17 в его оконча- тельной редакции три четверти времени работы с командой тратил на ее перемещения. Во времена EDVAC создание объемной памяти из радио- ламп представлялось неэкономичным, поэтому на замену лам- пам предлагались порой весьма странные устройства. В одном из них, успешно работавшем и называвшемся памятью с ртутной линией задержки (mercury delay line memory), при- менялись 5-футовые трубки с ртутью. С одного конца трубки в ртуть с интервалом около микросекунды посылались сла- бые пульсации, которые приблизительно через 1 миллисекунду достигали противоположного конца трубки (там они детек- тировались как звуковые волны и направлялись обратно). Каж- дая трубка с ртутью могла хранить около 1 024 битов инфор- мации. В середине 50-х появились запоминающие устройства, состоящие из большого количества маленьких намагниченных металлических колец, подвешенных на проводах. Каждое коль- цо могло хранить 1 бит информации. О природе компьютеров в 40-е годы задумывался не толь- ко Нейман. В этом же направлении размышлял и Клод Шен- нон (род. 1916). В главе 11 я обсуждал его магистерскую дис- сертацию (1938), в которой он установил взаимосвязь между тумблерами, реле и булевой алгеброй. В 1948 г., работая в Bell Telephone Laboratories, он опубликовал в журнале Bell System Technical Journal статью «Математическая теория коммуника- ции», в которой не только впервые в печати использовал сло- во «бит», но и заложил основы того, что сегодня называется теорией информации. Предметом теории информации явля- ется передача цифровой информации при наличии шума (ко- 301 От счетов к микросхемам торый обычно не дает передать информацию полностью) и способы его компенсации. В 1949 г. он написал первую статью о программировании на компьютере игры в шахматы, а в 1952 г. разработал механическую мышь, которая с помощью реле на- ходила выход из лабиринта. В Bell Telephone Laboratories Шеннон также был хорошо известен как человек, умеющий жонглировать, катаясь на одноколесном велосипеде. Самым известным трудом Норберта Винера (Norbert Wiener) (1894–1964), который 18 лет от роду защитил диссер- тацию по математике в Гарвардском университете, является книга «Кибернетика, или Управление и связь в животном и машине» (1948). Именно он назвал кибернетикой (от гречес- кого слова, означающего «кормчий») теорию о взаимосвязи биологических процессов в человеке и животном с механикой компьютеров и роботов. В наши дни очень распространена приставка кибер-, указывающая на отношение чего-либо к ком- пьютерам. Например, миллионы компьютеров, подключенных к Интернету, называют киберпространством. Слово это ввел в романе «Невромант» (1984) писатель Вильям Гибсон (William Gibson), работающий в жанре «киберпанк». В 1948 г. корпорация Eckert-Mauchly Computer (позже став- шая частью Remington Rand) начала работу над первым мас- совым компьютером — UNIVAC (Universal Automatic Computer, Универсальный автоматический компьютер). Его разработка завершилась в 1952 г., и первый экземпляр был направлен в Бюро переписей. В 1952 г. UNIVAC впервые вышел в эфир на канале CBS, где его использовали для предсказания результата президентских выборов, при этом ведущий Уолтер Кронкайт (Walter Croncite) величал его «электронным мозгом». В том же 1952 г. свою первую коммерческую компьютерную систему — 701 — выпустила IBM. С этого времени начинается история массового примене- ния компьютеров в бизнесе и государственном секторе. Она очень интересна, но мы все-таки отвлечемся и перейдем те- перь к другой истории — истории, которая сделала компью- теры компактными и дешевыми приборами из разряда быто- вой техники. Началась она в 1947 г. с прорыва в области элек- троники, который прошел почти незамеченным. Фирма Bell Telephone Laboratories в течение многих лет была местом, где умные люди могли заниматься почти всем, что их 302 Глава восемнадцатая интересовало. Некоторых из них, к счастью, интересовали ком- пьютеры. Я уже упоминал Джорджа Стибица и Клода Шенно- на, которые внесли значительный вклад в развитие вычисли- тельной техники, работая в Bell Telephone Laboratories. Позже, в 70-е годы в этой компании родилась компьютерная опера- ционная система UNIX и язык программирования С, к кото- рым я вернусь в следующих главах. Bell Telephone Laboratories возникла 1 января 1925 г., когда компания American Telephone & Telegraph официально заяви- ла о выделении научных и технических исследовательских подразделений в отдельную фирму. Компания Bell Telephone Laboratories создавалась для разработки технологических ре- шений по улучшению телефонной связи. К счастью, это целе- указание довольно расплывчато и охватывает самые разнооб- разные исследования, включая очевидную вечную тему — уси- ление звукового сигнала, передаваемого по проводам, без вне- сения в него искажений. С 1912 г. в Bell System работали над ламповыми усилителя- ми, посвятив их усовершенствованию многочисленные иссле- дования и проекты. И все же вакуумные лампы оставляли же- лать много лучшего. Они были громоздки, потребляли много энергии и часто перегорали. Альтернативы им, увы, не было. Все изменилось 16 декабря 1947 г., когда два физика из Bell Telephone Laboratories — Джон Бардин (John Bardeen) (1908– 1991) и Уолтер Браттейн (Walter Brattain) (1902–1987) собрали усилитель иного типа. Он состоял из германиевой пластины и полоски золотой фольги. Через неделю они продемонстриро- вали усилитель своему начальнику Вильяму Шокли (William Shockley) (1910–1989). Это был первый транзистор, прибор, который порой называют самым важным изобретением XX века. Транзистор возник не на пустом месте. Восемью годами раньше, 29 декабря 1939 г. Шокли записал в своем блокноте: «Сегодня мне пришло в голову, что в принципе усилитель можно собрать с помощью полупроводников, а не вакуумных ламп». После демонстрации первого транзистора несколько лет ушло на его усовершенствование. Лишь в 1956 г. Шокли, Бар- дин и Браттейн были удостоены Нобелевской премии по фи- 303 От счетов к микросхемам зике «за исследования полупроводников и открытие транзис- торного эффекта». Раньше я уже говорил о проводниках и изоляторах. Про- водники получили свое название благодаря тому, что они хо- рошо проводят электричество. Лучшими проводниками яв- ляются медь, серебро и золото, и отнюдь не случайно все они находятся в одном и том же столбце Периодической таблицы. Как вы, конечно, знаете, электроны в атоме распределены по оболочкам, окружающим ядро. Атомы всех трех лучших проводников характеризуются единственным электроном на самой внешней оболочке. Этот электрон легко покидает атом и может свободно двигаться, создавая электрический ток. Про- тивоположностью проводникам являются изоляторы — на- пример, резина или пластмасса, который ток практически не проводят. Элементы германий и кремний (и некоторые их соедине- ния) называются полупроводниками, но не потому, что они проводят ток в два раза хуже проводников, а потому, что их проводимостью можно управлять. У атома полупроводника на внешней оболочке 4 электрона — половина того, что мо- жет вместить эта оболочка. В чистом полупроводнике между атомами формируются очень прочные связи, и возникает кри- сталлическая решетка, подобная кристаллической решетке ал- маза. Такие полупроводники проводят ток довольно плохо. Но полупроводники можно легировать (dope), т. е. добав- лять в них различные примеси. Примеси одного рода добав- ляют в кристалл полупроводника избыточные электроны. Полученное вещество называется полупроводником n-типа (n означает негативный, т. е. отрицательный). Добавление при- меси другого типа приводит к созданию полупроводника p-типа (p — позитивный, т. е. положительный). Для создания усилителя достаточно между двумя слоями полупроводника n-типа разместить прослойку из полупровод- ника p-типа. Полученное устройство называется npn-транзи- стором, а входящие в его состав полупроводниковые фрагмен- ты известны как коллектор (collector), база (base) и эмиттер (emitter). Вот как схематически изображают npn-транзистор: 304 Глава восемнадцатая База Коллектор Эмиттер Небольшое напряжение на базе управляет гораздо большим током, проходящим из коллектора в эмиттер. Если на базе на- пряжения нет, транзистор практически закрывается. Транзисторы обычно делают в виде небольших металли- ческих цилиндров с тремя проводами-выводами. Появление транзистора ознаменовало зарождение твердо- тельной электроники: транзисторы изготавливаются не из ва- куума, а из «твердого» вещества — полупроводника, создавае- мого в наши дни почти исключительно на основе кремния. Транзисторы не только компактнее вакуумных ламп, но и по- требляют меньше энергии, меньше греются и гораздо долго- вечнее. Невозможно представить себе карманный ламповый приемник. А вот транзисторному приемнику для питания до- статочно небольшой батарейки и не нужен мощный теплоот- вод. Первые счастливчики получили карманные транзистор- ные приемники в подарок на рождество 1954 г. Транзисторы в них были изготовлены фирмой Texas Instruments, которая сыг- рала в полупроводниковой революции важную роль. Но самым первым коммерческим приложением транзис- торов стали не приемники, а слуховые аппараты. Александр Грейам Белл (Alexander Graham Bell) много работал с глухими людьми, и в память об этом компания AT&T разрешила про- изводителям слуховых аппаратов применять транзисторные технологии без платы за пользование патентом. В 1960 г. де- бютировал транзисторный телевизор, и к настоящему време- ни ламповые устройства практически исчезли (хотя и не со- всем — отдельные аудиофилы и электрогитаристы по-прежне- му предпочитают звук ламповых усилителей). 305 От счетов к микросхемам В 1956 г. Шокли ушел из Bell Telephone Laboratories, пере- ехал в город своего детства Пало-Альто (штат Калифорния) и основал там компанию Shockley Semiconductor Laboratories. Это была первая компания такого рода в той местности. Со време- нем там открылись отделения и других полупроводниковых и компьютерных компаний, и теперь область к югу от Сан-Фран- циско неофициально известна как Силиконовая долина1. Изначально предполагалось использовать вакуумные лам- пы в усилителях, но потом оказалось, что они также пригод- ны для сборки логических схем. То же самое случилось и с тран- зисторами. На рисунке показан транзисторный вентиль И, структура которого почти не отличается от релейной версии. Выход равен 1, только если оба транзистора проводят ток, а это в свою очередь возможно лишь при условии, что сигналы на входах А и В оба равны 1. Резистор в цепи нужен, чтобы в такой ситуации избежать короткого замыкания. Если соединить транзисторы, как показано на схеме спра- ва, получится вентиль ИЛИ. В вентиле И эмиттер верхнего транзистора соединен с коллектором нижнего. В вентиле ИЛИ к питанию подключены оба транзистора. Эмиттеры соедине- ны друг с другом. Вход А Выход Вход B V Вентиль И Вход А Выход Вход B V V Вентиль ИЛИ 1 Правильнее и понятнее было бы перевести ее название как Кремниевая долина. — Прим. перев. 306 Глава восемнадцатая Итак, все, что мы знаем о сборке логических схем и других компонентов из реле, применимо и к транзисторам. И реле, и радиолампы, и транзисторы изначально создавались в основ- ном для усиления сигнала, но из всех этих устройств можно также создавать и логические схемы, из которых собираются компьютеры. Первые транзисторные компьютеры появились в 1956 г., и уже через несколько лет они полностью вытеснили проекты ламповых компьютеров. Словом, благодаря транзисторам компьютеры, конечно, стали надежнее, компактнее и экономичнее. Но облегчили ли транзисторы сборку компьютеров? По правде говоря, нет. Конечно, с помощью транзисторов на небольшом пространстве можно разместить больше логи- ческих схем, но это не снимает с вас заботы о соединении всех компонентов. Собирать вентили из транзисторов ничуть не легче, чем из реле или вакуумных ламп. В какой-то степени это даже сложнее, так как за небольшой транзистор не так-то просто ухватиться. Если бы вы решили собрать компьютер из главы 17 с оперативной памятью 64 кб из транзисторов, вам пришлось бы приложить немало усилий, чтобы разработать некую структуру, на которой крепились бы все компоненты. А собственно процесс сборки в значительной степени состоял бы из кропотливой спайки миллионов соединений между мил- лионами транзисторов. Однако, как мы уже видели, имеются определенные ком- бинации транзисторов, которые встречаются в схемах неоднок- ратно. Из пар транзисторов составляются вентили, из венти- лей — триггеры, сумматоры, селекторы или дешифраторы. Из триггеров собирают многобитовые защелки или массивы RAM. Собрать компьютер было бы много легче, если бы наи- более популярные комбинации транзисторов изначально су- ществовали в собранном виде. По-видимому, первым эту идею в мае 1952 г. сформулиро- вал британский физик Джеффри Даммер (Geoffrey Dummer) (род. 1909): Я хотел бы заглянуть в будущее, — сказал он. — Благодаря рас- пространению транзисторов и успешным исследованиям полу- проводников теперь, по-видимому, возможно представить себе электронное устройство в виде сплошного твердого тела, лишен- 307 От счетов к микросхемам ного соединительных проводов. Это тело может состоять из сло- ев изолирующих, проводящих, фильтрующих и усиливающих веществ, в которых электрические функции выполняются про- сто за счет придания этим слоям определенной формы. Однако первый работающий образец появился лишь через несколько лет. В июле 1958 г. мысль о возможности изготовления несколь- ких транзисторов, резисторов и других деталей из единого куска кремния пришла в голову Джека Килби (Jack Kilby) (род. 1923) из Texas Instruments, который ничего не знал о предска- заниях Даммера. Еще через полгода, в январе 1959 г. пример- но к такому же заключению пришел и Роберт Нойс (Robert Noyce) (1927–1990). Поначалу Нойс работал в Shockley Semiconductor Laboratories, но в 1957 г. он с семью другими учеными уволился из нее и основал корпорацию Fairchild Semiconductor. В истории техники одновременные изобретения происхо- дят чаще, чем можно предположить. Хотя Килби изобрел уст- ройство на полгода раньше Нойса, а фирма Texas Instruments подала заявку на патент раньше, чем Fairchild Semiconductor, Нойс получил патент первым. Последовавшие за этим судеб- ные тяжбы завершились ко всеобщему удовлетворению лишь десять лет спустя. Теперь Килби и Нойса считают соизобрета- телями интегральной микросхемы (ИС), или попросту чипа, хотя они никогда не работали вместе. Для изготовления интегральной микросхемы использует- ся сложный процесс, заключающийся в сборке тончайших пленок легированного кремния определенной формы. Разра- ботка новой интегральной схемы стоит очень дорого, но бла- годаря массовому производству цена падает: чем больше де- лают микросхем, тем они дешевле. Сама по себе кремниевая микросхема очень тонка и хруп- ка, поэтому она нуждается в прочном корпусе, который с од- ной стороны защитил бы ее, а с другой — обеспечивал бы воз- можность ее соединения с другими микросхемами. Чаще дру- гих используется прямоугольный пластмассовый корпус DIP (dual inline package, корпус с двухрядным расположением вы- водов) с 14, 16 или даже 40 выводами. 308 Глава восемнадцатая На рисунке показана микросхема с 16 выводами. Если взять ее так, чтобы небольшая прорезь в корпусе оказалась слева (как на рисунке), то нумерация выводов от 1 до 16 будет идти про- тив часовой стрелки, начинаясь с левого нижнего вывода и за- канчиваясь на левом верхнем. Расстояние между выводами равно 1/10 дюйма (около 2,5 мм). В 60-е годы развитию рынка интегральных микросхем спо- собствовали гонка вооружений и освоение космоса. Первым гражданским коммерческим продуктом, в котором использо- валась микросхема, опять же стал слуховой аппарат, выпущен- ный в 1964 г. фирмой Zenith. В 1971 г. фирма Texas Instruments продала первый электронный калькулятор, а фирма Pulsar — первые электронные часы (разумеется, микросхемы для часов размещаются в особых корпусах). Затем последовала целая лавина различных устройств на микросхемах. В 1965 г. Гордон Мур (Gordon Moore), в то время работав- ший в компании Fairchild Semiconductor, а позже ставший од- ним из основателей корпорации Intel, обратил внимание на то, что с 1959 г. число транзисторов в одной микросхеме еже- годно удваивалось. Он предсказал, что эта тенденция сохра- нится и в будущем. В действительности технологическое раз- витие шло несколько медленнее, поэтому в окончательной редакции «закон Мура» предсказывает удвоение числа тран- зисторов в микросхеме каждые полтора года. Столь стреми- тельный прогресс объясняет, почему в наше время компьюте- ры безнадежно устаревают всего за несколько лет. Некоторые специалисты полагают, что действие закона Мура продлится до 2015 г. Для описания микросхем используются следующие поня- тия: малый уровень интеграции (small-scale integration, SSI) — микросхемы менее чем с 10 логическими схемами; средний уро- вень интеграции (medium-scale integration, MSI), или СИС (средняя интегральная схема) — микросхемы с 10–100 логи- ческими схемами; высокий уровень интеграции (large-scale 309 От счетов к микросхемам integration, LSI), или БИС (большая интегральная схема) — микросхемы с 100–5000 логических схем; сверхвысокий уровень интеграции (very-large-scale integration, VLSI), или СБИС (сверхбольшая интегральная схема) — микросхемы с 5000– 50000 логических схем; суперсверхвысокий уровень интеграции (super-large-scale integration, SLSI) — микросхемы с 50000– 100000 логических схем; ультравысокий уровень интеграции (ultra-large-scale integration, ULSI), или УБИС (ультрабольшая интегральная схема) — микросхемы более чем с 100000 логи- ческих схем. До конца этой главы и на всю следующую мы остановим нашу машину времени на середине 70-х годов прошлого века — темной эпохе, когда люди еще не слыхивали о фильме «Звездные войны», а СБИС лишь едва замаячили на горизон- те. В те времена при сборке интегральных схем использова- лось несколько различных технологий, каждая из которых оп- ределяет собственное семейство (family) микросхем. В середи- не 70-х главенствующее положение занимали два семейства: ТТЛ и КМОП. Сокращение ТТЛ означает транзисторно-транзисторная логика (transistor-transistor logic). В те времена неизменным атрибутом стола инженера цифрового проектирования (т. е. человека, разрабатывавшего из микросхем большие схемы) была книга «The TTL Data Book for Design Engineers» — спра- вочник по ТТЛ-микросхемам фирмы Texas Instruments, опуб- ликованный в 1973 г. В ней содержались подробные сведения об интегральных микросхемах ТТЛ серии 7400 (номера всех микросхем в этой серии начинались с 74), которые продава- лись компанией Texas Instruments и некоторыми другими. Любая интегральная микросхема серии 7400 состоит из нескольких логических вентилей, собранных в некоторой за- данной конфигурации. В одних микросхемах содержатся про- стые логические схемы, из которых можно создавать более крупные компоненты, другие представляют собой готовые триггеры, сумматоры, селекторы и дешифраторы. Первая микросхема в серии 7400 имела (вполне ожидаемо) номер 7400 и описана в справочнике как «счетверенная двух- входовая положительная схема И-НЕ». Это сложное название означает, что в данной микросхеме присутствуют четыре двух- входовых вентиля И-НЕ. Положительными (positive) они на- 310 Глава восемнадцатая зываются потому, что в них наличие напряжения означает 1, а его отсутствие — 0. У микросхемы 14 выводов, назначение которых описано на следующей диаграмме. 8 9 10 11 12 13 14 7 6 5 4 3 2 1 VCC 4B 4A 4Y 3B 3A 3Y 1B 1Y 2A 2B 2Y Gnd 1A На диаграмме показан вид микросхемы сверху (выводы ухо- дят вниз); прорезь расположена слева. Вывод 14, обозначенный символом VCC, эквивалентен кон- такту со значком V, которым я обозначал питающее напряже- ние. Нижний индекс C означает, что в микросхеме питание подается на коллектор транзистора; удвоен индекс потому, что так по традиции обозначают входное напряжение. Символы Gnd в обозначении 7-го контакта означают «ground» — земля. Любая микросхема должны быть подключена к питанию и к земле. Питающее напряжение для ТТЛ-микросхем серии 7400 зак- лючено в пределах от 4,75 до 5,25 В, иначе говоря 5 вольт ± 5%. Если напряжение упадет ниже 4,75 В, микросхема не будет ра- ботать. Если оно превысит 5,25 В, микросхема может испор- титься. Батарейки для питания микросхем обычно не приме- няются. Даже если вы найдете 5-вольтовую батарейку, неточ- ность напряжения в ней превысит допустимые для микросхем пределы. Для устройств на микросхемах ТТЛ, как правило, используется питание от розетки. У каждого из четырех вентилей И-НЕ микросхемы 7400 предусмотрено два входа и один выход. Работают они незави- симо друг от друга. В предыдущих главах мы говорили о том, 311 От счетов к микросхемам что входной сигнал равен либо 1 (есть напряжение), либо 0 (нет напряжения). В действительности, входной сигнал любо- го из вентилей может варьироваться от 0 (земля) до 5 В (VCC). Напряжения в диапазоне 0–0,8 В считаются логическим нулем, а напряжения от 2 до 5 В — логической единицей. Напряже- ний между 0,8 и 2 В в схеме следует избегать. Напряжение около 0,2 В на выходе вентиля ТТЛ соответ- ствует нулю, напряжение 3,4 В — единице. Поскольку эти на- пряжения могут несколько варьироваться, иногда говорят не о 0 и 1, а о низком (low) и высоком (high) уровнях выходного сигнала. Более того, иногда высокое напряжение соответству- ет 0, а низкое — 1. Тогда говорят о конфигурации с отрица- тельной (negative) логикой. Выходные напряжения 0,2 В (логический 0) и 3,4 В (логи- ческая 1) на выходе вентиля ТТЛ заведомо попадают в допус- тимые пределы — от 0 до 0,8 В для нуля и от 2 до 5 В для еди- ницы. Так микросхемы ТТЛ защищаются от шума. Единич- ный сигнал может упасть на 1,4 В и все же остаться единицей. Нулевой сигнал может вырасти на 0,6 В и остаться нулем. Вероятно, самой важной характеристикой конкретной мик- росхемы является время установки (propagation time), т. е. вре- менной интервал между изменением сигнала на входе и соот- ветствующим изменением сигнала на выходе. Время установки микросхем обычно измеряется в наносе- кундах (нс). Наносекунда — это очень короткий промежуток времени. Одна тысячная секунды называется миллисекундой, одна миллионная секунды — микросекундой. Наносекунда — это одна миллиардная доля секунды. Время установки для вен- тилей И-НЕ в микросхеме 7400 гарантированно не превышает 22 нс — 0,000000022 секунды или 22 миллиардных секунды. Прочувствовали наносекунду? Нет? Что ж, вы не одиноки. Никто на этой планете не способен представить себе такое ко- роткое время. Наносекунда намного короче самых быстрых изменений, воспринимаемых человеком, поэтому она всегда будет непостижима. Любая попытка объяснения лишь затруд- няет восприятие. Например, я могу сказать так: если вы дер- жите эту книгу на расстоянии 30 см, наносекунда — это вре- мя, за которое свет проходит расстояние от страницы до глаза. Как, стало понятнее? 312 Глава восемнадцатая Но именно благодаря наносекунде возможно само суще- ствование компьютеров. Как мы убедились в главе 17, действие компьютера ограничено простыми до занудства операциями: переместить байт из памяти в регистр, сложить с другим бай- том, вернуть результат в память. Сделать с помощью компь- ютера (настоящего, а не из главы 17) хоть что-то стоящее уда- ется лишь потому, что эти операции выполняются очень быс- тро. Процитируем Роберта Нойса: «Когда вы свыкаетесь с мыслью о наносекунде, концептуально действие компьютера оказывается очень простым». Но вернемся к справочнику по микросхемам ТТЛ. Вы, ко- нечно, увидите в нем много старых знакомых. В микросхеме 7402 содержатся 4 двухвходовых вентиля ИЛИ-НЕ, в микро- схеме 7404 — 6 инверторов, в микросхеме 7408 — 4 двухвхо- довых вентиля И, в микросхеме 7432 — 4 двухвходовых вен- тиля ИЛИ, в микросхеме 7430 — 8-входовый вентиль И-НЕ: 8 9 10 11 12 13 14 7 6 5 4 3 2 1 VCC Nc H G Nc Nc Y B C D E F Gnd A Сокращение «Nc» означает «no connection» — не подключено. Название микросхемы 7474 также звучит знакомо — «сдво- енный D-триггер со сбросом и предустановкой, срабатываю- щий по фронту». На диаграмме схематически показано его устройство. 313 От счетов к микросхемам Q 8 9 10 11 12 13 14 7 6 5 4 3 2 1 VCC 2Clr 2D 2Clk 2Pre 2Q 2Q 1D 1Clk 1Pre 1Q 1Q Gnd 1Clr Q D Clk Q PRE Clr D Clk Q PRE Clr В справочник по микросхемам ТТЛ включены даже логичес- кие схемы триггеров в этой микросхеме: Q Q Установка Сброс D Синхронизация Этот рисунок очень похож на диаграмму в конце главы 14 за исключением того, что там я применил вентили ИЛИ-НЕ. Таб- лица логики триггера из справочника тоже выглядит немного иначе. 314 Глава восемнадцатая В таблице буква В означает высокий уровень сигнала, Н — низкий. Если хотите, можете считать их 1 и 0. В моем триггере нормальное значение сигналов «Сброс» и «Установка» 0; здесь же оно равно 1. Листая страницы справочника по микросхемам ТТЛ, вы обнаружите, что в микросхеме 7483 скрывается 4-разрядный двоичный полный сумматор, в микросхеме 74151 — селектор с 8 входами и 1 выходом, в микросхеме 74154 — дешифратор с 4 входами и 16 выходами, в микросхеме 74161 — синхронный 4-разрядный двоичный счетчик, в микросхеме 74175 — счет- веренный D-триггер со сбросом. Ну что ж, вот вы и догадались, что описания всех компо- нентов, что мы использовали, начиная с главы 11, я позаим- ствовал из книги «The TTL Data Book for Design Engineers». Инженеры проводили над ней долгие часы, знакомясь со всеми доступными типами микросхем ТТЛ. В принципе из микросхем ТТЛ уже можно собирать компьютер, описанный в главе 17. Соединять микросхемы гораздо легче, чем отдель- ные транзисторы. Но вот оперативную память собирать из микросхем ТТЛ я бы вам не советовал. Самый емкий чип RAM, описанный в издании книги «The TTL Data Book for Design Engineers» 1973 г., имеет объем 256 � 1 бит. Для создания памя- ти RAM объемом 64 кб таких схем понадобилось бы 2 048! Короче, для памяти нужно что-то получше, чем ТТЛ. Но об этом подробнее в главе 21. 315 От счетов к микросхемам Вам, вероятно, также понадобится лучший вибратор. Мож- но, конечно, просто подключить вход ТТЛ-инвертора к его же входу, но вибратор с более предсказуемой частотой предпоч- тительней. Такой прибор легко создать, используя кварцевый кристалл, обычно размещаемый в цилиндрическом корпусе с двумя выводами. Такие кристаллы вибрируют с определенной частотой, обычно не меньше миллиона колебаний в секунду. Миллиону колебаний в секунду соответствует частота 1 мега- герц (сокращенно МГц). Если бы мы собрали компьютер из главы 17 с помощью микросхем ТТЛ, для его работы лучше всего подошла бы тактовая частота 10 МГц. На выполнение каждой команды уходило бы 400 нс. Это, конечно, невооб- разимо быстрее, чем даже в самом быстром релейном ком- пьютере. Другое популярное семейство микросхем называется КМОП (комплементарные МОП-структуры), или CMOS (complementary metal-oxide semiconductor). Если бы вы в сере- дине 70-х годов в порядке хобби собирали какие-нибудь уст- ройства из микросхем КМОП, вашей настольной книгой был бы справочник «CMOS Databook», выпущенный фирмой National Semiconductor. В нем содержится информация о КМОП-микросхемах серии 4000. Для микросхем ТТЛ требуется питание от 4,75 до 5,25 В. Диапазон допустимых напряжений для микросхем КМОП — от 3 до 18 В. Есть где размахнуться! Более того, микросхемы КМОП потребляют гораздо меньше энергии, чем ТТЛ, благо- даря чему становится возможным создание небольших уст- ройств с микросхемами, работающих от батареек. Недостаток микросхем КМОП — низкое быстродействие. Например, га- рантированное время установки 4-разрядного полного сумма- тора КМОП 4008, работающего от напряжения 5 В, составляет 750 нс. Если напряжение повысить, микросхема начнет рабо- тать быстрее: 250 нс при напряжении 10 В и 190 нс при напря- жении 15 В. Но даже при повышенном напряжении микро- схема КМОП далека от аналогичного ТТЛ-сумматора, время установки которого равно 24 нс. Впрочем, такое ясное разли- чие между быстрыми ТТЛ-микросхемами и экономичными КМОП-микросхемами существовало лет 25 назад. В наши дни уже появились ТТЛ-микросхемы с пониженными требовани- ями к питанию и быстродействующие КМОП-микросхемы. 316 Глава восемнадцатая Процесс практической сборки устройства на микросхемах начинается на макетной плате (breadboard). Под пластмассовым основанием каждые пять отверстий элек- трически соединены. Микросхема вставляется в макетную пла- ту над центральной бороздой так, что ее выводы попадают в отверстия по обе стороны от борозды. При этом каждый вы- вод микросхемы электрически соединен с четырьмя соседни- ми отверстиями. В эти отверстия вставляются провода для со- единения с другими микросхемами. Для более долговечного соединения микросхем используй- те монтаж накруткой (wire-wrapping). Каждая микросхема ус- танавливается в гнездо с длинными квадратными штырьками: Каждый штырек соответствует выводу микросхемы. Сами гнезда вставляются в плату с перфорацией. С ее противопо- ложной стороны с помощью специального устройства на каж- дый штырек наматывается тонкий провод с изоляцией. На уг- лах квадратного сечения штырька изоляция рвется, и между проводом и штырьком возникает контакт. При серийном производстве приборов на микросхемах лучше использовать печатные платы (printed circuit boards). Впрочем, изготовление печатной платы по силам и любите- лю. Печатная плата — это пластина, покрытая тонкой медной фольгой. Те участки платы, на которых фольгу нужно оста- 317 От счетов к микросхемам вить, покрывают химически стойким веществом, а потом про- травливают ее кислотой. Затем выводы гнезд для микросхем или самих микросхем припаиваются прямо к медному покры- тию платы. Поскольку соединений между микросхемами тре- буется очень много, одного слоя меди часто не хватает. Поэто- му промышленные печатные платы обычно бывают много- слойными. В начале 70-х годов появилась возможность собрать ком- пьютерный процессор целиком на одной плате. После этого размещение всего процессора в единой микросхеме было уже вопросом времени. Хотя патент на «однокристальный» ком- пьютер в 1971 г. получила фирма Texas Instruments, честь из- готовления микросхемы-процессора принадлежит компании Intel, основанной в 1968 г. бывшими сотрудниками Fairchild Semiconductors Робертом Нойсом и Гордоном Муром. Первым значительным продуктом Intel была микросхема памяти ем- костью 1 024 бита — рекорд для того времени, — выпущенная в 1970 г. Проектируя микросхемы для программируемого кальку- лятора, который намеревалась выпускать японская компания Busicom, инженеры Intel приняли решение испробовать на них новый подход. Суть его инженер Intel Тед Хофф (Ted Hoff) выразил так: «Я решил проектировать не устройство, которое было бы калькулятором с возможностью программирования, а компьютер общего назначения, запрограммированный вы- полнять функции калькулятора». Так появилась на свет мик- росхема 4004 — первый «компьютер в чипе», или микропро- цессор. Микросхема 4004 появилась на рынке в ноябре 1971 г. и содержала 2 300 транзисторов (согласно закону Мура, мик- ропроцессоры, выпущенные через 18 лет после этого собы- тия, должны содержать в 4 000 раз больше транзисторов, т. е. около 10 миллионов — весьма точное предсказание). Помимо числа транзисторов, нужно упомянуть еще о трех важных характеристиках ИС 4004. Их часто используют и для описания более поздних процессоров. Во-первых, 4004 был 4-разрядным процессором, т. е. шина данных в нем имела ширину 4 бита. При сложении или вычи- тании чисел процессор мог обрабатывать только 4-битовые фрагменты. Этим он отличается от 8-разрядного компьютера из главы 17, шина данных которого имеет ширину 8 битов. 318 Глава восемнадцатая Естественно, на 4 битах технология задержалась недолго. Как мы убедимся позже, 4-разрядные процессоры были очень бы- стро вытеснены 8-разрядными, а в конце 70-х появились уже 16-разрядные процессоры. Вспомните, что в 8-разрядном ком- пьютере из главы 17 для сложения двух 16-разрядных чисел требовалось несколько команд, и вы оцените преимущество 16-разрядного процессора. В середине 80-х на первый план выдвинулись 32-разрядные процессоры, которые с тех пор ста- ли стандартными для домашних компьютеров. Во-вторых, 4004 работал на тактовой частоте (clock speed) 108 000 циклов в секунду, т. е. 108 килогерц (кГц). Тактовая частота это максимально допустимая частота генератора так- товых импульсов, при которой процессор может работать. Чуть больше, и в работе возможно появление сбоев. В 1999 г. процессоры, предназначенные для домашних компьютеров, пересекли отметку 500 МГц — приблизительно в 5 000 раз быстрее, чем у 4004. В-третьих, объем адресуемой памяти у 4004 составлял 640 байт. По сегодняшним временам этот объем кажется смехот- ворно маленьким, но на большее при тогдашних микросхе- мах памяти рассчитывать не приходилось. Как вы узнаете из следующей главы, через пару лет процессоры могли уже обра- щаться к 64 кб памяти, как компьютер из главы 17. В 1999 г. адресное пространство микропроцессоров Intel составляло уже 64 терабайта, что значительно превосходит потребности до- машних компьютеров, оперативная память которых редко превышает 256 Мб. Три этих характеристики никак не отражают способности компьютера. На 4-разрядном процессоре можно складывать 32-разрядные числа, разбивая их на 4-битовые фрагменты. В каком-то смысле все компьютеры одинаковы. Если в аппарат- ной части одного процессора отсутствуют возможности, име- ющиеся у другого, эту недостачу легко возместить средствами программного обеспечения. В конце концов результат будет один и тот же. Это, кстати, одно из заключений работы Алана Тьюринга о «вычислимости». А вот по скорости выполнения одной и той же задачи про- цессоры действительно различаются. А ведь быстродействие — одна из главных привлекательных черт компьютеров. 319 От счетов к микросхемам На быстродействие процессора, очевидно, влияет макси- мальная тактовая частота, поскольку она определяет время, затрачиваемое на выполнение каждой команды. На быстро- действии сказывается и ширина шины данных. Хотя 4-разряд- ный процессор и способен складывать 32-разрядные числа, делает он это гораздо медленнее 32-разрядного процессора. А вот связь между быстродействием и объемом адресуемой па- мяти уже не так очевидна. На первый взгляд, размер адресно- го пространства не имеет отношения к быстродействию и лишь накладывает ограничение на способность процессора решать определенные задачи, требующие значительной памяти. Но ограничение на объем памяти процессор всегда может обой- ти, используя определенные ее адреса для обмена данными с внешними накопителями. Можно, например, представить себе, что каждый байт, записываемый в определенную ячейку па- мяти, в действительности записывается на перфоленту, а байт, считываемый из этой ячейки, в действительности считывает- ся с перфоленты. Однако этот обмен замедляет работу компь- ютера. Так что опять все упирается в скорость. Конечно, быстродействие процессора этими тремя числа- ми характеризуется только приблизительно. Они ничего не скажут вам об архитектуре процессора, о том, насколько эф- фективны и функциональны его команды. По мере совершен- ствования процессоров в них встраиваются многие общие функции, ранее выполнявшиеся программным обеспечением. Примеры этого встретятся нам в следующих главах. Хотя все цифровые компьютеры наделены равными спо- собностями, хотя они неспособны делать ничего, что выходи- ло бы за пределы возможностей примитивной вычислитель- ной машины, придуманной Аланом Тьюрингом, общая полез- ность компьютерной системы, конечно, определяется быстро- действием процессора. Например, нет смысла в создании ком- пьютера, который выполняет вычисления медленнее челове- ческого мозга. И нам вряд ли удавалось бы смотреть фильмы на экране компьютера, если бы процессор затрачивал по ми- нуте на рисование каждого кадра. Но вернемся в середину 70-х. Несмотря на ограничения процессора 4004, он был началом новой эры. В апреле 1972 г. компания Intel выпустила микросхему 8008 — 8-разрядный 320 Глава восемнадцатая микропроцессор с тактовой частотой 200 кГц и адресным про- странством 16 кб (видите, как можно легко охарактеризовать процессор всего тремя числами). Затем в 1974 г. компании Intel и Motorola выпустили два микропроцессора, которые должны были заменить 8008. Эти микропроцессоры изменили мир. Глава 19 Два классических микропроцессора Микропроцессор, т. е. центральное процессорное устройство, все компоненты которого объединены в одной микросхеме, появился в 1971 г. Начало было весьма скромным. В первом микропроцессоре — микросхеме 4004 фирмы Intel — содер- жалось всего 2 300 транзисторов. Три десятилетия спустя даже микропроцессоры для домашних компьютеров приблизились к отметке 10 000 000 транзисторов. Однако суть действия микропроцессора в основе своей оста- лась неизменной. Разумеется, миллионы дополнительных транзисторов решают очень важные задачи, но в постижении смысла работы микропроцессора они не только не помогают, но и мешают. Понять, как работает микропроцессор, проще всего на его первых серьезных моделях. А родились они в 1974 г.: в апреле фирма Intel объявила о выпуске микросхемы 8080, а в августе появилась микросхема 6800 фирмы Motorola, которая с 1950 г. занималась изготовле- нием полупроводниковых и транзисторных приборов. Кста- ти, этими процессорами в 1974 г. дело не ограничилось: тогда же появились 4-разрядный процессор TMS 1000 фирмы Texas Instruments, который часто применялся в калькуляторах, игру- шках и бытовых приборах, и первый 16-разрядный процес- сор PACE фирмы National Semiconductor. Но с точки зрения 322 Глава девятнадцатая истории вычислительной техники самыми важными оказались микропроцессоры 8080 и 6800. Поначалу процессор 8080 стоил 360 долларов — ничтожная сумма по сравнению с многомиллионной стоимостью мэйн- фреймов System/360 фирмы IBM, которыми пользовались крупные корпорации. И хотя процессор 8080 ни в коей мере нельзя сравнивать с System/360, уже через несколько лет IBM обратила на эти крохотные микросхемы самое пристальное внимание. 8-разрядный процессор 8080 содержит 6 000 транзисторов, работает с тактовой частотой 2 МГц и способен адресовать 64 кб памяти. Процессор 6800 содержит около 4 000 транзисто- ров и также способен адресовать 64 кб памяти. Первые микро- схемы 6800 работали с тактовой частотой 1 Мгц, но в 1977 г. фирма Motorola выпустила обновленные модели, работавшие на частотах 1,5 и 2 МГц. Микросхемы 8080 и 6800 называют однокристальными (single-chip) процессорами или, менее точно, однокристальны- ми компьютерами. На самом деле, конечно же, микропроцес- сор — это лишь часть компьютера. Кроме него, компьютеру по меньшей мере нужно некоторое количество оперативной памяти, некий способ ввода информации в компьютер (уст- ройство ввода), некий способ извлечь информацию из компь- ютера (устройство вывода) и еще несколько микросхем, кото- рые связывали бы все это в единое целое. Подробнее я опишу эти компоненты в главе 21. Для начала посмотрим на сам микропроцессор. Часто его описание сопровождают блок-схемой, на которой показаны компоненты процессора и способ их соединения. Но я думаю, что вам этого хватило и в главе 17. Сейчас мы попытаемся по- нять, что делается внутри процессора, рассмотрев, как он со- общается с внешним миром. Иначе говоря, будем считать про- цессор «черным ящиком», для понимания работы которого нам нет нужды детально вникать в его внутреннее устройство. Достаточно познакомиться с входными и выходными сигна- лами процессора, а также с его набором команд. Как 8080, так и 6800 размещались в интегральных микро- схемах с 40 выводами. Размеры их чаще всего были таковы: около 5 см в длину, около 1,5 см в ширину и около 3 мм в вы- соту. 323 Два классических микропроцессора Это, конечно, размеры корпуса. Кремниевая пластина внутри него гораздо меньше — в первых 8-разрядных процессорах она представляла собой квадрат со стороной около 6 мм. Корпус нужен для защиты микросхемы и для обеспечения доступа к его каналам ввода и вывода. Назначение каждого из 40 выво- дов микропроцессора 8080 таково: HLDA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 01 READY WAIT A0 A1 A2 +12 В A3 A4 A5 A6 A7 A8 A15 A12 A14 A11 +5 В SYNC DBIN INTE 02 INT HOLD RESET –5 В D0 D1 D2 D3 D7 D6 D5 D4 GND A10 Intel 8080 A9 A13 WR Любому электрическому или электронному устройству не- обходимо электропитание. Одна из странностей процессора 8080 в том, что ему нужны три различных напряжения. Контакт 20 должен подключаться к напряжению 5 В, контакт 11 — к напря- 324 Глава девятнадцатая жению –5 В, а контакт 28 — к 12 В. Контакт 2 подключается к земле. В 1976 г. Intel выпустила процессор 8085, питание кото- рого осуществлялось несколько проще. Все остальные контакты представлены в виде стрелок. Стрелка, направленная от микросхемы, символизирует выход- ной сигнал. Он генерируется процессором и передается для обработки в другие устройства компьютера. Стрелка, направ- ленная к микросхеме, символизирует входной сигнал. Он гене- рируется другими микросхемами компьютера и обрабатыва- ется процессором. Некоторые контакты работают как на вход, так и на выход. Процессору из главы 17 для работы требовалось синхро- низирующее устройство. Процессору 8080 нужно два синхро- низирующих сигнала, отмеченных на схеме   и подводи- мых к контактам 22 и 15. Для генерации этих сигналов удоб- нее всего использовать другую микросхему Intel — генератор тактовых импульсов 8224. К нему достаточно подключить кри- сталл кварца с частотой 18 МГц, и генератор сделает все ос- тальное. Для адресации памяти у любого процессора есть несколь- ко выходных сигналов. Их количество и определяет объем па- мяти, к которой способен обращаться процессор. У 8080 кон- тактов для обращения к памяти 16 (они обозначены символа- ми от A0 до A15), а значит, он может адресовать 216 = 65 536 байт памяти. Процессор 8080 является 8-разрядным, т. е. за раз он спо- собен прочитать из памяти или записать в память 8 битов дан- ных. Обмен данными с памятью происходит через контакты с D0 по D7. На вход и на выход работают только эти 8 контактов. При чтении байта из памяти они работают на вход; при запи- си байта в память — на выход. Еще 10 контактов процессора отведены под управляющие сигналы. Входной сигнал RESET, например, используется для сброса процессора. Наличие выходного сигнала WR означает, что процессор должен записать байт данных в память (этот сигнал соответствует входному сигналу W памяти). Кроме того, иногда управляющие сигналы подаются на контакты с D0 по D7, когда процессор считывает из памяти команду. В ком- пьютерах, построенных на основе 8080, для работы с этими сигналами обычно используется системный контроллер 8228. 325 Два классических микропроцессора Некоторые управляющие сигналы 8080 я опишу позже, в це- лом же имейте в виду, что они прославились своей запутанно- стью, поэтому не занимайтесь самоистязанием и приступайте к их изучению, только если твердо решили собрать компью- тер на основе этого процессора. Допустим, что процессор 8080 соединен с 64 кб оператив- ной памяти, причем у нас есть возможность обмениваться с этой памятью данными независимо от процессора. После сброса процессор 8080 считывает из памяти байт, расположенный по адресу 0000h, подавая 16 нулей на адрес- ные контакты с A0 по A15. Считываемый байт должен содер- жать команду процессора 8080, а сам процесс считывания это- го байта называется выборкой команды (instruction fetch). В компьютере из главы 17 все команды (кроме Остановить) занимали по 3 байта — код операции и двухбайтовый адрес. В процессоре 8080 команды бывают длиной в 1, 2 и 3 байта. Не- которые команды указывают процессору прочитать байт из определенной ячейки памяти, другие — записать байт в опре- деленную ячейку памяти, третьи — произвести какие-то внут- ренние операции, не обращаясь к оперативной памяти. Вы- полнив первую команду, процессор считывает из памяти сле- дующую и т. д. Взятые вместе, эти команды представляют со- бой компьютерную программу, цель которой — заставить процессор что-то сделать. Когда процессор 8080 работает с максимальной частотой 2 МГц, тактовый цикл длится 500 нс (разделив 1 на 2 000 000 секунд, получаем 0,000000500 с). Все команды компьютера из главы 17 занимали по 4 тактовых цикла. Команды из набора 8080 длятся от 4 до 18 тактовых циклов. Это значит, что на выполнение одной команды затрачивается от 2 до 9 микросе- кунд (миллионных долей секунды). Вероятно, лучший способ понять, на что способен данный процессор, состоит в систематическом и полном изучении его набора команд. Набор компьютера из главы 17 в его окончательном вари- анте содержал 12 команд. Набор 8-разрядного процессора мо- жет состоять из 256 команд, если каждому 8-битовому значе- нию соответствует код операции (число команд можно увели- чить, приписав некоторым из них 2-байтовые коды). Процес- сор 8080 так далеко не заходит — у него 244 команды. Число 326 Глава девятнадцатая немаленькое, но, по правде говоря, по способностям 8080 не так уж сильно превосходит компьютер из главы 17. Напри- мер, чтобы умножить или разделить два числа, вам и в 8080 придется писать собственную небольшую программу. Как вы помните из главы 17, код команды из набора про- цессора обычно связывается с мнемонической комбинацией символов, причем некоторые из этих кодов обладают аргумен- тами. Единственное назначение мнемокодов — облегчить че- ловеку работу с командами. Процессор понимает только код команды; о связанном с ним тексте ему ничего не известно. Кстати, для простоты я излагаю мнемокоды из документации к процессору 8080 с некоторой вольностью. У компьютера из главы 17 есть две важные команды, кото- рые мы поначалу назвали Загрузить и Сохранить. Каждая из них занимает 3 байта памяти. Первый байт команды Загру- зить отведен под ее код, а оставшиеся два указывают 8-бито- вый адрес. Содержимое ячейки с этим адресом процессор за- гружает в аккумулятор. Аналогично команда Сохранить запи- сывает содержимое аккумулятора в ячейку, адрес которой ука- зан в команде. Позже мы обнаружили, что для сокращения записи эти команды удобно представить в виде мнемокодов: LOD A,[aaaa] STO [aaaa],A где А означает аккумулятор (место размещения информации для команды Загрузить и ее источник для команды Сохранить), а aaaa — 16-битовый адрес ячейки памяти, обычно записыва- емый в виде 4 шестнадцатеричных цифр. 8-разрядный аккумулятор в 8080 обозначается А, как и в ком- пьютере из главы 17. Есть в наборе 8080 и команды, аналогичные Загрузить и Сохранить. Коды двух этих команд в 8080 равны 3Ah и 32h (причем, за каждым кодом идет 16-битовый адрес), а мне- мокоды — STA (Store Accumulator, сохранить из аккумулятора) и LDA (Load Accumulator, загрузить в аккумулятор). Код Команда 32 STA [aaaa],A 3A LDA A,[aaaa] 327 Два классических микропроцессора Кроме аккумулятора в процессоре 8080 имеется 6 регист- ров (registers), в которых также могут храниться 8-битовые зна- чения. Регистры очень похожи на аккумулятор. Фактически аккумулятор — это регистр особого типа. Подобно аккумуля- тору, регистры являются защелками; процессор может пере- мещать данные из памяти в регистры и из регистров в память. Однако регистры не столь гибки, как аккумулятор. При сло- жении двух чисел, например, результат всегда отправляется в аккумулятор, а не в один из регистров. 6 регистров 8080 называются B, C, D, E, H и L. Первый воп- рос о них обычно звучит так: «А что случилось с F и G?», — а второй: «Куда девались I, J и K?» Ответ в том, что регистры H и L получили свои имена не в честь букв алфавита. H означает «high», а L — «low». Очень часто 8-битовые значения в регист- рах H и L рассматриваются совместно, как 16-битовая пара ре- гистров HL, при этом в H хранится старший (high) байт, а в L — младший (low) байт. Полное 16-разрядное значение часто ис- пользуется как адрес в памяти, в чем мы убедимся чуть позже. Насколько нужны регистры и как мы обошлись без них в компьютере из главы 17? Теоретически без них можно обой- тись, но работать, имея под рукой регистры, удобнее. Многие компьютерные программы оперируют одновременно несколь- кими числами. Производить манипуляции с ними легче, если все числа хранятся не в памяти, а в регистрах микропроцессора. Да и работает программа быстрее: чем реже она обращается к памяти, тем меньше времени затрачивается на ее выполнение. Целых 63 кода отведено в 8080 командам MOV (Move, пе- реместить). Занимают команды из этой группы единственный байт и обычно перемещают содержимое одного регистра в другой (или тот же самый). Большое количество команд MOV — закономерное следствие наличия в микропроцессоре 7 ре- гистров (считая аккумулятор). Вот как выглядят первые 32 кода операции команды MOV. Помните, что целевой регистр указан в левом аргументе, а ре- гистр-источник — в правом аргументе. Код Команда Код Команда 40 MOV B,B 50 MOV D,B 41 MOV B,C 51 MOV D,C 328 Глава девятнадцатая Код Команда Код Команда 42 MOV B,D 52 MOV D,D 43 MOV B,E 53 MOV D,E 44 MOV B,H 54 MOV D,H 45 MOV B,L 55 MOV D,L 46 MOV B,[HL] 56 MOV D,[HL] 47 MOV B,A 57 MOV D,A 48 MOV C,B 58 MOV E,B 49 MOV C,C 59 MOV E,C 4A MOV C,D 5A MOV E,D 4B MOV C,E 5B MOV E,E 4C MOV C,H 5C MOV E,H 4D MOV C,L 5D MOV E,L 4E MOV C,[HL] 5E MOV E,[HL] 4F MOV C,A 5F MOV E,A Очень удобные инструкции! Как только значение попало в один из регистров, вы можете легко переместить его в другой регистр. Обратите внимание на четыре инструкции, в кото- рых используется пара регистров HL, например: MOV B,[HL] Эта инструкция переносит в регистр В байт из ячейки памяти, адрес которой записан в паре регистров HL. Этим она отлича- ется от инструкции LDA, загружающей в аккумулятор содер- жимое ячейки, адрес которой следует сразу за кодом команды. Откуда берется адрес в регистрах HL? Он может попасть туда даже несколькими способами. Например, его можно тем или иным образом вычислить. Словом, команды: LDA A,[aaaa] MOV B,[HL] используются для передачи данных из памяти в процессор, но при этом адрес ячейки памяти указывается в них по-разному. (продолжение) 329 Два классических микропроцессора Первый способ называется прямой адресацией (direct addressing), второй — индексной адресацией (indexed addressing). Следующая группа из 32 команд доказывает, что по адре- су, хранящемуся в регистрах HL, данные не только считыва- ются, но и записываются. Код Команда Код Команда 40 MOV B,B 50 MOV D,B 60 MOV H,B 70 MOV [HL],B 61 MOV H,C 71 MOV [HL],C 62 MOV H,D 72 MOV [HL],D 63 MOV H,E 73 MOV [HL],E 64 MOV H,H 74 MOV [HL],H 65 MOV H,L 75 MOV [HL],L 66 MOV H,[HL] 76 HLT 67 MOV H,A 77 MOV [HL],A 68 MOV L,B 78 MOV A,B 69 MOV L,C 79 MOV A,C 6A MOV L,D 7A MOV A,D 6B MOV L,E 7B MOV A,E 6C MOV L,H 7C MOV A,H 6D MOV L,L 7D MOV A,L 6E MOV L,[HL] 7E MOV A,[HL] 6F MOV L,A 7F MOV A,A Некоторые из этих команд, например: MOV A,A не делают ничего полезного, а команда: MOV [HL],[HL] и вовсе не существует. Код, который должен был бы принад- лежать ей, отдан команде HLT (Halt, остановить). Коды команды MOV становятся более наглядными, если посмотреть на их двоичное представление: 01ццциии 330 Глава девятнадцатая где буквами ццц обозначен целевой регистр, а буквами иии — регистр-источник. Расшифровка этих трехбитовых кодов такова. 000 = Регистр B 001 = Регистр C 010 = Регистр D 011 = Регистр E 100 = Регистр L 101 = Регистр L 110 = Ячейка памяти по адресу HL 111 = Аккумулятор Например, команде: MOV L,E соответствует код операции: 01101011 или 6Bh. Если хотите, проверьте по таблице. Вероятно, где-то внутри процессора 8080 три бита иии ис- пользуются в селекторе «8 на 1», а три бита ццц управляют дешифратором «3 на 8», который определяет в какой регистр направить значение. В качестве 16-битовых пар можно использовать регистры B и C (BC) или D и E (DE). Если в одной из этих пар записан адрес ячейки памяти, в которую нужно записать или из кото- рой нужно считать байт, используйте следующие команды. Код Команда Код Команда 02 STAX [BC],A 0A LDAX A,[BC] 12 STAX [DE],A 1A LDAX A,[DE] Еще одна разновидность команды MOV обозначается мне- мокодом MVI (Move Immediate, переместить непосредствен- но). Она состоит из 2 байтов: кода и байта данных. Этот байт переносится в один из регистров или в ячейку памяти, адрес которой записан в паре регистров HL. 331 Два классических микропроцессора Код Команда 06 MVI B,xx 0E MVI C,xx 16 MVI D,xx 1E MVI E,xx 26 MVI H,xx 2E MVI L,xx 36 MVI [HL],xx 3E MVI A,xx Например, в результате выполнения команды MOV E,37h в регистр E записывается число 37h. Этот способ считается третьим способом адресования к памяти и называется непос- редственной адресацией (immediate addressing). Для выполнения четырех основных арифметических дей- ствий, знакомых нам по процессору, который мы разработа- ли в главе 17, предназначена группа из 32 команд. Эти дей- ствия — сложение (ADD), сложение с переносом (ADC), вы- читание (SUB) и вычитание с заимствованием (SBB). Во всех случаях один из операндов извлекается из аккумулятора; туда же помещается результат. Код Команда Код Команда 80 ADD A,B 90 SUB A,B 81 ADD A,C 91 SUB A,C 82 ADD A,D 92 SUB A,D 83 ADD A,E 93 SUB A,E 84 ADD A,H 94 SUB A,H 85 ADD A,L 95 SUB A,L 86 ADD A,[HL] 96 SUB A,[HL] 87 ADD A,A 97 SUB A,A 88 ADC A,B 98 SBB A,B 89 ADC A,C 99 SBB A,C 8A ADC A,D 9A SBB A,D 332 Глава девятнадцатая Код Команда Код Команда 8B ADC A,E 9B SBB A,E 8C ADC A,H 9C SBB A,H 8D ADC A,L 9D SBB A,L 8E ADC A,[HL] 9E SBB A,[HL] 8F ADC A,A 9F SBB A,A Допустим, в аккумуляторе записан байт 35h, а в регистре B — байт 22h. После выполнения команды: SUB A,B аккумулятор содержит байт 13h. Если в регистре А записан байт 35h, в регистре H — 10h, в регистре L — 7Ch, а в ячейке памяти по адресу 107Ch — байт 4Ah, то выполнение команды: ADD A,[HL] приведет к сложению содержимого аккумулятора (35h) и со- держимого ячейки памяти, адресуемой парой регистров H и L, т. е. 4Ah. Результат (7Fh) будет помещен в аккумулятор. С помощью команд ADC и SBB микросхема 8080 способна складывать и вычитать числа, разрядность которых равна 16, 24, 32 и т. д. Например, если два 16-битовых числа записаны в пары регистров BC и DE, то для их сложения и помещения результата в пару регистров ВС вам понадобится такая после- довательность команд: MOV A,C ; Младший байт ADD A,E MOV C,A MOV A,B ; Старший байт ADC A,D MOV B,A Для сложения используются две команды: ADD для младшего байта и ADC для старшего. Бит переноса, который может по- явиться в результате первого сложения, учитывается при вто- ром сложении. Одно из слагаемых всегда обязательно распо- лагается в аккумуляторе, поэтому даже в такой короткой про- (продолжение) 333 Два классических микропроцессора грамме команда MOV используется четырежды. Вообще в про- граммах для 8080 команды MOV всегда представлены в изо- билии. Настало время поговорить о флажках процессора 8080. В главе 17 мы использовали два флажка — переноса и нуля. В микросхеме 8080 их на 3 больше — добавляются флажки зна- ка (Sign), четности (Parity) и вспомогательного переноса (Auxiliary Carry). Для хранения всех флажков предназначен особый 8-битовый регистр — слово состояния программы (Program Status Word, PSW). Команды LDA, STA и MOV на зна- чения флажков не влияют. Команды ADD, SUB, ADC и SBB изменяют значения флажков следующим образом. • Флажок знака устанавливается в 1, если старший бит ре- зультата равен 1 (результат отрицателен). • Флажок нуля устанавливается в 1, если результат равен 0. • Флажок четности устанавливается в 1, если результат че- тен, т. е. четно число 1 в двоичном представлении резуль- тата. В 0 флажок четности устанавливается, если результат нечетен. Проверку четности иногда используют для конт- роля корректности результата, хотя в программировании 8080 этот флажок практически не применялся. • Флажок переноса устанавливается в 1, если выполнение команды ADD или ADC привело к переносу, а также если выполнение команды SUB или SBB не привело к его появ- лению (в компьютере из главы 17 поведение флажка пере- носа подчинялось другим правилам). • Флажок дополнительного переноса устанавливается в 1, если выполнение команды DAA (о ней чуть позже) приве- ло к переносу из младшей тетрады в старшую. С помощью двух команд значение флажка переноса можно изменить непосредственно: Код Команда Действие 37 STC Установить флажок переноса в 1 3F CMC Заменить значение флажка его дополнением В дополнение к арифметическим командам ADD, ADC, SUB и SBB, которые были доступны и компьютеру из главы 17 (хотя и не с той степенью гибкости), процессор 8080 способен вы- 334 Глава девятнадцатая полнять и логические операции И, ИЛИ и «Исключающее ИЛИ». Как арифметические, так и логические операции вы- полняются в арифметико-логическом устройстве процессора. Код Команда Код Команда A0 AND A,B B0 OR A,B A1 AND A,C B1 OR A,C A2 AND A,D B2 OR A,D A3 AND A,E B3 OR A,E A4 AND A,H B4 OR A,H A5 AND A,L B5 OR A,L A6 AND A,[HL] B6 OR A,[HL] A7 AND A,A B7 OR A,A A8 XOR A,B B8 CMP A,B A9 XOR A,C B9 CMP A,C AA XOR A,D BA CMP A,D AB XOR A,E BB CMP A,E AC XOR A,H BC CMP A,H AD XOR A,L BD CMP A,L AE XOR A,[HL] BE CMP A,[HL] AF XOR A,A BF CMP A,A Команды AND, OR и XOR выполняются побитово, т. е. дей- ствуют независимо на каждую пару битов. Например, после выполнения команд: MVI A,0Fh MVI B,55h AND A,B содержимое аккумулятора будет равняться 05h. Если бы пос- ледняя команда была OR, в аккумулятор было бы записано число 5Fh. Наконец, результатом команды XOR стало бы чис- ло 5Ah. Действие команды CMP (Compare, сравнить) аналогично действию команды SUB с единственным исключением — ре- зультат не сохраняется в аккумуляторе. Иначе говоря, коман- да CMP вычитает одно число из другого и тут же забывает ре- 335 Два классических микропроцессора зультат. В чем ее смысл? Во флажках! Они расскажут вам об отношениях между числами, которые вы сравниваете. Рассмот- рим в качестве примера команды: MVI B,25h CMP A,B После их выполнения содержимое аккумулятора не изменит- ся. Но если оно равно 25h, будет установлен флажок нуля, а если оно меньше 25h — флажок переноса. У восьми арифметических и логических команд имеются также версии для работы непосредственно с байтами. Код Команда Код Команда C6 ADI A,xx E6 ANI A,xx CE ACI A,xx EE XRI A,xx D6 SUI A,xx F6 ORI A,xx DE SBI A,xx FE CPI A,xx Так показанную выше пару команд можно заменить одной: CPI A,25h Еще две команды для работы с аккумулятором: Код Команда 27 DAA 2F CMA Команда CMA (Complement Accumulator, дополнить акку- мулятор) вычисляет дополнение содержимого аккумулятора до 1 — все нули превращаются в единицы, а все единицы — в нули. Если до выполнения команды CMA в аккумуляторе за- писано число 01100101, то после в нем будет число 10011010. Дополнение аккумулятора до 1 вычисляет также команда: XRI A,FFh Команда DAA (Decimal Adjust Accumulator, десятичная кор- рекция аккумулятора) — вероятно в наборе команд 8080 са- мая сложная. Ее выполнением в микропроцессоре занимается специально предназначенное для этого устройство. 336 Глава девятнадцатая Команда DAA помогает программисту осуществлять ариф- метические операции с десятичными числами, представлен- ными в кодировке BCD (binary-coded decimal, десятичное в двоичной кодировке). В данных, закодированных с помощью BCD, каждая тетрада может принимать значения только от 0000 до 1001, символизирующие десятичные цифры от 0 до 9. В формате BCD 8 битов байта используются для хранения двух десятичных цифр. Допустим, в аккумуляторе хранится BCD-значение 27h, соответствующее десятичному числу 27 (в обычной ситуации шестнадцатеричное число 27h равно десятичному 39), а в ре- гистре В — BCD-значение 94h. После выполнения команд: MVI A,27h MVI B,94h ADD A,B аккумулятор будет содержать число BBh, которое, конечно, не может быть числом в формате BCD, так как обе его тетрады превышают 1001. Вот тут-то на помощь и приходит команда DAA. После ее выполнения в аккумулятор записывается чис- ло 21h и устанавливается флажок переноса, поскольку в деся- тичном исчислении 27 + 94 = 121. При работе с BCD-арифме- тикой команда DAA очень полезна. При программировании довольно часто возникает необ- ходимость прибавить к числу 1 или вычесть из него 1. Напри- мер, в программе умножения из главы 17 нам нужно было вычитать 1 из числа, для чего мы складывали его с FFh, т. е. с дополнением до 2 числа –1. В наборе команд 8080 для умень- шения или увеличения на 1 числа в регистре или ячейке памя- ти предусмотрены специальные команды. Код Команда Код Команда 04 INR B 05 DCR B 0C INR C 0D DCR C 14 INR D 15 DCR D 1C INR E 1D DCR E 24 INR H 25 DCR H 2C INR L 2D DCR L 337 Два классических микропроцессора 34 INR [HL] 35 DCR [HL] 3C INR A 3D DCR A Они действуют на все флажки, кроме флажка переноса. В набор команд 8080 входят четыре команды циклического сдвига (rotate), сдвигающие содержимое аккумулятора на 1 бит влево или вправо. Код Команда Действие 07 RLC Сдвинуть аккумулятор влево 0F RRC Сдвинуть аккумулятор вправо 17 RAL Сдвинуть аккумулятор влево через разряд переноса 1F RAR Сдвинуть аккумулятор вправо через разряд переноса Из всех флажков они действуют только на флажок переноса. Допустим, аккумулятор содержит число A7h, или 10100111 в двоичном представлении. RLC сдвигает биты влево. Самый старший бит («выталкиваемый» из числа «сверху») становит- ся самым младшим и определяет состояние флажка переноса. В данном случае в результате сдвига получится число 01001111, а флажок переноса будет установлен в 1. RRC таким же обра- зом сдвигает число вправо. Результат ее действия на число 10100111 будет равен 11010011, флажок переноса также будет установлен в 1. Команды RAL и RAR действуют немного иначе. RAL сдви- гает содержимое аккумулятора влево, записывает во флажок переноса содержимое старшего бита аккумулятора, а преды- дущее значение флажка переноса записывает в младший бит аккумулятора. Например, если аккумулятор содержит число 10100111 и флажок переноса равен 0, то после выполнения RAL в аккумуляторе будет записано число 01001110, а флажок пе- реноса равен 1. При тех же начальных условиях команда RAR приведет к установке флажка переноса в 1 и записи в аккуму- лятор числа 01010011. Команды сдвига очень удобны при умножении или деле- нии числа на 2, что соответствует сдвигу влево или вправо. (продолжение) 338 Глава девятнадцатая Память, к которой обращается процессор, называется па- мятью с произвольным доступом не случайно. Для обращения к любой ячейке памяти процессору достаточно указать ее ад- рес. Память RAM подобна книге, которую можно открыть на любой странице, в отличие от недельной подшивки газет на микропленке. Чтобы добраться до субботнего выпуска, надо промотать пленку за большую часть недели. Такие устройства (микропленки, магнитофонные ленты и т. п.) называются ус- тройствами с последовательным доступом (sequential access). Однако временами удобнее оказывается запоминающее устройство, доступ к которому нельзя назвать ни произволь- ным, ни последовательным. Рассмотрим такую жизненную ситуацию. Вы — самый младший служащий в фирме, которо- му все вышестоящие работники дают поручения, складывая на стол папки с документами, с которыми что-то нужно сде- лать. Порой вы обнаруживаете, что не можете продолжить работу с одной папкой, пока не обработаете другую, связан- ную с ней папку. Вы кладете первую папку на стол, а вторую раскрываете поверх нее. Но вот к вашему столу приближается начальник и передает вам третью папку, работу над которой нужно закончить срочно. Вы, естественно, располагаете ее по- верх предыдущих двух. Но вот беда — для выполнения зада- ния вам нужны документы из еще одной папки, и вот стопка на столе состоит уже из четырех папок… Если задуматься, то по этой стопке легко можно отследить все выполняемые вами задания. Сверху лежит самая важная папка. Закончив работу с ней, вы обращаетесь к следующей папке и т. д. Покончив с самой нижней папкой (с нее вы нача- ли рабочий день), вы вправе отправляться домой. С технической точки зрения такой способ хранения инфор- мации называется стеком (stack). «Стопка» информации растет снизу вверх и убывает сверху вниз. Данные в стеке организова- ны по принципу «последним вошел — первым вышел» (Last In First Out, LIFO). То, что было помещено в стек в последнюю очередь, первым извлекается из него. То, что было помещено в стек в первую очередь, извлекается из него последним. В компьютерах стек используется, конечно, не для хране- ния бумаг, а для хранения чисел, что, впрочем, не менее удоб- но. Помещение информации в стек называется «вталкивани- ем» (push), а ее извлечение — «выталкиванием» (pop). 339 Два классических микропроцессора Допустим, вы пишете на языке ассемблера программу, дан- ные для которой хранятся в регистрах А, В и С. На каком-то этапе вы замечаете, что для выполнения очередного расчета вам нужно использовать эти регистры, а затем восстановить в них исходные значения. Конечно, ничто не мешает вам сохранить числа из регист- ров в ячейках памяти, а затем вернуть их из памяти обратно в регистры. Но при этом придется следить за тем, в каких ячей- ках оказались эти числа, чтобы случайно не записать поверх них другую информацию. Гораздо безопаснее на время поме- стить («втолкнуть») числа в стек: PUSH A PUSH B PUSH C Суть действия этих команд я объясню чуть позже. Пока нам достаточно знать, что они каким-то образом сохраняют содер- жимое регистров в памяти LIFO. После их выполнения вы вольны использовать регистры А, В и С по своему усмотре- нию. Когда надобность в них отпадает, вы извлекаете числа из стека в обратном порядке: POP C POP B POP A Помните: последним вошел — первым вышел. Изменив по- рядок команд POP, вы скорее всего получите ошибку. Стек особенно удобен тем, что его можно использовать в различных фрагментах программы, не заботясь при этом о потенциальных проблемах. Если вы, поместив в стек содер- жимое регистров А, В и С, решили проделать ту же операцию с регистрами D и E, используйте команды: PUSH D PUSH E Для восстановления содержимого регистров необходимо вве- сти в программу команды: POP E POP D 340 Глава девятнадцатая до того как предыдущий фрагмент начнет извлекать из стека содержимое регистров А, В и С. Как работает стек? Для него выделяется область памяти, не занятая другими данными. Для адресации этой области памя- ти в микропроцессор 8080 включен специальный 16-битовый регистр — указатель стека (Stack Pointer, SP). Приведенные выше примеры записи и извлечения из сте- ка содержимого регистров в случае 8080 не совсем корректны. Команда PUSH в этом процессоре записывает в стек 16-бито- вое значение, и такое же значение извлекается из стека коман- дой POP. Поэтому вместо простых команд PUSH C и POP C в этом процессоре применяются 8 команд: Код Команда Код Команда C5 PUSH BC C1 POP BC D5 PUSH DE D1 POP DE E5 PUSH HL E1 POP HL F5 PUSH PSW F1 POP PSW Команда PUSH BC записывает в стек регистры B и C, а POP BC соответственно извлекает их. В 8-битовом регистре PSW, как вы помните, хранится слово состояния программы, т. е. флаж- ки. Две команды в последней строке таблицы в действитель- ности сохраняют в стеке содержимое не только регистра PSW, но и аккумулятора. Чтобы сохранить в стеке все регистры и флажки, используйте команды: PUSH PSW PUSH BC PUSH DE PUSH HL а для восстановления этой информации: POP HL POP DE POP BC POP PSW Чтобы разобраться в работе стека, допустим, что в какой- то момент времени содержимое указателя стека равно 8000h. 341 Два классических микропроцессора Выполнение команды PUSH BC в действительности состоит из четырех шагов. • Указатель стека уменьшается на 1, становясь равным 7FFFh. • Содержимое регистра B сохраняется в ячейку с адресом из указателя стека, т. е. 7FFFh. • Указатель стека уменьшается еще на 1, становясь равным 7FFEh. • Содержимое регистра C сохраняется в ячейку с адресом из указателя стека, т. е. 7FFEh. Команда POP BC прокручивает все эти действия в обрат- ном порядке (при условии, что в указателе стека все еще запи- сан адрес 7FFEh). • В регистр C загружается число из ячейки, адрес которой (7FFEh) записан в указателе стека. • Указатель стека увеличивается на 1, становясь равным 7FFFh. • В регистр B загружается число из ячейки, адрес которой (7FFFh) записан в указателе стека. • Указатель стека увеличивается на 1, становясь равным 8000h. Каждая команда PUSH увеличивает размер стека на 2 бай- та. В принципе не исключена ситуация, при которой стек (ве- роятно, из-за ошибки в программе) так вырастет, что начнет записываться поверх кодов команд и данных, нужных для вы- полнения программы. Это называется переполнением стека (stack overflow). Подобным же образом ошибочное использо- вание лишних команд POP приводит к исчезновению стека (stack underflow). Если вы подключили к процессору 8080 память емкостью 64 кб, начальное значение указателя стека удобно сделать рав- ным 0000h. Первая команда PUSH приведет к его уменьше- нию на 1, т. е. запись стека начнется с адреса FFFFh, и он зай- мет область памяти, максимально далекую от ваших программ, которые, вероятно, будут располагаться, начиная с адреса 0000h. Задать значение указателя стека позволяет команда LXI (Load Extended Immediate, расширенная непосредственная заг- 342 Глава девятнадцатая рузка), предназначенная для записи в 16-битовую пару регис- тров двух байтов, следующих за кодом команды. Код Команда 01 LXI BC,xxxx 11 LXI DE,xxxx 21 LXI HL,xxxx 31 LXI SP,xxxx Команда: LXI BC,527Ah эквивалентна командам: MVI B,52h MVI C,7Ah но занимает в памяти на целый байт меньше. Последняя команда в таблице служит для записи определенного числа в регистр SP, т. е. в указатель стека. Как правило, она оказывает- ся одной из первых команд, выполняемых процессором после перезапуска: 0000h:LXI SP,0000h Для увеличения или уменьшения на 1 содержимого пар регистров и указателя стека служат специальные команды: Код Команда Код Команда 03 INX BC 0B DCX BC 13 INX DE 1B DCX DE 23 INX HL 2B DCX HL 33 INX SP 3B DCX SP Раз уж я заговорил о 16-битовых командах, упомяну еще несколько. Следующие команды складывают содержимое 16- битовой пары регистров с парой HL. Код Команда 09 DAD HL,BC 19 DAD HL,DE 343 Два классических микропроцессора 29 DAD HL,HL 39 DAD HL,SP Их использование также сокращает размер программы. На- пример, чтобы заменить DAD HL,BC, вам понадобилось бы шесть обычных команд: MOV A,L ADD A,C MOV L,A MOV A,H ADC A,B MOV H,A Обычно команду DAD применяют для вычисления адресов в памяти. Из всех флажков она влияет лишь на флажок переноса. Нам осталось рассмотреть еще несколько команд. SHLD и LHLD служат для сохранения в памяти содержимого пары ре- гистров HL и для записи информации из памяти в эту пару регистров. Код Команда Действие 22 SHLD [aaaa],HL Сохранить содержимое HL 2A LHLD HL,[aaaa] Загрузить данные в HL Число из регистра L записывается по адресу [aaaa], а число из регистра H — по адресу [aaaa + 1]. В программный счетчик (Program Counter, PC) и указатель стека можно записать число из пары регистров HL: Код Команда Действие E9 PCHL PC,HL Записать число из HL в PC F9 SPHL SP,HL Записать число из HL в SP PCHL в действительно является разновидностью команды пере- хода, так как следом за ней будет выполнена команда, адрес кото- рой записан в паре регистров HL. Команда SPHL предоставляет альтернативный способ задать значение указателя стека. Две следующие команды позволяют поменять местами со- держимое пары регистров HL либо с «верхним» элементом стека, либо с парой регистров DE. (продолжение) 344 Глава девятнадцатая Код Команда Действие E3 XTHL HL,[SP] Поменять местами HL и «верхний» элемент стека EB XCNG HL,DE Поменять местами HL и DE Теперь о командах ветвления. Как вы помните из главы 17, в процессоре имеется специальный регистр — программный счетчик, — куда записан адрес следующей команды, которую должен выполнить процессор. Обычно команды выполняют- ся последовательно, согласно их расположению в памяти. Но некоторые — а именно команды перехода — позволяют про- цессору отклониться от этого генерального курса. Их выпол- нение приводит к записи в программный счетчик значения, выпадающего из общей последовательности. Хотя отказываться от старого доброго безусловного перехо- да никто вас не призывает, куда удобнее оказываются команды условного перехода, действие которых зависит от состояния определенных флажков, например, флажка переноса или флажка нуля. Именно способность осуществлять условный переход превратила автоматический сумматор из главы 17 в настоящий многоцелевой компьютер. У процессора 8080 пять флажков, четыре из которых ис- пользуются в командах условного перехода. Всего в наборе 8080 предусмотрено 9 команд перехода: одна для безусловного пе- рехода и еще 8 для перехода в зависимости от равенства 0 или 1 флажков нуля, переноса, четности и знака. Прежде чем познакомить вас с ними, я хотел бы ввести еще два типа переходов. Первый из них осуществляет команда CALL (вызов). Она приводит в общем-то к обычному услов- ному переходу с одним исключением: прежде чем записать в программный счетчик новое значение, процессор сохраняет адрес, который был в нем до этого. Где? Конечно, в стеке! Это означает, что в процессоре сохраняется информация, откуда был совершен переход. Сохраненный адрес позволяет процессору вернуться к выполнению прерванной последова- тельности команд. Для этого обратного перехода служит ко- манда RET (Return, вернуться). Она извлекает 2 байта из стека и помещает их в программный счетчик. Наличие команд, подобных CALL и RET, в арсенале любо- го процессора очень важно, так как они позволяют создавать 345 Два классических микропроцессора подпрограммы, т. е. выделять часто используемые фрагменты кода («часто» в данном случае означает «больше одного раза»). Подпрограммы являются главным организующим элементом программы на языке ассемблера. Рассмотрим пример. Разрабатывая программу на языке ас- семблера, вы столкнулись с необходимостью перемножить два байта. Естественно, вы вставляете в код фрагмент, который решает эту задачу, и продолжаете работать. Вскоре потребность в умножении возникает опять. Конечно, можно использовать те же команды, что и раньше. Но нужно ли второй раз встав- лять их в программу? Думаю, нет. Это же напрасная трата па- мяти! Разумно было бы использовать для умножения уже вве- денные команды, но как к ним перейти? Обычная команда бе- зусловного перехода здесь не подойдет, так как она не позво- ляет после умножения вернуться обратно. Вот здесь-то в дей- ствие и вступают команды CALL и RET. Набор команд, осуществляющих умножение двух байтов, — прекрасный пример подпрограммы. Рассмотрим ее подроб- нее. В главе 17 перемножаемые байты и произведение храни- лись в ячейках памяти. В подпрограмме для процессора 8080 мы разместим множители в регистрах В и С, а произведение запишем в пару регистров HL. Multiply: PUSH PSW ; Сохраняем регистры, которые PUSH BC ; будут меняться SUB H,H ; Записываем 0000h в HL (результат) SUB L,L MOV A,B ; Записываем множитель в А CPI A,00h ; Если он 0, завершаем JZ AllDone MVI B,00h ; Записываем 0 в старший байт BC MultLoop: DAD HL,BC ; Складываем HL и BC DEC A ; Уменьшаем множитель на 1 JNZ MultLoop ; Возврат на начало цикла, если ; не 0 346 Глава девятнадцатая AllDone: POP BC ; Восстанавливаем регистры POP PSW RET ; Возврат Первая строчка подпрограммы начинается с метки Multiply, соответствующей адресу в памяти, по которому расположена подпрограмма. Начинается выполнение подпрограммы с двух команд PUSH. Обычно регистры, используемые в подпрограм- ме, желательно сохранять, а после окончания ее работы — вос- станавливать. Затем подпрограмма обнуляет содержимое регистров H и L. То же действие можно выполнить и с помощью команд MVI, но их понадобилось бы 4, а не 2, как команд SUB. По заверше- нии работы подпрограммы пара регистров HL будет содержать искомое произведение. Следующий шаг: перемещение содержимого регистра В в аккумулятор и проверка его равенства 0. Если множитель ра- вен 0, произведение также равно 0, и работу подпрограммы можно считать законченной. В регистры H и L ноль уже запи- сан, так что можно с помощью команды JZ (переход, если 0) переходить прямо к двум завершающим командам POP. Если множитель 0 не равен, программа обнуляет регистр В. Теперь один из множителей содержится в аккумуляторе, второй — в паре регистров ВС. Команда DAD складывает мно- житель (ВС) с результатом (HL). Значение множителя в акку- муляторе уменьшается на 1. Если результат не равен 0, коман- да JNZ (переход, если не 0) приводит к повторному сложению ВС и HL. Выполнение этого короткого цикла продолжается, пока содержимое аккумулятора не обратится в 0 (отмечу, что более эффективную программу умножения для процессора 8080 можно написать с помощью команд сдвига). Если в основной программе возникла необходимость ум- ножить 25h на 12h, это делают команды: MVI B,25h MVI C,12h CALL Multiply Команда CALL записывает в стек содержимое программного счетчика, т. е. адрес команды, стоящей следом за командой CALL. Затем происходит переход к команде, на которую ука- 347 Два классических микропроцессора зывает метка Multiply, т. е. к началу подпрограммы. Когда про- изведение в подпрограмме вычислено, выполняется команда RET, в результате чего в программный счетчик возвращается значение из стека. Далее выполняется команда, идущая за CALL. В набор команд процессора 8080 входят также условные команды вызова подпрограммы и возвращения из нее, но ис- пользуются они гораздо реже обычных команд условного пе- рехода: Условие Код Команда Код Команда Код Команда Нет C9 RET C3 JMP aaaa CD CALL aaaa Не ноль C0 RNZ C2 JNZ aaaa C4 CNZ aaaa Ноль C8 RZ CA JZ aaaa CC CZ aaaa Нет D0 RNC D2 JNC aaaa D4 CNC aaaa переноса Есть D8 RC DA JC aaaa DC CC aaaa перенос Результат E0 RPO E2 JPO aaaa E4 CPO aaaa нечетный Результат E8 RPE EA JPE aaaa EC CPE aaaa четный Результат F0 RP F2 JP aaaa F4 CP aaaa положителен Результат F8 RM FA JM aaaa FC CM aaaa отрицателен Вы, вероятно, и без меня знаете, что к процессору подклю- чают не только память. Компьютер — ничто без устройств ввода и вывода, позволяющих ему обмениваться информаци- ей с окружающим миром. Самые популярные устройства ввода и вывода — клавиатура и дисплей. Как процессор обменивается информацией с периферий- ными (peripheral) устройствами, т. е. со всеми подключенны- ми к нему устройствами, кроме памяти? Обычно внешние устройства конструируют так, что с точки зрения подключе- ния к процессору они ведут себя подобно памяти. Микропро- цессор считывает информацию из устройства и записывает ее, задавая адрес, который соответствует этому устройству. В не- 348 Глава девятнадцатая которых микропроцессорах адреса внешним устройствам вы- деляются из обычного адресного пространства. Такая органи- зация называется вводом-выводом с распределением памяти (memory-mapped input/output). В процессоре 8080 для уст- ройств ввода-вывода 256 адресов зарезервированы в дополне- ние к основной памяти с 65 536 адресами. Эти дополнитель- ные адреса называются портами ввода-вывода (input/output ports). Адреса портов подаются на адресные линии с A0 по A7. От адресов памяти их с помощью системного контроллера 8228 отличают специальные управляющие сигналы. Запись содержимого аккумулятора в порт осуществляет команда OUT. Адрес порта указывается вслед за ее кодом. Для считывания байта в аккумулятор предназначена команда IN. Код Команда D3 OUT pp DB IN pp В некоторых случаях периферийным устройствам надо «привлечь внимание» процессора. Например, когда вы нажи- маете клавишу на клавиатуре, процессору, как правило, жела- тельно знать об этом сразу. Осуществляет это механизм пре- рываний (interrupts) — сигналов, поступающих в процессор 8080 через вход INT. После перезапуска процессор 8080 на прерывания не реа- гирует. Чтобы разрешить прерывания, в программу нужно вставить команду EI (Enable Interrupts, разрешить прерывания), а чтобы отказаться от реагирования на них — DI (Disable Interrupts, запретить прерывания). Код Команда F3 DI FB EI Когда прерывания разрешены, подается сигнал на выход процессора INTE. Когда устройству нужно прервать работу процессора, оно подает сигнал на вход INT. Процессор извле- кает из памяти очередную команду программы, но выполняет не ее, а одну из следующих: 349 Два классических микропроцессора Код Команда Код Команда C7 RST 0 E7 RST 4 CF RST 1 EF RST 5 D7 RST 2 F7 RST 6 DF RST 3 FF RST 7 Действуют они подобно команде CALL в том смысле, что при их выполнении в стек записывается содержимое про- граммного счетчика. Но переход при этом осуществляется по строго определенным адресам: команда RST 0 передает управ- ление команде по адресу 0000h, RST 1 — команде по адресу 0008h и т. д. до RST 7, которая передает управление команде по адресу 0038h. По этим адресам должны располагаться фраг- менты кода, реагирующие на прерывания. Допустим, что пре- рывание от клавиатуры привело к срабатыванию RST 4. Зна- чит, по адресу 0020h должны располагаться команды для счи- тывания с клавиатуры введенного байта (подробнее об этом в главе 21). Я описал 243 команды. Неиспользованными остались коды 08h, 10h, 18h, 20h, 28h, 30h, 38h, CBh, D9h, DDh, EDh и FDh. В заключение упомяну еще один код и соответствую- щую команду. Код Команда 00 NOP NOP (No Operation, нет операции) не выполняет никаких дей- ствий. Зачем она нужна? Например, для заполнения пустых ячеек. Обсуждать с теми же подробностями процессор 6800 фир- мы Motorola я не собираюсь, поскольку он как по конструк- ции, так и по действию довольно похож на процессор 8080. Вот какие у него есть выводы. 350 Глава девятнадцатая V SS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 A12 A13 A14 A15 D7 D6 D5 D4 D3 D2 D1 D0 R/W DBE 02 TSC RESET A11 A10 A9 A8 A7 A6 A5 A4 A3 A2 A1 A0 V CC BA NMI VMA IRQ 01 HALT V SS MC6800 Контакт VSS соединяется с землей, контакт VCC — с питанием 5 В. Подобно микросхеме 8080, у процессора 6800 имеется 16 адресных входов и 8 сигналов для данных, применяемых как для ввода, так и для вывода информации. На вход IRQ подает- ся запрос на прерывание (interrupt request). Порты ввода-выво- да в 6800 не используются. Адреса устройств берутся из обыч- ного адресного пространства. Есть в процессоре 6800 16-битовый программный счетчик, 16-битовый указатель стека, 8-битовый регистр состояния (для флажков) и два 8-битовых аккумулятора А и В. В считается именно аккумулятором, а не регистром, поскольку с ним мож- но выполнять все те же операции, что и с А. Других 8-битовых регистров в процессоре нет. 16-битовые значения в 6800 хранятся в индексном регистре (index register), подобном паре регистров HL в 8080. Адрес для многих команд вычисляется суммированием содержимого ин- дексного регистра и байта, следующего за кодом команды. 351 Два классических микропроцессора Хотя набор команд процессора 6800 в целом идентичен набору процессора 8080, очевидно, что численные и мнемо- нические коды этих команд совершенно различны. Вот, напри- мер, как выглядят в наборе 6800 команды перехода. Код Команда Действие 20 BRA Переход 22 BHI Переход, если больше 23 BLS Переход, если меньше или равно 24 BCC Переход, если нет переноса 25 BCS Переход, если есть перенос 26 BNE Переход, если не равно 27 BEQ Переход, если равно 28 BVC Переход, если нет переполнение 29 BVS Переход, если есть переполнение 2A BPL Переход, если плюс 2B BMI Переход, если минус 2C BGE Переход, если больше или равно 0 2D BLT Переход, если меньше 0 2E BGT Переход, если больше 0 2F BLE Переход, если меньше или равно 0 Флажка четности в 6800 нет, зато в отличие от 8080 есть фла- жок переполнения. Действие некоторых команд перехода за- висит от сочетания флажков. Различие наборов команд 8080 и 6800 удивления, разуме- ется, не вызывает. Две этих микросхемы разрабатывались практически одновременно двумя группами инженеров двух различных компаний. Поэтому они и несовместимы: машин- ные коды одного процессора не работают на другом процес- соре. Даже программу на языке ассемблера, написанную для одного процессора, нельзя перевести в машинные коды дру- гого процессора. О программах, которые работают на разных процессорах, мы поговорим в главе 24. 352 Глава девятнадцатая Между процессорами 8080 и 6800 есть и другое интересное отличие. В обоих наборах есть команда LDA, загружающая в аккумулятор содержимое ячейки памяти. В 8080, например, следующая последовательность байтов: 3Ah 7Bh 34h Команда LDA процессора 8080 приведет к записи в аккумулятор байта из ячейки с адресом 347Bh. Теперь сравните это с командой LDA из набора процес- сора 6800 в так называемом расширенном режиме адресации: B6h 7Bh 34h Команда LDA процессора 6800 Эта последовательность байтов приведет к записи в аккуму- лятор байта из ячейки с адресом 7B34h. В различии кодов команд (3Ah в 8080 и B6h в 6800) нет, как мы уже говорили, ничего удивительного. Но процессоры так- же по-разному обрабатывают байты, которые следуют за ко- дом команды. В программе для процессора 8080 считается, что сначала за кодом идет младший байт адреса, а потом — стар- ший. В программе же для процессора 6800 сначала идет стар- ший байт! Это фундаментальное различие в способе хранения мно- гобайтовых величин между процессорами фирм Intel и Motorola так и не устранено. И в наши дни в процессорах фирмы Intel многобайтовые величины хранятся, начиная с младшего байта, а в процессорах фирмы Motorola — начиная со старшего. Помните из-за чего Лилипутия воевала с государством Бле- фуску? Из-за разногласий по поводу того, с какого конца над- лежит разбивать вареные яйца: с острого или тупого. Споры между сторонниками двух способов записи многобайтовых 353 Два классических микропроцессора величин сродни спорам между остроконечниками и тупоко- нечниками (так Джонатан Свифт назвал приверженцев враж- дующих партий) и настолько же лишены смысла (хотя дол- жен признаться, что мне самому способ, использованный в компьютере из главы 17, не очень нравится!). Сами по себе оба метода «правильны», но различие между ними создает боль- шие трудности при необходимости переносить информацию с компьютеров остроконечников (Intel) на компьютеры тупо- конечников (Motorola). Какая судьба ожидала процессоры 8080 и 6800? Первый стал основой устройства, которое иногда называют первым персо- нальным компьютером, хотя правильнее было бы называть его первым домашним компьютером. Это устройство — компью- тер «Альтаир 8800», в январе 1975 г. украсивший обложку жур- нала «Popular Electronics». Взгляните на него: лампочки, переключатели — все это нам знакомо, правда? Именно так выглядел пульт управления па- мятью, который я описал вам в главе 16. За процессором 8080 последовали чипы 8085 и Z-80 фир- мы Zilog — конкурента корпорации Intel, основанного быв- 354 Глава девятнадцатая шим работником последней Федерико Фаггином (Federico Faggin), который принимал активное участие в работе над мик- росхемой 4004. Процессор Z-80 был полностью совместим с 8080, но отличался от него наличием множества очень полез- ных дополнительных команд. В 1977 г. появился компьютер «Apple II» компании Apple Computer, основанной Стивеном Джобсом (Steven Jobs) и Сте- фаном Возняком (Stephen Wozniak). В нем был применен усо- вершенствованный вариант 6800 — дешевый микрочип 6502 фирмы MOS Technology. В июне 1978 г. фирма Intel выпустила 16-битовый процес- сор 8086 с адресным пространством 1 Мб. Его машинные коды были несовместимы с кодами 8080, зато включали специаль- ные команды для умножения и деления. Годом позже появил- ся процессор 8088, внутренне идентичный 8086, но адресовав- ший память побайтово. Это позволяло использовать в сочета- нии с ним широко распространенные вспомогательные мик- росхемы, разработанные для процессора 8080. На процессоре 8088 работал персональный компьютер 5150 фирмы IBM (бо- лее известный как IBM PC), появившийся осенью 1981 г. IBM оказала на рынок персональных компьютеров громад- ное влияние. Многие компании занялись выпуском компью- теров, совместимых с IBM PC (смысл понятия «совместимость» я разъясню в следующих главах). В 1982 г. семейство процес- соров x86 пополнилось чипами 186 и 286, в 1985 г. появился 32-разрядный процессор 386, в 1986 г. — 486. С 1993 г. в IBM- совместимых компьютерах используются процессоры Pentium фирмы Intel. Хотя наборы команд этих процессоров постоян- но расширяются, в них неизменно поддерживаются и коман- ды всех предыдущих версий, начиная с 8086. Прямым наследником процессора 6800 стал 16-разрядный чип 68000 фирмы Motorola, ставший в 1984 г. основой компь- ютера «Apple Macintosh». Этот процессор и последовавшие за ним процессоры той же серии (иногда ее называют 68К) и по сей день имеют многочисленных поклонников. С 1996 г. в компьютерах «Macintosh» используется микро- процессор PowerPC, разработанный совместно компаниями Motorola, IBM и Apple. Он построен с использованием архи- тектуры RISC (Reduced Instruction Set Computing, вычисления 355 Два классических микропроцессора с сокращенным набором команд), в которой предпринята по- пытка повысить быстродействие процессора за счет его упро- щения в некоторых отношениях. В RISC-компьютере все ко- манды, как правило, имеют одну и ту же длину (в PowerPC она равна 32 битам), доступ к памяти органичен командами заг- рузки и сохранения, и вообще команды выполняют максималь- но простые действия. Обычно RISC-компьютеры снабжены большим числом регистров, чтобы избежать частых обраще- ний к памяти. Набор команд PowerPC кардинально отличается от набора серии 68К, поэтому запустить на PowerPC программу для про- цессора 68К нельзя. Однако в процессорах PowerPC, устанав- ливаемых на компьютерах «Apple Macintosh», предусмотрена возможность эмуляции процессора 68К. Программа-эмулятор по одному просматривает все машинные коды программы для 68К и выполняет соответствующее действие. Это, конечно, не так быстро, как программа, изначально написанная для PowerPC, но работает. Согласно закону Мура количество транзисторов в микро- процессорах удваивается каждые полтора года. Для чего ис- пользуются все эти дополнительные транзисторы? Некоторые из них позволили повысить разрядность процес- сора, другие — расширить набор его команд. В большинстве современных микропроцессоров имеются специальные коман- ды для арифметических операций с вещественными числами (подробнее в главе 23). Специальные команды разработаны для выполнения многократных вычислений, потребность в кото- рых возникает при отображении на экране компьютера графи- ческих изображений (в том числе движущихся). В современных процессорах используется несколько мето- дов повышения быстродействия, в частности, конвейеризация (pipelining). Выполняя одну инструкцию, процессор заранее считывает следующую, пытаясь предсказать возможное ветв- ление программы. Еще одно нововведение — кэш (cache), сверхбыстрая память внутри процессора, в которой хранятся недавно выполнявшиеся команды. Когда в программе встре- чается короткий цикл, кэш позволяет ускорить его выполне- ние за счет того, что команды не нужно многократно считы- вать из памяти. Для всех этих усовершенствований необходи- мы новые логические схемы, а значит, новые транзисторы. 356 Глава девятнадцатая Я уже говорил, что процессор — лишь часть завершенной компьютерной системы (хотя и самая важная). Такую систему мы спроектируем в главе 21, а пока обратимся к тому, как хра- нить в памяти нечто, отличное от кодов команд и чисел. Итак, возвращаемся в первый класс и учимся читать и писать. Глава 20 ASCII — символы нашего времени В памяти компьютера могут содержаться только биты, поэто- му любую информацию, которую мы рассчитываем сохранить, сначала нужно преобразовать в цифровую форму. В том, что битами можно представлять числа и команды, мы уже убеди- лись. Пора заняться текстом. Ведь именно в виде текста — книг, журналов, газет — накоплена большая часть информации в нашем мире. Конечно, со временем мы захотим хранить на компьютере и звуки, и рисунки, и видеозаписи, но начинать нужно с самого легкого — с букв. Для представления текста в цифровом формате мы долж- ны придумать систему кодирования, в которой каждой букве соответствовал бы уникальный код. Свои коды понадобятся и для цифр, и для знаков препинания, поскольку без них в тек- сте не обойтись. Короче, нам нужны коды для всех буквенно- цифровых (alphanumeric) символов. Такие системы иногда на- зывают наборами кодированных символов (coded character set), а отдельно взятый код — кодом символа (character code). Прежде всего мы должны задаться вопросом: а сколько битов нам понадобится для этих кодов? Вопрос не из легких. Размышляя о цифровом представлении текста, не будем забегать вперед. Текст, который мы привыкли видеть на стра- ницах книг, журналов и газет, как правило, отформатирован 358 Глава двадцатая — по меньшей мере разбит на абзацы со строками заданной длины. Но для понимания смысла текста это форматирова- ние несущественно. Прочитав рассказ в журнале, а затем мно- го лет спустя встретив его в книге, мы не считаем, что рассказ изменился только потому, что в книге он разбит на строки большей длины. Иными словами, откажемся пока от представления о тек- сте как об отформатированных абзацах на двумерной печат- ной странице. Будем считать его одномерным потоком букв, цифр, знаков препинания и, возможно, дополнительных сим- волов, указывающих на окончание абзаца. Столь же малое значение имеет и то, что в журнале и книге рассказ набран разными шрифтами. Журнальная версия на- чинается так: Зовите меня Исмаил. а книжная — так: Зовите меня Исмаил. Ну и стоит ли нам из-за этого переживать? Наверное, нет. Да, конечно, шрифт влияет на восприятие текста, но смысл рас- сказа не изменится от изменения шрифта. Кроме того, исход- ный шрифт всегда можно вернуть. Продолжаем упрощать задачу. Мы откажемся не только от шрифта, но и от различных его начертаний: ни полужирного, ни курсива, ни подчеркивания, ни цвета, ни верхних и нижних индексов, ни диакритических знаков. Никаких  . Толь- ко простой текст, набранный 26 буквами латинского алфавита. На самом деле с двоичным представлением букв мы уже стал- кивались, когда говорили об азбуках Морзе и Брайля. Обе эти системы кодирования прекрасно работают там, где должны ра- ботать, но для компьютеров они малопригодны. В азбуке Мор- зе, например, коды имеют разную длину: короткими кодами обозначаются часто используемые буквы, длинными — менее популярные. Телеграфисты, конечно, этому рады, но вот в ком- пьютере такое кодирование было бы неудобным. Кроме того, в азбуке Морзе не различаются прописные и строчные буквы. В шрифте Брайля все символы имеют одну и ту же длину — в компьютерах это предпочтительнее. Каждая буква представ- лена 6 битами. Прописные и строчные буквы различаются, хотя 359 ASCII — символы нашего времени для этого применяется специальный escape-код, указывающий, что следующая за ним буква — прописная. Фактически это зна- чит, что для кодирования прописных букв нужен не один код, а два. Цифры представляются с помощью кода переключения. Стоящие после него символы интерпретируются как цифры, пока следующий код переключения не укажет на необходимость возврата к буквенной интерпретации. Наша цель — разработать систему кодирования, в кото- рой предложение У меня 27 сестер. шифровалось бы набором кодов, состоящих из заданного чис- ла битов. Одни коды будут обозначать буквы, другие — знаки препинания, третьи — цифры. Отдельный код понадобится даже для представления пробела между словами. В приведен- ном предложении 17 символов (включая пробелы). Последо- вательность кодов для представления таких предложений час- то называют текстовой строкой (string). Необходимость введения специальных кодов для цифр может показаться странной. На протяжении многих глав мы записывали числа в двоичном представлении, с какой же ста- ти теперь не кодировать цифры 2 и 7 в нашем предложении как 10 и 111? Но на самом деле оказывается, что цифры удоб- но кодировать наравне с буквами, поэтому коды цифр в тек- сте не связаны с их реальным численным значением. Вероятно, самым экономичным текстовым кодом можно считать 5-битовый код, разработанный в 1874 г. для печатаю- щего телеграфного аппарата служащим французской теле- графной службы Эмилем Бодо (Emile Baudot). «На вооруже- ние» этот код был принят в 1877 г. Позже этот код модернизи- ровал Дональд Мюррей (Donald Murray), а в 1931 г. комитет CCITT (Comit  Consultatif International T l graphique et T l phonique), известный теперь как Международный теле- коммуникационный союз (International Telecommunication Union, ITU), принял его в качестве стандарта. Официальное название этого кода — Международный телеграфный алфа- вит №2 (International Telegraph Alphabet No. 2, ITA-2), но в про- сторечии его по-прежнему называют кодом Бодо, хотя пра- вильнее было бы называть его кодом Мюррея. В XX в. кодировку Бодо часто применяли в телетайпных аппаратах. Клавиатура аппарата Бодо напоминает клавиатуру 360 Глава двадцатая обычной пишущей машинки за исключением того, что состо- ит она всего из 30 клавиш и пробела. Клавиши телетайпа яв- ляются по сути электрическими переключателями. Их нажа- тие приводит к генерации двоичного кода и его посылке по выходному кабелю, один бит за другим. Кроме того, в теле- тайпный аппарат входит печатающее устройство. Коды, по- ступающие в телетайп по входному кабелю, управляют элект- ромагнитами, которые отпечатывают на бумаге соответству- ющие символы. Поскольку система Бодо является 5-битовой, в ней всего 32 кода, принимающих шестнадцатеричные значения от 00h до 1Fh. В таблице показано их соответствие буквам алфавита. Шестнадцате- Буква Бодо Шестнадцате- Буква Бодо ричный код ричный код 00 10 E 01 T 11 Z 02 Возврат каретки 12 D 03 O 13 B 04 Пробел 14 S 05 H 15 Y 06 N 16 F 07 M 17 X 08 Перевод строки 18 A 09 L 19 W 0A R 1A J 0B G 1B Переключение на цифры 0C I 1C U 0D P 1D Q 0E C 1E K 0F V 1F Переключение на буквы Код 00h в системе не используется. Из оставшихся кодов 26 обозначают буквы латинского алфавита, и еще 5 имеют спе- циальные значения. 361 ASCII — символы нашего времени Код 04h соответствует пробелу, т. е. интервалу между слова- ми. Коды 02h и 08h называются возвратом каретки (Carriage Return) и переводом строки (Line Feed). Эта терминология про- исходит от пишущих машинок. Когда, печатая на машинке, вы доходите до конца строки, вам нужно сделать две вещи (обычно с помощью специального рычага или кнопки) — во-первых, сдви- нуть каретку до упора вправо, чтобы начать следующую строку у левого края бумаги (это и есть возврат каретки), во-вторых, прокрутить валик, чтобы новая строка началась ниже только что напечатанной (это перевод строки). В аппаратах Бодо для генера- ции двух этих кодов использовались разные клавиши. Но где же в кодировке Бодо цифры и знаки препинания? А вот для них-то и нужен код 1Bh — переключение на цифры. Все коды, следующие за ним, интерпретируются как цифры и знаки препинания, пока в последовательности кодов не попа- дется 1Fh — переключение на буквы. Вот какие коды исполь- зуются для цифр и знаков препинания. Шестнадцате- Буква Бодо Шестнадцате- Буква Бодо ричный код ричный код 00 10 3 01 5 11 + 02 Возврат каретки 12 Кто это? 03 9 13 ? 04 Пробел 14 ‘ 05 # 15 6 06 , 16 $ 07 . 17 / 08 Перевод строки 18 - 09 ) 19 2 0A 4 1A Сигнал 0B & 1B Переключение на цифры 0C 8 1C 7 0D 0 1D 1 0E : 1E ( 0F = 1F Переключение на буквы 362 Глава двадцатая В стандарте ITU коды 05h, 0Bh и 16h не заданы. Предполагается, что в каждом языке у них собственные значения. В таблице дана их расшифровка, принятая в США. В Европе эти же коды иног- да используются для обозначения букв с диакритическими зна- ками. Получив код Сигнал, телетайп издает звуковой сигнал. В ответ на код «Кто это?» телетайп передает данные о себе. Как и в азбуке Морзе, в кодировке БОДО прописные и строчные буквы не различаются. Предложение: I SPENT $25 TODAY. (Сегодня я потратил 25 долларов) кодируется последователь- ностью шестнадцатеричных кодов: 0C 04 14 0D 10 06 01 04 1B 16 19 01 1F 04 01 03 12 18 15 1B 07 02 08 где используется три кода-переключателя: 1Bh перед числом, 1Fh после числа и еще один код 1Bh перед точкой. В конце стро- ки стоят коды возврата каретки и перевода строки. К сожалению, если вы направите эту последовательность на печатающее устройство два раза подряд, то получите в ре- зультате нечто подобное: I SPENT $25 TODAY. 8 ’03,5 $25 TODAY. Что произошло? В конце первой строки на печатающее уст- ройство был подан код переключения на цифры, поэтому сим- волы в начале второй строки интерпретируются как цифры и знаки препинания. Подобные неприятности — прямое следствие использования кодов-переключателей. Хотя код Бодо, безусловно, очень эконо- мичен, для цифр, знаков препинания, а также строчных и про- писных букв предпочтительнее использовать отдельные коды. Посчитаем, сколько битов нам понадобится для системы кодирования, которая была бы лучше системы Бодо. Итак, нам нужно 52 кода для прописных и строчных латинских букв и еще 10 кодов для цифр от 0 до 9. Это уже 62. Добавьте несколь- ко знаков препинания, и рубеж в 64 кода перейден, т. е. 6-ю битами мы не обойдемся. С другой стороны, до следующего рубежа в 128 кодов нам пока далеко, а значит, 8 битов нам не понадобится. 363 ASCII — символы нашего времени Получаем ответ: для представления текстов, написанных латинскими буквами с различающимися строчными и пропис- ными буквами, нам нужны 7-битовые коды. Как должны выглядеть эти коды? Да как угодно. Если бы мы самостоятельно собрали компьютер и все периферийное оборудование к нему, а также самостоятельно разработали все программы к нему да еще никогда не пытались бы соединить его с другими компьютерами, мы могли бы придумать систе- му кодов самостоятельно. Для этого достаточно приписать каждому символу уникальное сочетание семи нулей и единиц. Но в реальности компьютеры редко существуют сами по себе. Для обмена информацией всем пользователям лучше договориться и применять одни и те же коды. После этого тек- стовую информацию легко можно будет переносить с одного компьютера на другой. При разработке кодов, вероятно, стоит учесть и другие со- ображения. Например, коды буквам лучше назначать упоря- доченно: последовательные коды последовательным буквам алфавита. В будущем это весьма облегчит сортировку текста. Стандартная система кодирования текста, конечно, уже со- здана. Она называется Американским стандартным кодом для обмена информацией (American Standard Code for Information Interchange, ASCII). Кодировка ASCII была принята в 1967 г. и по сей день остается одним из важнейших стандартов компьютерной индустрии. За одним большим исключением (о нем позже) кодировка ASCII применяется в компьютерах практически при любых работах с текстом. ASCII — это 7-битовая кодировка. Ее коды принимают зна- чения от 0000000 до 1111111 или в шестнадцатеричном выра- жении от 00h до 7Fh. Постепенно мы рассмотрим их все, толь- ко начнем не с самого начала. В каком-то смысле понять на- значение первых 32 символов сложнее, чем остальных, поэто- му мы сначала познакомимся со второй 32-кодовой группой, в которую включены цифры и знаки препинания. Шестнадцате- Символ ASCII Шестнадцате- Символ ASCII ричный код ричный код 20 Пробел 30 0 21 ! 31 1 22 " 32 2 364 Глава двадцатая Шестнадцате- Символ ASCII Шестнадцате- Символ ASCII ричный код ричный код 23 # 33 3 24 $ 34 4 25 % 35 5 26 & 36 6 27 ‘ 37 7 28 ( 38 8 29 ) 39 9 2A * 3A : 2B + 3B ; 2C , 3C < 2D - 3D = 2E . 3E > 2F / 3F ? Обратите внимание на символ 20h — это пробел для разделе- ния слов и предложений. В следующую группу из 32 кодов входят прописные буквы и дополнительные знаки препинания, которых на клавиатуре пишущих машинок, как правило, нет. Шестнадцате- Символ ASCII Шестнадцате- Символ ASCII ричный код ричный код 40 @ 50 P 41 A 51 Q 42 B 52 R 43 C 53 S 44 D 54 T 45 E 55 U 46 F 56 V 47 G 57 W 48 H 58 X 49 I 59 Y 4A J 5A Z (продолжение) 365 ASCII — символы нашего времени 4B K 5B [ 4C L 5C \ 4D M 5D ] 4E N 5E ^ 4F O 5F _ Следующая группа из 32 кодов — строчные буквы и еще несколько знаков препинания. Шестнадцате- Символ ASCII Шестнадцате- Символ ASCII ричный код ричный код 60 ‘ 70 p 61 a 71 q 62 b 72 r 63 c 73 s 64 d 74 t 65 e 75 u 66 f 76 v 67 g 77 w 68 h 78 x 69 i 79 y 6A j 7A z 6B k 7B { 6C l 7C | 6D m 7D } 6E n 7E ~ 6F o Заметьте: символа, соответствующего коду 7Fh, в таблице нет. Если вы еще не сбились со счета, то знаете, что всего в трех таблицах я описал 95 кодов. Поскольку кодировка ASCII является 7-битовой, в ней доступно всего 128 кодов, значит, осталось описать еще 33. Вы узнаете о них буквально через пару минут. Текстовая строка: Hello, you! (продолжение) 366 Глава двадцатая в кодировке ASCII представляется кодами: 48 65 6C 6C 6F 2C 20 79 6F 75 21 Помимо кодов букв, в ней встречаются коды запятой (2Ch), пробела (20h) и восклицательного знака (1h). Взгляните на еще одно короткое предложение: I am 12 years old. и его представление в формате ASCII: 49 20 61 6D 20 31 32 20 79 65 61 72 73 20 6F 6C 64 2E Заметьте: число 12 в этой строке представлено кодами 31h и 32h, т. е. ASCII-кодами цифр 1 и 2. Если число 12 — часть тек- ста, для его представления нельзя применять шестнадцатерич- ные коды 01h и 02h, или BCD-код 12h, или его шестнадцате- ричное представление 0Ch. Все эти числа в кодировке ASCII означают что-то другое. Коды прописных букв в ASCII отличаются от кодов соот- ветствующих строчных букв на 20h. Благодаря этому легко на- писать программу, которая заменяла бы все строчные буквы в текстовой строке прописными. Допустим, некоторую область в памяти занимает текстовая строка, по 1 байту на символ. Ниже в подпрограмме для процессора 8080 считается, что адрес пер- вого символа строки записан в паре регистров HL; в регистре С хранится длина строки в символах: Capitalize: MOV A,C ; C = число оставшихся символов CPI A,00h ; Сравнить с 0 JZ AllDone ; Если С = 0, закончить MOV A,[HL] ; Извлечь следующий символ CPI A,61h ; Меньше, чем "a"? JC SkipIt ; Если да, игнорировать CPI A,7Bh ; Больше, чем "z"? JNC SkipIt ; Если да, игнорировать SBI A,20h ; Буква строчная, значит, ; вычитаем 20h MOV [HL],A ; Сохранить символ 367 ASCII — символы нашего времени SkipIt: INX HL ; Перейти к следующему символу DCR C ; Уменьшить счетчик на 1 JMP Capitalize ; Вернуться к началу AllDone: RET Оператор, в котором из кода строчной буквы вычитается 20h для преобразования ее в прописную, можно заменить на: ANI A,DFh Команда ANI (AND Immediate) выполняет побитовую опера- цию И между содержимым аккумулятора и числом DFh или в двоичном представлении 11011111. Побитовой я называю опе- рацию, выполняемую отдельно для каждой пары битов, со- ставляющих ее операнды. Эта операция И сохраняет неизмен- ными все биты аккумулятора, кроме третьего слева, который устанавливается в 0. Его обнуление эквивалентно вычитанию 20h, т. е. преобразованию строчной буквы в прописную. Описанные до сих пор 95 кодов относятся к отображаемым символам, т. е. к символам, у которых есть внешний вид. В на- боре ASCII есть также 33 управляющих символа, которые при печати или на экране не отображаются, а используются для выполнения тех или иных действий. Для полноты я привожу их все, но не переживайте, если какие-то покажутся вам не- понятными. Формат ASCII изначально разрабатывался для те- летайпных аппаратов, поэтому многие его коды сейчас уже утра- тили смысл. Шестнадцате- Сокращение Название Назначение ричный код 00 NUL Null Нет 01 SOH Start of Начало заголовка Heading 02 STX Start of Text Начало текста 03 ETX End of Text Конец текста 04 EOT End of Конец передачи Transmission 05 ENQ Enquire Запрос (Inquire) 06 ACK Acknowledge Подтверждение 368 Глава двадцатая (продолжение) Шестнадцате- Сокращение Название Назначение ричный код 07 BEL Bell Сигнал 08 BS Backspace Возврат на символ назад 09 HT Horizontal Горизонтальная Tabulation табуляция 0A LF Line Feed Перевод строки 0B VT Vertical Вертикальная Tabulation табуляция 0C FF Form Feed Извлечение страницы 0D CR Carriage Возврат каретки Return 0E SO Shift Out Выход 0F SI Shift In Вход 10 DLE Data Link Escape 11 DC1 Device Управление Control 1 устройством 1 12 DC2 Device Управление Control 2 устройством 2 13 DC3 Device Управление Control 3 устройством 3 14 DC4 Device Управление Control 4 устройством 4 15 NAK Negative Нет Acknowledge подтверждения 16 SYN Synchronous Синхронизация Idle 17 ETB End of Конец блока Transmission передачи Block 18 CAN Cancel Отмена 19 EM End of Конец носителя Medium 369 ASCII — символы нашего времени 1A SUB Substitute Замена Character 1B ESC Escape 1C FS File Separa- Разделитель tor or In- файлов или formation информации 4 Separator 4 1D GS Group Sepa- Разделитель групп rator or In- или formation информации 3 Separator 3 1E RS Record Sepa- Разделитель rator or In- записей или formation информации 2 Separator 2 1F US Unit Separa- Разделитель tor or Infor- элементов или mation информации 1 Separator 1 7F DEL Delete Удаление Смысл некоторых из этих символов в том, что их можно размещать среди отображаемых символов, внося в текст не- кое примитивное форматирование. Представьте себе устрой- ство для печати (телетайп или принтер), отображающее на бумаге символы, руководствуясь поступающими на него ASCII-кодами. Обычно устройство работает так: печатающая головка печатает символ, соответствующий коду, и сдвигает- ся на одну позицию вправо. Важнейшие управляющие симво- лы нужны, чтобы изменить эту последовательность. Рассмотрим в качестве примера шестнадцатеричную строку 41 09 42 09 43 09 Код 09h соответствует символу горизонтальной табуляции, или просто табулятору. Символ табуляции сдвигает печатающую головку к следующей позиции, номер которой кратен 8. Ре- зультат выглядит примерно так: A B C (продолжение) 370 Глава двадцатая Табуляцию удобно применять, когда при печати текст должен выравниваться по столбцам. Даже многие современные принтеры реагируют на код 12h, извлекая страницу и начиная печать на новой. Код 08h (BS) позволяет печатать составные символы на ста- рых принтерах. Так, для печати буквы е с диакритическим зна- ком — обратным апострофом ( ) на принтер нужно передать последовательность кодов 65h 08h 60h. Важнейшими управляющими символами и в наши дни являются символы возврата каретки и перевода строки, дей- ствие которых аналогично соответствующим кодам Бодо. Код CR смещает печатающую головку принтера к левому краю страницы, а LF приводит к прокрутке валика на одну строку вверх. Для начала новой строки обычно надо указывать оба кода. Но допускается их применение и по отдельности, ска- жем, для печати новой строки поверх старой или для начала новой строки не у левого поля. В мире персональных компьютеров кодировка ASCII — бе- зусловный лидер, но на крупных компьютерных системах фир- мы IBM она не используется. Для вычислительной машины System/360 фирма IBM разработала собственный 8-битовый код EBCDIC (Extended BCD Interchange Code, расширенный код об- мена BCD). Это расширенный вариант 6-битового кода BCDIC, применявшегося в перфокартах IBM в течение 50 летРазбираясь во взаимосвязях между перфокартами и соответ- ствующими кодами EBCDIC, помните, что на развитие этой кодировки влияло несколько различных технологий. Поэто- му не стоит ожидать от нее чрезмерной логичности или внут- ренней согласованности. 371 ASCII — символы нашего времени Для кодирования символа в столбце цифр на перфокарте пробивается несколько прямоугольных отверстий. Для яснос- ти поверх столбца часто печатали закодированный символ. Нижние 10 строк пронумерованы от 0 до 9. Ненумерованная строка над 0-й строкой считается 11-й, а самая верхняя строка — 12-й. Десятой строки на карте нет. Всего на одной карте 80 столбцов, а значит закодировать с ее помощью можно 80 сим- волов. Строки с 0-й по 9-ю иногда называют цифровыми строка- ми или цифровой пробивкой (digital punches), строки 11 и 12 — зонными строками или зонной пробивкой (zone punches). Чтобы жизнь не казалась медом, иногда зонной пробивкой считаются и отверстия в строках 0 и 9. 8-битовый код EBCDIC состоит из старшей и младшей тет- рад. Младшая является кодом BCD, соответствующим циф- ровой пробивке символа. Старшая содержит код, соответству- ющий (довольно произвольным образом) зонной пробивке символа. Как вы помните из главы 19, в кодировке BCD 4-би- товые коды используются для представления цифр от 0 до 9. У кодов цифр от 0 до 9 зонной пробивки нет, т. е. старшая тетрада равна 1111, младшая — BCD-коду цифры. Шестнадцатеричный код Символ EBCDIC F0 0 F1 1 F2 2 F3 3 F4 4 F5 5 F6 6 F7 7 F8 8 F9 9 При кодировании прописных букв тетрада 1100 соответ- ствует зонной пробивке только в строке 12, тетрада 1101 — зонной пробивке только в строке 11, тетрада 1110 — зонной пробивке в строке 0. Вот как выглядят коды EBCDIC для про- писных букв латинского алфавита: 372 Глава двадцатая Шестнад- Символ Шестнад- Символ Шестнад- Символ цатерич- EBCDIC цатерич- EBCDIC цатерич- EBCDIC ный код ный код ный код C1 A D1 J C2 B D2 K E2 S C3 C D3 L E3 T C4 D D4 M E4 U C5 E D5 N E5 V C6 F D6 O E6 W C7 G D7 P E7 X C8 H D8 Q E8 Y C9 I D9 R E9 Z Заметьте: коды не образуют сплошной последовательности. При программной обработке текста EBCDIC эти пробелы в нумерации крайне неудобны. Коды строчных букв обозначаются той же цифровой про- бивкой, что и коды прописных букв, но иной зонной пробив- кой. В кодах строчных букв от a до i пробиты строки 12 и 0, чему соответствует код 1000. В кодах строчных букв от j до r пробиты строки 12 и 11 (код 1001). Наконец, в кодах строчных букв от s до z пробиты строки 11 и 0 (код 1010). Шестнад- Символ Шестнад- Символ Шестнад- Символ цатерич- EBCDIC цатерич- EBCDIC цатерич- EBCDIC ный код ный код ный код 81 a 91 j 82 b 92 k A2 s 83 c 93 l A3 t 84 d 94 m A4 u 85 e 95 n A5 v 86 f 96 o A6 w 87 g 97 p A7 x 88 h 98 q A8 y 89 i 99 r A9 z 373 ASCII — символы нашего времени Конечно, в EBCDIC есть и другие коды — для знаков препина- ния и для управляющих символов, но нам вряд ли имеет смысл тратить время на столь глубокое знакомство с этой системой. Теоретически каждого столбца на перфокарте достаточно для кодирования 12 битов информации (1 отверстие — 1 бит). С другой стороны, для записи 7-битового кода ASCII можно в каждом столбце использовать 7 из 12 строк. Но на практике приходится учитывать, что карта, в которой пробито слиш- ком много отверстий, довольно скоро ветшает. Многие из 8-битовых кодов EBCDIC остались неопределен- ными. Это значит, что смысла в 7-битовой кодировке ASCII больше. Во времена разработки ASCII память для компьюте- ров стоила очень дорого, поэтому некоторые даже настаива- ли, что для экономии памяти кодировка должна быть 6-бито- вой, а для набора строчных и прописных букв нужен код-пе- реключатель. Однако эта идея скоро была отвергнута, уступив место представлению о том, что кодировка ASCII должна быть 8-битовой. Это связано с тем, что в основе компьютерной ар- хитектуры лежит не 7-, а 8-битовая единица — байт. И конеч- но, хотя технически основная кодировка ASCII остается 7-би- товой, для хранения отдельных символов в компьютерах по- чти всегда отводится 8 битов. Эквивалентность байтов и символов довольно удобна: мы всегда может приблизительно сказать, сколько места в памяти займет тот или иной документ, попросту подсчитав количе- ство символов в нем. Некоторым людям легче представить себе объем памяти компьютера, если они могут сказать, сколько текста можно в ней разместить. Например, обычная машинописная страница займет в па- мяти около 1 700 байт. На странице журнала «The New Yorker» три колонки текста по 60 строк в каждой. При средней длине строки в 40 знаков получаем объем страницы 7 200 символов (или байт). На странице «The New York Times» текст разделен на 6 колонок. Если бы в нем не было ни заголовков, ни фотогра- фий (что в высшей степени необычно), всего в каждой колонке умещалось бы 155 строк длиной по 35 символов. Значит, объем страницы равен 32 550 символов, или 32 килобайта. На книжной странице обычного формата помещается бо- лее 400 слов. При средней длине слова в 7 символов (точнее, в 8, так как за каждым словом идет пробел) объем книжной стра- 374 Глава двадцатая ницы равен примерно 3 000 символов. Примем, что объем ти- пичной книги — 333 страницы. У этого, прямо скажем, не- круглого числа, есть одно преимущество — оно позволяет нам уверенно заявить, что типичная книга занимает в памяти объем около 1 000 000 байт, или 1 Мб. Конечно, вокруг этого среднего есть значительный разброс. «Великий Гетсби» Френсиса Скотта Фицджеральда — око- ло 300 кб. «Над пропастью во ржи» Джерома Сэлинджера — около 400 кб. «Приключения Гекльберри Финна» Марка Твена — около 540 кб. «Гроздья гнева» Джона Стейнбека — около 1 Мб. «Моби Дик» Германа Мелвилла — 1,3 Мб. «История Тома Джонса, найденыша» Генри Филдинга — 2,25 Мб. «Унесенные ветром» Маргарет Митчел — 2,5 Мб. «Война и мир» Льва Толстого — 3,9 Мб. «В поисках утраченного времени» Марселя Пруста — 7,7 Мб. В библиотеке Конгресса Соединенных Штатов Америки 20 млн. книг, 20 триллионов символов, 20 терабайт текстовых данных (кроме них, еще масса фотографий и аудиозаписей). Несмотря на важность, стандарт ASCII далеко не идеален. Беда американского кода для обмена информацией в том, что он слишком американский! Он едва ли удовлетворит даже тре- бования народов, говорящих по-английски. Значок доллара в ASCII есть, но где же значок английского фунта? Где в нем бук- вы с диакритическими знаками, применяемые в большинстве западноевропейских языков? Я уж молчу о нелатинских алфа- витах — греческом, арабском, иврите, кириллице. А слоговое письмо брахми в Индии и Юго-Восточной Азии, к которому восходят языки деванагари, бенгали, тайский и тибетский? Наконец, как прикажете представлять с помощью 7-битового кода десятки тысяч иероглифов китайского, японского и ко- рейского языков? При разработке ASCII потребности других алфавитов учи- тывались мало, хотя, конечно, о нелатинских алфавитах речь не шла. В стандарте ASCII считается, что 10 его кодов (40h, 5Bh, 5Ch, 5Dh, 5Eh, 60h, 7Bh, 7Ch, 7Dh и 7Eh) другие страны могут переопределять согласно своим потребностям. Кроме того, 375 ASCII — символы нашего времени предусматривалась возможность замены символа # значком английского фунта , а знака доллара $ — обобщенным сим- волом денежной единицы ¤. Очевидно, замена имеет смысл, лишь когда о ней знают все работающие с документом, кото- рый содержит переопределенные коды. Поскольку в большинстве компьютерных систем симво- лы все равно хранятся как 8-битовые значения, возникает воз- можность расширения набора символов ASCII до 256 симво- лов. В расширенной кодировке значения кодов с 00h до 7Fh остались неизменными, а коды с 80h по FFh соответствуют буквам с диакритическими знаками или буквам нелатинских алфавитов. Вот, например, как шифруются в расширенной кодировке ASCII кириллические буквы. В таблице старшая тет- рада шестнадцатеричного кода символа указана в первой стро- ке, а младшая — в левом столбце. 8- 9- A- E- -0 А Р а р -1 Б С б с -2 В Т в т -3 Г У г у -4 Д Ф д ф -5 Е Х е х -6 Ж Ц ж ц -7 З Ч з ч -8 И Ш и ш -9 Й Щ й щ -A К Ъ к ъ -B Л Ы л ы -C М Ь м ь -D Н Э н э -E О Ю о ю -F П Я п я К сожалению, на протяжении последних десятилетий появи- лось множество различных вариантов расширения таблицы ASCII даже для одного языка, что, конечно же, приводит к мно- гочисленным сложностям. Наиболее радикальным изменени- 376 Глава двадцатая ям кодировка ASCII подверглась ради включения в нее китайс- ких, японских и корейских иероглифов. В популярной кодиров- ке Shift-JIS (Japan Industrial Standard, японский промышленный стандарт) коды с 81h по 9Fh в действительности представляют собой первый байт 2-байтового кода символа. Благодаря этому в кодировке Shift-JIS удается дополнительно закодировать око- ло 6 000 дополнительных символов. К сожалению, эта кодиров- ка — не единственная. Кроме нее в Азии применяются еще три варианта двухбайтовых наборов символов. Наличие нескольких несовместимых двухбайтовых набо- ров — не единственная проблема. Есть еще одна: некоторые символы, а именно обычные символы ASCII, представляются одним байтом, тогда как другие — тысячи иероглифов — дву- мя. Конечно, работать с такими наборами очень трудно. Осознав необходимость единой и всеобщей системы коди- рования символов, которая подходила бы для всех языков мира, в 1988 г. несколько крупных компьютерных компаний начали разработку кодировки Unicode, которая должна прий- ти на смену ASCII. В отличие от ASCII кодировка Unicode яв- ляется не 7-, а 16-битовой. По 2 байта занимают все символы Unicode до единого. Это значит, что в Unicode коды принима- ют значения от 0000h до FFFFh, а всего их доступно 65 536. Этого достаточно для любых языков мира, по крайней мере для тех, что будут использоваться в компьютерах, да еще и остается место для расширения. Создание Unicode начиналось не на пустом месте. Первые 128 символов — с кодами от 0000h до 007Fh — совпадают с символами ASCII. Далее нашлось место и для греческих, и для кириллических, и для арабских букв, и для множества других символов. Преимущества Unicode несомненны, но это, увы, не облег- чает ее внедрения. ASCII и ее многочисленные расширения на- столько распространены в компьютерном мире, что сместить их с пьедестала будет очень нелегко. Правда, в Unicode удобное равенство «1 символ = 1 байт» уже не соблюдается. В кодировке ASCII роман «Гроздья гнева» занимает 1 мегабайт, в кодировке Unicode — уже 2 Мб. Но пра- во же, это небольшая плата за универсальную всеобщую сис- тему кодирования символов. Глава 21 Под шорох шин Процессор, конечно, — основной компонент компьютера, но далеко не единственный. Компьютеру нужна память для хра- нения кодов команд, которые процессор будет исполнять. Ком- пьютеру нужно устройство ввода, чтобы эти коды попадали в память, а еще устройство вывода, позволяющее просматривать результаты работы программы. Вы, конечно, помните, что па- мять RAM энергозависима — при отключении питания ее со- держимое стирается. Поэтому компьютер нужно снабдить дол- говременным запоминающим устройством, в котором можно хранить данные и программы, когда компьютер выключен. Интегральные схемы, из которых состоит компьютер, мон- тируются на платах. Если компьютер невелик, все схемы мож- но разместить на одной плате. Но чаще его компоненты рас- пределяют на две или несколько плат. Эти платы обменива- ются информацией через шину (bus), т. е. набор цифровых сигналов, подаваемых на все платы компьютера. Эти сигналы разделяются на 4 категории. • Адресные — генерируются процессором и обычно исполь- зуются для адресации оперативной памяти. Могут также применяться для обращения к другим устройствам ком- пьютера. • Вывода данных  — также генерируются микропроцессором. Используются для передачи данных в память и на другие 378 Глава двадцать первая устройства. Не запутайтесь в понятиях «ввод» и «вывод»: сигнал вывода микропроцессора становится сигналом вво- да для памяти или внешнего устройства. • Ввода данных — генерируются различными устройствами компьютера и поступают в микропроцессор. Чаще всего в роли источника данных для процессора выступает память. • Управляющие — генерируются как микропроцессором, так и другими устройствами, которым нужно что-то сообщить процессору. Пример сигнала такого рода — сигнал, кото- рым процессор указывает на необходимость записи дан- ных в определенную ячейку памяти. Кроме того, шина отвечает за подачу питания на различ- ные компоненты компьютера. Одной из первых широко распространенных шин для до- машних компьютеров была S-100, вышедшая в 1975 г. в соста- ве первого же домашнего компьютера «Альтаир». Первона- чально она была ориентирована на микропроцессор 8080, но позже ее приспособили и под другие процессоры, например, 6800. Плата S-100 представляет собой прямоугольную пласти- ну размером 5,3 � 10 дюймов (13,5 � 25,4 см), одна из сторон которой представляет собой разъем со 100 контактами (отсю- да и обозначение — S-100). Основой компьютера с шиной S-100 является материнс- кая плата (motherboard). На ней размещено несколько (до 12) гнезд для вставки разъемов плат S-100. Иногда эти гнезда на- зывают слотами расширения (expansion slots), а вставляемые в них платы — платами расширения (expansion cards). Одну пла- ту S-100 занимает сам процессор с вспомогательными микро- схемами (некоторые из них я упоминал в главе 19), еще один или несколько разъемов отданы под оперативную память. Поскольку шина S-100 разрабатывалась под процессор 8080, в ее состав входят 16 адресных линий, 8 линий для ввода и 8 — для вывода данных. Как вы помните, в процессоре 8080 линии ввода и вывода данных объединены. Перед попаданием в шину они разделяются в специальной микросхеме, установленной на той же плате, что и процессор. Кроме того, в шине есть 8 линий прерываний, генерируемых устройствами компьютера, кото- рым нужно привлечь внимание процессора. Так, клавиатура генерирует сигнал прерывания при нажатии клавиши (об этом 379 Под шорох шин ниже). Процессор в ответ запускает короткую программу, ко- торая определяет, какая клавиша нажата, и выполняет ответное действие. Для работы с прерываниями на плату с процессором 8080 обычно устанавливается микросхема Intel 8214 — устрой- ство управления приоритетными прерываниями. Когда одно из устройств запрашивает прерывание, микросхема направляет в процессор соответствующий сигнал. В процессоре выполняет- ся команда RST (перезапуск), в результате которой процессор сохраняет текущее содержимое программного счетчика и пере- ходит к команде по адресу 0000h, 0008h, 0010h, 0018h, 0020h, 0028h, 0030h и 0038h в зависимости от номера прерывания. Разработав шину нового типа, вы должны решить один важный вопрос: опубликовать параметры шины или сохра- нить их в тайне. Если технические характеристики шины стали достояни- ем общественности, производить платы расширения для нее могут не только изготовители шины, но и другие компании. Доступность множества разнообразных плат расширения де- лает компьютер гибче, а значит, и привлекательнее. С ростом числа продаваемых компьютеров расширяется и рынок для плат расширения. Эта закономерность побуждает разработчи- ков большинства небольших компьютерных систем придер- живаться принципов открытой архитектуры (open archi- tecture), т. е. разрешать сторонним производителям создавать оборудование для своих компьютеров. Шина, отданная во все- общее пользование, со временем может стать промышленным стандартом. Такие стандарты сыграли в развитии персональ- ных компьютеров важную роль. Самый знаменитый персональный компьютер (ПК) с от- крытой архитектурой — первый IBM PC — появился на рын- ке осенью 1981 г. IBM опубликовала технический справочник с полными электрическими схемами самого компьютера и всех плат расширения для него, производимых IBM. Наличие это- го справочника позволило многим компаниям производить не только собственные платы расширения, но и целые клоны ПК, которые практически не отличались от компьютеров IBM и работали с тем же программным обеспечением (ПО). В наши дни на долю разнообразных наследников IBM PC приходится 90% рынка ПК. Сама IBM в этих процентах зани- мает довольно скромное место, но ее доля вполне могла ока- 380 Глава двадцать первая заться еще скромнее, если бы архитектура первого IBM PC ос- талась закрытой. Доказательство тому — «Apple Macintosh». Архитектура этого компьютера никогда не становилась досто- янием общественности, и это, вероятно, объясняет, почему на долю «Macintosh» сейчас приходится менее 10% продаж ПК. Не забывайте, что закрытость архитектуры компьютера не мешает другим компаниям создавать для него ПО. Лишь не- которые производители видеоигр запрещают сторонним ком- паниям писать программы для своих систем. В первом IBM PC использовался процессор Intel 8088 с ад- ресным пространством в 1Мб. Сам по себе это 16-разрядный процессор, но обмен данным с памятью происходит 8-бито- выми фрагментами, т. е. байтами. Шина с 62 контактами, раз- работанная в IBM для этого компьютера, теперь называется шиной ISA (Industry Standard Architecture, архитектура про- мышленного стандарта). В ней 20 адресных линий, 8 линий для ввода и вывода данных, 6 — для запросов на прерывания и 3 — для запросов на прямой доступ к памяти (Direct Memory Access, DMA). Линии DMA позволяют внешним устройствам перехватывать управление шиной и производить обмен дан- ными с памятью в обход микропроцессора, хотя обычно чте- ние и запись осуществляет только он. В компьютере S-100 на платах расширения размещены все компоненты без исключения. В IBM PC микропроцессор, не- которые вспомогательные микросхемы и часть оперативной памяти помещались на системной плате (в терминологии IBM), которую часто также называют материнской. В 1984 г. IBM выпустила компьютер PC AT с 16-разрядным процессором Intel 80286, адресное пространство которого со- ставляло 16 Мб. Шина ISA в новом компьютере осталась, но к ней было добавлено еще 36 выводов, в том числе 7 дополни- тельных адресных линий (хотя нужно их было всего 4), 8 до- полнительных линий для ввода и вывода данных, 5 линий за- просов на прерывания и 4 канала DMA. Шины приходится модернизировать или заменять, когда микропроцессоры перерастают их либо по разрядности дан- ных, либо по объему адресуемой памяти, либо по быстродей- ствию. Первые шины предназначались для микропроцессоров с тактовыми частотами порядка нескольких, но никак не со- 381 Под шорох шин тен мегагерц. Шина, работающая на частоте, которая превы- шает допустимое значение, становится источником электро- магнитных помех, способных сказаться на работе близких ра- диоприемников и телевизоров. В 1987 г. в IBM была создана шина MCA (Micro Channel Architecture, микроканальная архитектура). Она была частич- но запатентована, что давало IBM возможность получать день- ги с других компаний, применявших эту шину. Вероятно, по- этому шина MCA не стала промышленным стандартом. Бо- лее того, в 1988 г. консорциум из 9 компаний (IBM  в их число не входила) создал альтернативную 32-разрядную шину EISA (Extended Industry Standard Architecture, усовершенствованная архитектура промышленного стандарта). В последние годы в IBM-совместимых компьютерах повсеместно используется шина PCI (Peripheral Component Interconnect, соединение пе- риферийных компонентов). Понять, как работают компоненты компьютера, нам опять поможет обращение к давней и незамысловатой эпохе — се- редине 1970-х. Представим, что мы занялись разработкой плат расширения для «Альтаира» или для компьютера собственной конструкции с процессором 8080 или 6800. Нам понадобится оперативная память, клавиатура, монитор и, вероятно, некое устройство для хранения информации, когда компьютер вык- лючен. Как вы помните из главы 16, массиву RAM нужны адрес- ные входы, входы для ввода и вывода данных и сигнал, кото- рый управляет записью данных в память. Количеством адрес- ных входов определяется объем информации, которую мож- но записать в массив RAM: Объем массива RAM = 2Количество адресных входов Количеством входов для чтения и записи данных задана на раз- рядность сохраняемых значений. В середине 1970-х в оперативной памяти домашних ком- пьютеров часто использовалась микросхема 2102: 382 Глава двадцать первая 1 2 3 4 5 6 7 8 CS 2102 16 15 14 13 12 11 10 9 A6 A5 R/W A1 A2 A3 A4 A0 A7 A8 A9 DO DI 5 B Микросхема 2102 относится к семейству МОП (металл-оки- сел-полупроводник), или MOS (metal-oxide semiconductor), т. е. к тому же семейству, что и сами микропроцессоры 8080 и 6800. Микросхемы МОП легко соединяются со схемами из се- мейства ТТЛ; плотность транзисторов в них обычно выше, чем в ТТЛ-схемах, но работают они медленнее. Подсчитав адресные входы (с A0 по A9) и заметив, что вхо- дов для ввода (DI) и вывода (DO) данных всего по одному, вы сообразите, что в эту микросхему можно записать 1 024 бита. У различных модификаций микросхемы 2102 время доступа, т. е. время между поступлением адреса на адресные входы и подачей нужного бита на выход DO, составляет от 350 до 1 000 нс. При чтении данных из памяти сигнал R/W — равен 1. Чтобы записать входной сигнал в память, сигнал R/W — должен обра- титься в 0 на время не меньше 170–550 нс, опять же в зависи- мости от вида микросхемы 2102. Особенно интересен сигнал CS — (Chip Select, выбор чипа). Когда он равен 1, микросхема не выбрана, т. е. не реагирует на сигнал R/W —. Этот сигнал играет в работе микросхемы еще одну немаловажную роль, но о ней чуть позже. Конечно, если вы собираете память для 8-разрядного про- цессора, вам хочется организовать ее так, чтобы в нее можно было записывать 8-битовые, а не 1-битовые значения. Для со- хранения целых байтов вам понадобится не менее 8 таких мик- росхем с соединенными адресными входами, сигналами R/W — и CS —. Результат схематически можно изобразить так: 383 Под шорох шин Адрес 10 A Ввод данных 8 DI RAM 1024 × 8 DO 8 Вывод данных R/W CS Это массив RAM 1024 � 8. Его объем равен 1 кб. С практической точки зрения микросхемы памяти нужно разместить на плате. Если постараться, то на одной плате S- 100 их уместится 64, т. е. 8 кб. Но мы удовлетворимся скром- ными 4 кб, т. е. 32 микросхемами. Набор микросхем, соеди- ненных друг с другом для хранения целого байта, называется банком (bank). На плате с памятью объемом 4 кб размещаются 4 банка по 8 микросхем в каждом. Адресное пространство процессоров 8080 и 6800 равно 64 кб, так как у них по 16 адресных входов. 16 адресных сигналов платы объемом 4 кб, содержащей 4 банка микросхем, выпол- няют такие функции: A15  A14  A13  A12  A11  A10  A9  A8  A7  A6  A5  A4  A3  A2  A1  A0 Адрес в памяти Выбор платы Выбор банка Адресные сигналы с A0 по A9 подключены к микросхемам. Сигналы A10 и A11 задают банк, к которому происходит обра- щение. Наконец, адресные сигналы с A12 по A15 определяют диапазон адресов, относящихся к данной плате. Наша плата емкостью 4 кб во всем адресном пространстве процессора (64 кб) может занимать один из шестнадцати 4-килобайтовых интервалов: От 0000h до 0FFFh От 1000h до 1FFFh От 2000h до 2FFFh … От F000h до FFFFh Допустим, мы решили отвести нашей плате диапазон адресов от A000h до AFFFh. Это значит, что первый банк занимает ад- 384 Глава двадцать первая реса с A000h по A3FFh, второй — с A400h по A7FFh, третий — с A800h по ABFFh, четвертый — с AC00h по AFFFh. В платах памяти емкостью 4 кб часто предусматривают возможность оперативного изменения соответствующего ди- апазона адресов. Делается это с помощью DIP-переключателя — набора из нескольких (от 2 до 12) крохотных переключате- лей, собранных в одном корпусе с двухрядным расположени- ем выводов (Dual Inline Package, DIP). Его можно подключить к 4 старшим адресным линиям шины с помощью специальной схемы — компаратора (comparator): A12 A13 A14 A15 Равно V Как вы помните, выход вентиля «Исключающее ИЛИ» равен 1, только если сигналы на двух его входах не совпадают. 385 Под шорох шин Чтобы плата соответствовала адресам от A000h до AFFFh, нужно замкнуть переключатели, соответствующие линиям A13 и A15. Если значения адресных сигналов шины A12, A13, A14 и A15 совпадают со значениями, заданными с помощью переключа- телей, выходы всех четырех вентилей «Исключающее ИЛИ» равны 0. Это значит, что выход вентиля ИЛИ-НЕ равен 1: Равно V A12 A13 A14 A15 Объединив сигнал Равно с дешифратором 2 линии на 4, вы сможете генерировать сигналы CS — для всех четырех банков памяти: CS для первого банка CS для четвертого банка CS для третьего банка CS для второго банка A10 A11 Равно 386 Глава двадцать первая Например, если A10 равен 0, а A11 — 1, выбран третий банк. Если вы еще не забыли нашу возню со сборкой памяти в главе 16, то можете решить, что нам также понадобится 8 се- лекторов 4 линии на 1, чтобы выбирать правильные выход- ные сигналы от четырех банков памяти. Но на самом деле это не так, и вот почему. Обычно выходной сигнал микросхемы, совместимой с се- мейством ТТЛ, либо выше 2,2 В (логическая 1), либо ниже 0,4 В (логический 0). А что будет, если соединить выходные сиг- налы, один из которых равен 1, а второй — 0? Сказать опреде- ленно нельзя, и потому выходы интегральных микросхем обычно между собой не соединяют. Выходной сигнал микросхемы 2102 называется сигналом с тремя состояниями (3-state или tristate). Его третье состояние отличается как от логического 0, так и от логической 1 и соот- ветствует, как ни странно, полному отсутствию сигнала, как будто к данному выводу микросхемы вообще ничего не под- ключено. Выходной сигнал микросхемы 2102 переходит в тре- тье состояние, если сигнал CS — обращается в 1. Это значит, что выходы для вывода данных всех четырех банков можно со- единить и использовать эти 8 объединенных выводов как 8 линий ввода данных в шине. Я решил рассказать о сигналах с тремя состояниями, по- скольку для работы шины они очень важны. Практически все устройства, подключенные к шине, используют линии ввода данных. В данный момент времени передавать данные по шине может только одно из них. Выходы всех остальных устройств должны находиться в третьем состоянии. Микросхема 2102 является статической (static) памятью RAM, или SRAM. Другой тип памяти называется динамичес- ким (dynamic) и обозначается сокращением DRAM. В памяти SRAM для хранения 1 бита обычно нужны 4 транзистора (это меньше, чем их требовалось в триггерах, из которых мы соби- рали память в главе 16). В DRAM на 1 бит приходится всего 1 транзистор, зато память этого типа требует более сложной вспомогательной электроники. SRAM (например, микросхема 2102) сохраняет данные только при наличии питания. Если питание отключается, со- держимое памяти пропадает. DRAM обладает таким же свой- ством. Кроме того, содержимое памяти DRAM нужно перио- 387 Под шорох шин дически считывать, даже если оно не нужно. Такая регенера- ция (refresh) должна производиться несколько сотен раз в се- кунду. Хотя применение DRAM связано с дополнительными хло- потами, благодаря непрерывно возрастающей емкости мик- росхемы этого типа стали фактически стандартом. В 1975 г. Intel выпустила микросхему DRAM емкостью 16 384 бита. Со- гласно закону Мура емкость таких чипов каждые 3 года возра- стает вчетверо. В современных компьютерах гнезда для памя- ти размещаются прямо на материнской плате. В эти гнезда вставляются небольшие платы — модули памяти SIMM (Single Inline Memory Module) или DIMM (Dual Inline Memory Module) с несколькими микросхемами DRAM. Теперь, когда вы узнали, как делать платы памяти, не увле- кайтесь — не будем заполнять памятью все адресное простран- ство процессора, оставив часть его для устройства вывода. Самым распространенным устройством вывода в совре- менных компьютерах стала катодно-лучевая трубка (Cathode- Ray Tube, CRT) — в облике телевизора непременный атрибут человеческого жилища второй половины XX в. Кинескоп, под- ключенный к компьютеру, называют обычно дисплеем или монитором. Аппаратный компонент, управляющий работой монитора, называется видеоадаптером (video display adapter) или видеоплатой, поскольку в компьютере он чаще всего за- нимает отдельную плату. Хотя изображение на экране монитора или телевизора ка- жется двумерным, в действительности оно состоит из одной линии, которую очень быстро прочерчивает по экрану элект- ронный луч. Луч начинает свое путешествие в верхнем левом углу. Пройдя вправо до конца экрана, он возвращается назад и начинает рисовать следующую строку развертки (scan line). Возвратное движение к началу следующей строки называется обратным ходом по горизонтали (horizontal retrace). Закончив последнюю строку, луч возвращается из нижнего правого в верхний левый угол экрана (совершая обратный ход по вер- тикали), и процесс начинается снова. По стандартам телеви- зионных сигналов в США это происходит 60 раз в секунду. Именно такая частота развертки (field rate) обеспечивает нор- мальное восприятие изображения. 388 Глава двадцать первая В телевизорах на самом деле все происходит немного слож- нее из-за чересстрочной развертки (interlacing): один кадр изоб- ражения рисуется в два приема — сначала четные строки, по- том нечетные. Частота строчной развертки (horizontal scan rate), т. е. скорость прорисовки одной строки, равна 15 750 Гц, Разделив этой число на 60 Гц, получим, что одно поле кадра состоит из 262,5 строк. Целый кадр состоит из 2 полей, т. е. из 525 строк. Как при чересстрочной, так и при обычной развертке элек- тронный луч, формирующий изображение, управляется еди- ным непрерывным сигналом. В эфире изображение и звук странствуют совместно, но  в телевизоре им суждено разделить- ся. Далее я буду говорить о видеосигнале — том, что подается на видеовходы и видеовыходы видеомагнитофонов, камер и некоторых телевизоров. Видеосигнал черно-белого телевизора прост и понятен (на- личие цвета, конечно, все несколько запутывает). 60 раз в се- кунду в этот сигнал вставляется вертикальный синхроимпульс (vertical sync pulse), указывающий на начало очередного поля. Этот импульс состоит в установке на 400 микросекунд нуле- вого напряжения (земли). Начало строки обозначается гори- зонтальным синхроимпульсом — нулевым напряжением, ус- танавливаемым на 5 микросекунд 15 750 раз в секунду. В про- межутках между горизонтальными синхроимпульсами сигнал варьируется от 0,5 В (черный) до 2 В (белый). Промежуточные напряжения соответствуют оттенкам серого. Таким образом, телевизионное изображение является частич- но цифровым и частично аналоговым. По вертикали оно разде- лено на 525 отдельных строк, но внутри каждой напряжение не- прерывно меняется, хотя и не с произвольной скоростью. Суще- ствует предельная скорость реакции телеэкрана на изменившее- ся напряжение, определяемая полосой пропускания (bandwidth). Понятие полосы пропускания чрезвычайно важно. Имен- но она определяет объем информации, который можно пере- дать по данному каналу. В случае телевизора полоса пропус- кания есть предельная скорость, с которой черный цвет может сменяться белым, а потом вновь становиться черным. В аме- риканском телевещании она равна 4,2 Мгц. Мы хотим подключить дисплей к компьютеру, поэтому нам неудобно представлять его в виде гибрида цифрового и 389 Под шорох шин аналогового устройства. Легче считать дисплей исключитель- но цифровым. С компьютерной точки зрения, удобнее всего представлять изображение на мониторе как прямоугольную сетку, отдельные элементы которой называются пикселами (pixel). Термин этот — сокращение словосочетания «picture element» (элемент изображения). Полоса пропускания видеосистемы накладывает ограниче- ние на  число пикселов в одной строке развертки. Я определил полосу пропускания как предельную скорость, с которой чер- ный цвет может сменяться белым, а потом вновь становиться черным. Полоса в 4,2 МГц означает, что пары пикселов могут создаваться 4,2 млн. раз в секунду. Разделив удвоенную (за счет двух пикселов) полосу пропускания на частоту строчной раз- вертки, получим, что одна строка состоит из 533 пикселов. Ре- ально же их всего около 320, так как часть времени тратится на обратный ход, кроме того, строка видна на экране не целиком. Да и по вертикали 525 пикселов тоже не набирается. Они теряются в верхних и нижних невидимых участках экрана, а также за счет обратного хода по вертикали. А если учесть, что при работе с компьютером чересстрочной разверткой лучше себе жизнь не осложнять, разумно предположить, что число пикселов по вертикали примерно равно 200. Итак, разрешение (resolution) простейшего видеоадаптера, подсоединенного к обычному телевизору, — 320 пикселов по горизонтали и 200 по вертикали, или сокращенно 320 � 200: 390 Глава двадцать первая Полное число пикселов на экране 320 � 200 = 64 000. В зависи- мости от того, как вы сконфигурировали свой адаптер, пиксел может быть черно-белым или обладать определенным цветом. Допустим, монитор нужен нам для отображения текста. Сколько его там уместится? Это, конечно, зависит от того, сколько пикселов занимают отдельные буквы. Можно, не мудрствуя лукаво, выделить под все символы одинаковые квадратики размером 8 на 8 пикселов: Этим символами соответствуют ASCII-коды от 20h до 7Fh (на- помню, что символы с кодами от 00h до 1Fh являются неотоб- ражаемыми). Теперь каждому символу соответствует не только 7-бито- вый код ASCII, но и 64 бита на экране, которые определяют его внешний вид. Эти 64 бита тоже можно считать своеобраз- ным кодом. На экране дисплея с разрешением 320 � 200 можно размес- тить 25 строк по 40 символов размером 8 � 8. Этого хватит, например, для небольшого стихотворения. 391 Под шорох шин Для хранения изображения видеоадаптеру требуется неко- торое количество памяти RAM, а микропроцессору — возмож- ность записи в эту память, чтобы выводить информацию на экран. Удобнее всего выделять место для этой памяти в об- щем адресном пространстве процессора. Сколько же памяти выделить простому адаптеру, о котором я рассказываю? Ответ не так уж очевиден! От 1 до 192 кб! Начнем с минимальных требований. Самое малое, что нуж- но от нашего адаптера, — это отображение текста. Мы уже под- считали, что на экране умещается 25 строк по 40 символов в каждой, т. е. всего 1 000 символов. В памяти RAM на видеопла- те достаточно хранить 7-битовые ASCII-коды этих символов. Тысяча 7-битовых значений как раз и составляют нижний пре- дел памяти — приблизительно 1 килобайт. Такому видеоадаптеру нужен также генератор символов (character gerenator), в котором хранились бы изображения символов, показанные ранее. Генератор символов обычно яв- ляется постоянным запоминающим устройством (ПЗУ; Read- Only Memory; ROM) — интегральной микросхемой, сконст- руированной так, что в ней по определенному адресу всегда находятся одни и те же данные. В отличие от RAM в ПЗУ сиг- налы для ввода данных не предусмотрены. 392 Глава двадцать первая Можно считать ПЗУ устройством для преобразования од- ного кода в другой. Генератор символов как бы переводит 7- битовый код ASCII в 64-битовый код, определяющий внешний вид символа. Микросхеме ПЗУ, в которой записаны изобра- жения 128 символов ASCII размером 8 � 8, нужно 7 адресных входов (для кодов ASCII) и 64 выхода для данных. Но из-за этих многочисленных выходов физический размер микросхе- мы может оказаться чересчур большим! На деле можно обой- тись 8 выходами для данных, увеличив на 3 количество адрес- ных сигналов. 7 адресных сигналов по-прежнему используются для передачи в микросхему кода символа (они поступают в генератор с выходов памяти на видеоплате). 3 дополнитель- ных адресных сигнала обозначают номер строки в квадрате 8 � 8: биты адреса 000 соответствуют самой верхней строке, биты 111 — самой нижней. На выходы подаются биты, состав- ляющие строку, номер которой задан дополнительными ад- ресными входами. Рассмотрим в качестве примера символ ASCII с кодом 41h — прописную А. Его внешний вид, как и вид остальных сим- волов, зашифрован 8 строками по 8 битов в каждой. В табли- це показаны 10-битовые адреса (код символа отделен от кода строки пробелом) и соответствующие выходные сигналы для прописной А. Адрес Сигнал на выходе 1000001 000 00110000 1000001 001 01111000 1000001 010 11001100 1000001 011 11001100 1000001 100 11111100 1000001 101 11001100 1000001 110 11001100 1000001 111 00000000 Присмотритесь: во втором столбце единичками на фоне ну- лей нарисована буква А. Кроме символов, видеоадаптер должен уметь отображать на экране курсор, или указатель ввода — черточку, указываю- 393 Под шорох шин щую, где на экране окажется следующий символ, введенный вами с клавиатуры. Координаты курсора в виде номера стро- ки и номера столбца, в которых он находится, обычно хранят- ся в двух 8-битовых регистрах на видеоплате. В эти регистры микропроцессор также может записывать данные. Видеоадаптер, способный отображать не только текст, на- зывается графическим (graphics). Записывая данные в память графического адаптера, процессор рисует на экране произволь- ные изображения, в том числе текст различного размера и раз- личных шрифтов. У графического адаптера требования к па- мяти выше, чем у текстового. Если разрешение монитора — 320 � 200, в видеопамяти адаптера нужно хранить сведения о 64 000 пикселов. Если каждому пикселу отведен 1 бит, объем видеопамяти равен 64 000 битам, т. е. 8 000 байт, но это, конеч- но, абсолютный минимум. Пиксел, которому соответствует единственный бит, может передавать лишь два цвета, напри- мер, черный (бит равен 0) и белый (бит равен 1). Даже на черно-белом экране цветов, конечно, отображается гораздо больше, точнее, не цветов, а оттенков серого. Чтобы отображение оттенков серого поддерживал и видеоадаптер, каж- дому пикселу в соответствие приходится ставить не бит, а байт. Его значение 00h соответствует черному цвету, а FFh — белому. Промежуточные значения соответствуют полутонам. Видеопла- те, способной отображать 256 оттенков серого на мониторе с разрешением 320 � 200, нужна память в 64 000 байт. Адресное пространство тех простых 8-битовых  процессоров, о которых я рассказывал, она займет почти полностью! Чтобы увидеть на экране буйство красок, накиньте на каж- дый пиксел еще по 2 байта. Посмотрев на экран телевизора или монитор компьютера через увеличительное стекло, вы обнаружите, что вся гамма цветов представлена на них соче- таниями красного, зеленого и синего. Поэтому-то на каждый пиксел и должно приходиться по 3 байта — для указания ин- тенсивности трех основных цветов (подробнее о них в главе 25). Это увеличивает объем видеопамяти до 192 000 байт. Число цветов, которые способен воспроизвести данный адаптер, зависит  от количества битов на пиксел. Здесь, как и во многих других соотношениях в этой книге, не обошлось без степени двойки 394 Глава двадцать первая Количество цветов = 2Количество битов на пиксел Разрешение 320 � 200 — лучшее, чего можно ожидать от обычного телевизора. Полоса пропускания компьютерных мо- ниторов гораздо шире. На первых мониторах, продававших- ся с IBM PC, отображалось 25 строк по 80 символов в каждой. Именно таким разрешением обладали текстовые мониторы на мэйнфреймах IBM. Вообще число 80 для IBM обладает осо- бым смыслом. И почему? Да потому, что именно столько сим- волов умещается на одной перфокарте! Мониторы мэйнфрей- мов часто использовались именно для просмотра содержимо- го перфокарт. Даже в наши дни отдельные консерваторы про- должают называть строки текстового экрана карточками. С годами разрешение адаптеров и число воспроизводимых ими цветов неуклонно росли. Важной вехой стало появление в 1987 г. адаптеров с разрешением 640 � 480 для компьютеров PS/2 фирмы IBM и «Macintosh II» фирмы Apple. С тех пор это разрешение считается необходимым минимумом для компь- ютерных видеосистем. Вы не поверите, но важность разрешения 640 � 480 восхо- дит к Томасу Эдисону. Году в 1889 Эдисон и его инженер Ви- льям Диксон (William Dickson) работали над аппаратом «Kine- tograph» для создания «движущейся фотографии» и над про- ектором «Kinetoscope». Они решили, что ширина «движущей- ся фотографии» должна на треть превосходить ее высоту. От- ношение ширины кадра к его высоте называется характе- ристическим отношением (aspect ratio). В аппаратах Эдисона и Диксона оно равнялось 1,33:1, или 4:3. В течение 60 лет эта величина использовалась в большинстве фильмов и в конст- рукции телевизоров. Лишь в начале 1950-х годов некоторые голливудские студии, преодолев барьер 4:3, начали снимать широкоэкранные фильмы, составившие конкуренцию телеви- зионным программам. Характеристическое отношение большинства мониторов, как и у телевизоров, равно 4:3, в чем легко убедиться с помо- щью линейки. В таком же отношении находятся и числа пик- селов по горизонтали (640) и вертикали (480). Это значит, что физическая длина горизонтальной полоски, скажем, из 100 395 Под шорох шин пикселов равна физической длине вертикальной полоски из 100 пикселов. Иначе говоря, компьютерные пикселы — квад- ратные, что довольно удобно. Практически все современные адаптеры и мониторы рабо- тают с разрешением 640 � 480, кроме того, поддерживая видео- режимы с более высоким разрешением — 800 � 600, 1024 � 768, 1280 � 960 и 1600 � 1200. Часто возникает впечатление, что монитор и клавиатура как-то связаны между собой: то, что вы набираете на клавиа- туре, сразу отображается на экране. Однако в действительнос- ти это совершенно не зависящие друг от друга устройства. Клавиши на клавиатуре — простые переключатели, кото- рые замыкаются при нажатии. На первых клавиатурах было по 48 клавиш, на современных — больше сотни. В конструкции клавиатуры, подключенной к компьютеру, должно иметься некое устройство, которое сопоставляло бы каждой нажатой клавише уникальный код. Кажется, что эти коды удобно увязать с кодировкой ASCII, но это только ка- жется: так делать не стоит. Например, клавиша А должна была бы вырабатывать код 41h при нажатой клавише Shift или код 61h, если клавиша Shift не нажата. Кроме того, на современ- ных клавиатурах есть клавиши, которым ни один код ASCII не соответствует. Код, вырабатываемый клавиатурой, называ- ется скан-кодом (scan code). Проверить, связан ли скан-код на- жатой клавиши с каким-либо кодом ASCII, поможет неболь- шая программа. Мне бы не хотелось, чтобы схема клавиатуры была совер- шенно нечитаемой, поэтому я буду считать, что на ней всего 16 клавиш. Когда одна из них нажата, клавиатура генерирует соответствующий 4-битовый код, принимающий двоичные значения от 0000 до 1111. Все компоненты на схеме клавиатуры нам знакомы: 396 Глава двадцать первая V 4�битовый счетчик Вибратор Дешифратор «2 на 4» O0 DI O1 O2 O3 I0 I1 I2 I3 S1 S1 S0 S0 Q0 Q1 Q2 Q3 Clk DO Селектор «4 на 1» Клавиши на этой схеме показаны как переключатели в ниж- нем левом углу. 4-битовый счетчик циклически с большой скоростью перебирает 16 допустимых кодов клавиш. Проис- ходить это должно очень быстро, быстрее, чем человек успе- вает нажимать на клавиши. Выходные сигналы 4-битового счетчика подаются как на дешифратор «2 на 4», так и на селектор «4 на 1». Если ни одна клавиша не нажата, ни один из входов селектора не равен 1. Поэтому и выход самого селектора не равен 1. Но если клави- ша нажата, по достижению счетчиком ее скан-кода выход се- лектора будет равен 1. Скажем, если нажата вторая сверху и справа клавиша, то выход селектора будет установлен в 1 при значении счетчика 0110. 397 Под шорох шин V Вибратор Прерывание Дешифратор «2 на 4» DI 4�битовый счетчик Clk Селектор  «4 на 1» DO O0 O1 O2 O3 I0 I1 I2 I3 S1 S1 S0 S0 Q0 Q1 Q2 Q3 Никакой другой сигнал счетчика не приведет к тому, что вы- ход селектора станет равен 1. Каждой клавише соответствует собственный код, единственный и неповторимый. Для 64 клавиш вам потребуется 6-битовый скан-код и 6- битовый счетчик. Используя дешифратор «3 на 8» и селектор «1 из 8», клавиши можно расположить в виде таблицы 8 на 8. Для клавиатуры, на которой от 65 до 128 клавиш, скан-код дол- жен быть 7-битовым. Эти клавиши можно расположить в виде таблицы 8 на 16, применив дешифратор «4 на 16» и селектор «1 из 8» (или дешифратор «3 на 8» и селектор «1 из 16»). Происходящее в этой схеме далее зависит от уровня слож- ности интерфейса клавиатуры. Например, в клавиатуре мо- 398 Глава двадцать первая жет присутствовать память RAM, по 1 биту на клавишу. Адре- сацию к ней будет осуществлять счетчик, а значения кодиро- ваться так: 1, если клавиша нажата, и 0, если нет. Для опреде- ления состояния клавиши к этой памяти может обращаться процессор. Полезнейшая часть интерфейса клавиатуры — сигнал пре- рывания. Как вы помните, у процессора 8080 есть входной сиг- нал, позволяющий внешнему устройству прервать работу про- цессора. Процессор реагирует на прерывание, считывая из па- мяти команду — обычно команду RST, которая вызывает пе- реход в определенную область памяти, где находится програм- ма обработки прерывания. Последнее периферийное устройство, которое я здесь опи- шу, — внешний накопитель. Вы, конечно, помните, что опе- ративная память теряет содержимое при выключении пита- ния, из чего бы она ни была собрана: из реле, вакуумных ламп или транзисторов. Но компьютеру необходимо и долговремен- ное запоминающее устройство. В старые добрые времена роль такого устройства играли перфокарты и перфоленты. При каж- дом компьютере хранились рулоны лент или стопки карт с сохраненными на них программами и данными. Однако и у перфолент, и у перфокарт есть общий недоста- ток — их нельзя использовать повторно. Заклеить пробитую в бумаге дырку не так-то просто. Кроме того, физический объем, занимаемый данными, слишком велик. В наши дни, если вы видите сохраненный бит, смело можете считать, что он занимает чересчур много места! Поэтому сейчас гораздо шире распространены магнитные накопители, родословная которых идет с 1878 г. Принципы их работы описаны американским инженером Оберлином Сми- том (Oberlin Smith) (1840–1926), а первое работающее устрой- ство собрал в 1898 г. датский изобретатель Вальдемар Пауль- сен (Valdemar Poulsen) (1869–1942). «Телеграфон» Паульсена должен был записывать сообщения, оставленные по телефо- ну, если некому было ответить на звонок. Для записи звука на стальной проволоке в этом первом автоответчике использо- вался электромагнит — вездесущее устройство, с которым мы уже встречались. Он намагничивал проволоку пропорциональ- но звуковым колебаниям. Затем проволока протягивалась вдоль обмоток электромагнита и индуцировала в них ток, ко- 399 Под шорох шин торый воспроизводил исходный звук. Кстати, независимо от типа магнитного накопителя электромагнит, используемый в нем для записи и считывания информации, называется голов- кой (head). В 1928 г. австриец Фриц Пфлоймер (Fritz Pfleumer) запа- тентовал магнитное записывающее устройство, в котором в качестве носителя использовалась бумажная лента, покрытая железными частичками (технология покрытия изначально была разработана для нанесения металлизированных полосок на сигареты). Бумагу вскоре заменила более прочная целлуло- идная основа. Так родился популярнейший способ записи ин- формации. Магнитная лента — теперь удобно упакованная в пластмассовые кассеты — и в наши дни повсеместно исполь- зуется для записи и воспроизведения музыки и кино. Первая коммерческая система для записи на магнитную лен- ту компьютерных данных была выпущена в 1950 г. фирмой Remington Rand. На одной катушке ленты шириной в полдюй- ма (1,27 см) умещалось несколько мегабайт информации. А в первых домашних компьютерах для записи информации при- спосабливали обычные магнитофонные кассеты. Специальные программы позволяли записать на кассету участок памяти, а затем считать его обратно. У первого IBM PC был специальный разъем для кассетного накопителя. Теперь ленты используются в основном для архивирования данных. Для повседневного хра- нения информации они не столь удобны: чтобы добраться до нужного фрагмента записи, ленту приходится перематывать, а на это иногда уходит немало времени. С точки зрения ускорения доступа записывать данные удоб- нее на диск. В современных накопителях диск крутится под неподвижной штангой, по которой перемещаются одна или несколько головок. Доступ к любому участку диска осуществ- ляется практически мгновенно. Для записи звуков магнитные диски в действительности использовались еще до магнитной ленты. А вот первый дис- ковый накопитель для компьютерных данных был изобретен в 1956 г. в IBM. Устройство RAMAC (Random Access Method for Accounting and Control) состояло из 50 металлических дис- ков диаметром 60 см и могло хранить 5 Мб данных. С тех пор физические размеры дисков существенно умень- шились, а их объем неимоверно вырос. Дисковые накопители 400 Глава двадцать первая обычно разделяют на гибкие (floppy), или попросту дискеты, и жесткие (hard). Гибкий диск состоит из пластикового диска с магнитным покрытием и пластмассового корпуса. В совре- менных дискетах пластмассовый корпус защищает диск от изгиба, поэтому называть его гибким можно лишь условно. Для записи и чтения информации с гибкого диска его нужно вставить в специальное компьютерное устройство — диско- вод. Самые первые гибкие диски были по 8 дюймов в диамет- ре. В IBM PC использовались гибкие диски диаметром 5 1/4 дюйма. Сейчас самый популярный их размер — 3,5 дюйма. Особенность гибких дисков в том, что с их помощью инфор- мацию легко можно переносить с компьютера на компьютер. В частности, их до сих пор часто используют как дистрибу- тивный носитель коммерческого ПО. Жесткий диск обычно состоит из нескольких металличес- ких дисков, «намертво» вмонтированных в дисковод. Работа- ют жесткие диски быстрее гибких, и информации на них уме- щается больше. С другой стороны, их уже не так легко перене- сти с компьютера на компьютер. Поверхность диска разделена на концентрические кольца — дорожки (tracks), причем каждая разделена на несколько дуг — секторов (sectors). Каждый сектор хранит определенный объем информации, как правило, 512 байт. В первом IBM PC использовалась лишь одна сторона 5 1/4-дюймовой дискеты, разделенная на 40 дорожек по 8 секторов каждая. Поскольку объем сектора был равен 512 байт, полная емкость дискеты составляла 163 840 байт, или 160 кб. В современных 3,5-дюй- мовых дискетах для IBM-совместимых компьютеров исполь- зуются обе стороны, разделенные на 80 дорожек каждая (по 18 секторов на дорожке). Полный объем дискеты равен 1 474 560 байт, или 1 440 кб. Из ПК первым жестким диском был укомплектован ком- пьютер IBM PC XT (1983 г.). Емкость его составляла 10 Мб. В наши дни никого уже не удивишь 20-гигабайтником. Для работы как с гибкими, так и жесткими дисками нужен специальный электронный интерфейс, обеспечивающий об- мен данными с процессором. В наши дни применяются жест- кие диски с несколькими типами интерфейсов, в том числе SCSI (Small Computer System Interface), ESDI (Enhanced Small Device Interface) и IDE (Integrated Device Electronics). В всех этих 401 Под шорох шин интерфейсах для обмена данными между накопителем и опе- ративной памятью в обход микропроцессора используется прямой доступ к памяти. Новички в компьютерных делах обычно легко путаются в гигабайтах и мегабайтах, в оперативной памяти и жестких дис- ках. Чтобы всегда отличать одно от другого, помните, что па- мятью называют только оперативную память, оставив терми- ны «накопитель» или «запоминающее устройство» для всего остального — дискет, жестких дисков, магнитных лент… Я старался всегда следовать этому правилу. Наиболее очевидное отличие оперативной памяти от на- копителя в том, что память энергозависима: ее содержимое уничтожается при выключении питания. Накопители облада- ют большей стойкостью: содержимое дискеты или жесткого диска остается неизменным, пока вы не сотрете его или не за- пишете поверх новые данные. Другое важное отличие поймет лишь человек, знакомый с работой процессора: адресные вы- ходы процессора используются только для обращения к па- мяти и никогда к накопителю. Чтобы с данными мог работать микропроцессор, их нужно перенести из накопителя в оперативную память. Для доступа к диску микропроцессор должен запустить специальную не- большую программу. Если угодно, используйте для понимания различий между оперативной памятью и диском такую аналогию. Оператив- ная память — это ваш рабочий стол. Со всем, что на нем ле- жит, вы можете работать сразу. Дисковый накопитель — это шкаф с папками. Чтобы воспользоваться информацией из шкафа, нужно встать, подойти к нему, вытащить папку и вер- нуться с ней к столу. Если на столе нет места, можно поста- вить некоторые папки обратно в шкаф. Конечно, делается это все не руками. Сохранение инфор- мации и ее считывание относятся к компетенции очень важ- ной программы — операционной системы (ОС). Глава 22 Операционная система Наконец-то мы завершили сборку компьютера (правда, вооб- ражаемого), снабдив его процессором, оперативной памятью, клавиатурой, монитором и жестким диском. Оборудование готово к работе, все провода подсоединены, и мы нетерпеливо посматриваем на тумблер с надписью «Вкл», который вдохнет жизнь в наше детище. Не исключено, что точно такие же эмо- ции обуревали Виктора Франкенштейна и Папу Карло. Но нам все еще кое-чего недостает, причем отнюдь не удара молнии или волшебных слов «крекс-фекс-пекс». Не мешкайте же — включите компьютер и скажите мне, что произошло. Когда монитор нагрелся, вы увидели на нем аккуратно рас- ставленный по строкам и столбцам, но абсолютно бессмыс- ленный набор ASCII-символов. В этом, конечно, нет ничего неожиданного. Питание было выключено, и все предыдущее содержимое видеопамяти стерто. При включении компьюте- ра она заполнилась случайным набором битов, какими запол- нена и оперативная память. Но процессор ничего не знает об этом и считает их кодами программы, которую должен вы- полнить. Ничего по-настоящему плохого, конечно, не случит- ся, и компьютер не взорвется, но и назвать его работу исклю- чительно продуктивной тоже нельзя. Нам определенно не достает программного обеспечения (ПО). После включения или перезапуска процессор выполняет команды, записанные начиная с определенного адреса в памя- 404 Глава двадцать вторая ти. Для процессора 8080 этот адрес — 0000h. В умело собран- ном компьютере при его включении по этому адресу всегда на- ходится исполняемая команда (вероятно, первая из многих). Как она туда попадает? Запись ПО в новорожденный ком- пьютер — вероятно, один из наиболее запутанных этапов на- шего проекта. Самый прямолинейный способ — применить для этого пульт управления памятью из главы 16: 1 0 1 0 Пульт управления Сброс Перехват 1 0  Запись A15 A14 A13 A12 A11 A10 A9 A8 A7 A6 A5 A4 A3 A2 A1 A0 D7 D6 D5 D4 D3 D2 D1 D0 От предыдущего варианта его отличает переключатель Сброс, подключенный к одноименному входу микропроцессора. Пока он замкнут, процессор не работает. Разомкните переключатель, и процессор начнет выполнять программу. Чтобы запустить компьютер с помощью такого пульта, для начала замкните переключатель Сброс. Работа процессора бу- дет остановлена. Затем замкните переключатель Перехват, что- бы перехватить управление адресными линиями и линиями данных шины. Задайте переключателями A0–A15 16-битовый адрес в памяти. Содержимое соответствующей ячейки будет показано лампочками D0–D7. Чтобы записать в нее новое чис- ло, задайте его с помощью переключателей D0–D7, а затем включите и выключите переключатель Запись. Введя в память всю программу, разомкните переключатели Перехват и Сброс. Микропроцессор начнет выполнять команды. Вот так вводятся программы в наш компьютер! Нет нуж- ды говорить, что это очень сложно. При вводе команд вы бу- дете иногда ошибаться — это тоже ясно. Так что считайте мо- золи на пальцах и кашу в голове своими профессиональными заболеваниями. Но все ваши муки будут вознаграждены, когда вы увидите на мониторе результаты работы программы! У текстового дис- плея, о котором мы говорили в главе 21, есть своя видеопа- 405 Операционная система мять емкостью 1 кб, используемая для хранения в ASCII-кодах 25 строк текста по 40 символов в каждой. Данные в нее запи- сываются так же, как и в обычную оперативную память. Писать на мониторе не так просто, как кажется. Допустим, в вашей программе проводятся некие вычисления, результатом которых является число 4Bh. Как отобразить его на экране? Про- сто записать его в видеопамять нельзя — оно будет проинтерп- ретировано как ASCII-код, и на экран будет выведена буква К, которой этот код соответствует. Чтобы увидеть на экране число 4Bh, вы должны ввести в видеопамять два числа: 34h, т. е. код ASCII символа 4, и 42h — код ASCII символа B. Каждая тетрада в 8-битовом результате записывается одной шестнадцатерич- ной цифрой, которая и отображается на экране. Конечно, для перевода цифр в соответствующие ASCII- коды нужно написать короткую подпрограмму. Вот как выг- лядит на языке ассемблера 8080 программа для преобразова- ния тетрады, записанной в аккумуляторе (предполагается, что число заключено между 00h и 0Fh включительно), в ASCII-код соответствующей шестнадцатеричной цифры: NibbleToAscii: CPI A,0Ah ; Проверяем, буква или ; цифра JC Number ADD A,37h ; Цифры A�F преобразуем в ; 41h�46h RET Number: ADD A,30h ; Цифры 0�9 преобразуем в ; 30h�39h RET Чтобы преобразовать записанный в аккумуляторе байт в пару цифр ASCII и записать их в регистры В и С, подпрограмму NibbleToAscii придется вызывать дважды: ByteToAscii: PUSH PSW ; Сохраняем аккумулятор RRC ; Четырежды сдвигаем содержимое А, RRC ; чтобы добраться до старшей RRC ; тетрады RRC CALL NibbleToAscii ; Преобразуем в ASCII�код 406 Глава двадцать вторая MOV B,A ; Перемещаем результат в регистр В POP PSW ; Возвращаем содержимое ; аккумулятора AND A,0Fh ; Получаем младшую тетраду CALL NibbleToAscii ; Преобразуем в ASCII�код MOV A,C ; Перемещаем результат в регистр C RET Эти подпрограммы позволяют отображать на экране в виде цифр шестнадцатеричные числа. Если вы захотите увидеть на мониторе десятичные числа, повозиться придется больше. Не забывайте, что в действительности программы на ас- семблере в память не вводятся. Вы их пишете на бумаге, затем вручную переводите в машинные коды, а вот уже их вносите в память. Как прибор наш пульт управления очень прост, но рабо- тать с ним почти невозможно. Смело утверждаю, что это наи- худшее устройство ввода-вывода в истории компьютерной техники. Очень досадно, что мы, такие умные, собрали на пу- стом месте компьютер, а информацию в него вводим в двоич- ном формате. Избавление от пульта управления — вот наша приоритетная задача. Заменить его нужно, конечно, клавиатурой. Клавиатура, показанная в прошлой главе, прерывает работу процессора при каждом нажатии клавиши. Контроллер прерываний заставля- ет процессор в ответ исполнять команду RST с номером пре- рывания в качестве аргумента. Допустим, это команда RST 1. В результате ее выполнения содержимое программного счет- чика сохраняется в стеке, а затем происходит переход по адре- су 0008h. С помощью пульта управления в эту и следующие ячейки мы введем специальную программу — обработчик кла- виатуры. Сначала нам придется выполнять подготовительные опе- рации — мы назовем их инициализацией. Инициирующая программа должна задавать значение счетчика стека, чтобы стек корректно размещался в памяти. Во все ячейки видеопа- мяти нужно записать ASCII-код пробела — 20h, чтобы изба- виться от «мусора» на экране. По команде OUT (Output, вы- вод) программа-инициализатор задает начальное положение курсора (черточки, указывающей, где будет введен следующий символ) — первый столбец первой строки. Следующая коман- 407 Операционная система да — EI — разрешает использовать прерывания (чтобы мож- но было работать с клавиатурой), а команда HLT останавлива- ет работу процессора. На этом инициирующая программа заканчивается, и про- цессор переводится в состояние останова, в котором будет пре- бывать большую часть времени. Вывести его из этого состоя- ния может замыкание переключателя Сброс или прерывание от клавиатуры. Программа-обработчик клавиатуры гораздо длиннее ини- циализатора — ведь именно она выполняет полезную работу. Когда на клавиатуре нажата клавиша, сигнал прерывания заставляет процессор перейти от последней выполненной ко- манды (HLT) к обработчику клавиатуры. С помощью коман- ды IN (Input, ввод) обработчик определяет, какая клавиша была нажата. В зависимости от ее скан-кода он что-то делает (обра- батывает нажатие клавиши) и выполняет команду RET, ко- торая возвращает процессор к команде HLT, где он может спо- койно ждать нажатия следующей клавиши. Если нажата буква, цифра или знак препинания, обработ- чик по скан-коду определяет соответствующий код ASCII, учи- тывая, была ли нажата клавиша Shift. Затем обработчик запи- сывает найденный ASCII-код в видеопамять, чтобы вывести на экран в текущем положении курсора нужный символ, а кур- сор передвигается на следующую позицию. При вводе несколь- ких символов они выстроятся друг за другом в одну строку. Если нажата клавиша Backspace (ASCII-код 08h), обработ- чик стирает символ, введенный последним, и возвращает кур- сор на одну позицию назад. Реального стирания данных из памяти, конечно, не происходит — просто поверх кода этого символа записывается ASCII-код пробела (20h). Обычно ввод информации происходит так: пользователь набирает строку символов, при необходимости исправляя ошибки с помощью клавиши Backspace, а когда доходит до конца строки, нажимает клавишу Enter. Можно настроить об- работчик так, что после нажатия Enter (ее ASCII-код — 0Dh) он будет интерпретировать символы в видеопамяти как коман- ду для компьютера, т. е.  указание совершить какое-то действие. Для работы с командами включим в обработчик клавиатуры особый фрагмент кода — командный процессор, понимающий, например, три команды: W, D и R. 408 Глава двадцать вторая Если введенная текстовая строка начинается с буквы W, она представляет собой указание записать (write) байты в память. Например, команда, которая на экране выглядит так: W 1020 35 4F 78 23 9B AC 67 указывает командному процессору записать в оперативную память байты 35h, 4Fh и т. д., начиная с адреса 1020h. Чтобы выполнить эту задачу, обработчику клавиатуры придется пре- образовать ASCII-коды в шестнадцатеричные числа. Эта опе- рация обратна той, что я недавно демонстрировал. Команда, начинающаяся с символа D, приказывает отобра- зить (display) содержимое некоторых ячеек памяти. В ответ на команду: D 1030 командный процессор выводит на экран 11 байт, записанных в памяти, начиная с адреса 1030h. Именно столько байт можно показать в 40-символьной строке, помимо команды и адреса. Наконец, командой R вы запускаете (run) программу: R 1000 Эта команда приводит к запуску программы, начинающейся по адресу 1000h. Командный процессор записывает адрес из аргумента в пару регистров HL и выполняет команду PCHL, загружающую содержимое регистров HL  в программный счет- чик, т. е. практически осуществляющую переход по заданно- му адресу. Написав и отладив обработчик клавиатуры и командный процессор, вы совершаете важный шаг вперед. Отныне вам не придется страдать от примитивности пульта управления. Вво- дить данные с клавиатуры быстрее, легче и красивее. Увы, введенная информация по-прежнему исчезает при выключении питания компьютера. Вероятно, коды обработ- чика клавиатуры и командного процессора стоит записать в ПЗУ. В главе 21 я уже говорил о микросхеме ПЗУ, позволяю- щей хранить данные о внешнем виде символов ASCII, подра- зумевая, что все нужные биты «зашиты» в микросхему в про- цессе ее производства. Такие микросхемы называют програм- мируемыми постоянными запоминающими устройствами (ППЗУ). Их можно запрограммировать только однажды. Но 409 Операционная система есть и стираемые постоянные запоминающие устройства (СППЗУ). Их можно перепрограммировать, стерев прежнее содержимое ультрафиолетовым излучением. Как вы помните, для указания диапазона адресов плат па- мяти мы применяли DIP-переключатели. Если вы работаете с процессором 8080, вероятно, диапазон адресов одной из плат компьютера начинается с 0000h. После ввода данных в микро- схему ПЗУ этот адрес будет принадлежать ей, так что плату памяти придется переключить на другой диапазон. Создание обработчика клавиатуры можно считать важным этапом работы не только потому, что он облегчает ввод дан- ных в память, но и потому, что обработчик сделал компьютер интерактивным (interactive). Вы нажимаете клавиши, и вво- димые символы сразу отображаются на экране. Записав командный процессор в ПЗУ, можно начинать эксперименты с записью данных на жесткий диск (вероятно, порциями, размер которых совпадает с размером сектора на диске) и считыванием их оттуда обратно в память. Хранить данные и программы на жестком диске намного безопаснее, чем в оперативной памяти. Кроме того, диск в сравнении с ПЗУ более многофункционален. Для работы с диском в командный процессор придется до- бавить новые команды, например, команду S (store, сохранить): S 2080 2 15 3 чтобы записать фрагмент памяти, начинающийся в ячейке 2080h, на диск по адресу — сторона 2, дорожка 15, сектор 3 (размер фрагмента равен размеру сектора). Пару команде S составит L (load, загрузить), выполняющая обратное действие: L 2080 2 15 3 Конечно, вам придется помнить, что и куда вы сохранили, и не убирать карандаш с блокнотом далеко от компьютера. Будь- те внимательны: записать на диск программу из одной области памяти, а затем загрузить ее в другую нельзя. В командах пере- хода будут записаны старые адреса, поэтому по новому адресу программа работать не будет. Если размер программы окажет- ся больше размера сектора, вам придется сохранять ее в несколь- ких секторах. Поскольку часть места на диске, вероятно, занята другими данными, сектора с одной и той же программой не обязательно будут следовать друг за другом. 410 Глава двадцать вторая Очень скоро вы решите, что сидеть перед компьютером и продолжать записывать на бумажке адреса секторов и отме- чать, что в них сохранено, — слишком трудоемко. Значит, вы созрели для разработки файловой системы (file system). Файловая система — это способ организации информации на диске, при котором она разделяется на файлы, т. е. наборы данных, объединенные общим смыслом, записанные в одном или нескольких секторах. Самое важное: каждому файлу мож- но присвоить имя, которое поможет вам запомнить, что имен- но в нем содержится. Если вам нравится сравнивать диск с кон- торским шкафом, считайте, что имя файла — это бирка, на- клеенная на папку с бумагами. Файловая система почти всегда является частью большого собрания программ — операционной системы (operating system), или ОС. Обработчик клавиатуры и командный про- цессор, о которых мы говорили, вполне могут стать основой для ОС, но мы, пожалуй, не станем тратить времени на ее раз- работку. С действием ОС и с ее основными функциями мы познакомимся на конкретных примерах. Исторически самой важной ОС для 8-битовых процессоров стала CP/M (Control Program for Micros, управляющая програм- ма для микрокомпьютеров), написанная Гэри Килдаллом (Gary Kildall) (род. 1942) в середине 1970-х годов для процессора 8080. Позже ее автор стал основателем корпорации Digital Research. Система CP/M хранилась на диске. Поначалу самым попу- лярным носителем для нее была односторонняя 8-дюймовая дискета с 77 дорожками, 26 секторами на дорожке, 128 байта- ми в секторе (всего 256 256 байтов). Сама система содержалась на первых двух дорожках. Как она попадала с диска в опера- тивную память, я расскажу чуть позже. Остальные 75 дорожек использовались для хранения фай- лов. Файловая система CP/M довольно проста, но удовлетворя- ет двум основным требованиям. Во-первых, каждый файл на диске имеет имя, которое также записано на диске. Вообще вся информация, нужная CP/M для работы с файлами, хранится на диске вместе с ними. Во-вторых, файлы на диске могут распо- лагаться в несмежных секторах. Работая на компьютере, вы по- стоянно создаете и удаляете файлы разных размеров, и потому свободное пространство на диске быстро фрагментируется. В таких обстоятельствах умение системы разбрасывать файл по несмежным свободным секторам весьма полезно. 411 Операционная система Секторы 75 дорожек для размещения файлов группируются в блоки по 8 секторов (или по 1 024 байта). Всего на диске 243 блока, пронумерованных от 0 до 242. В первых двух блоках (2 048 байт) записан каталог (directory) — область диска, где хранятся имена и другая важ- ная информация обо всех файлах на диске. Каждому файлу соответствует элемент каталога (directory entry) длиной 32 байта. Так как полный размер каталога 2 048 байт, максималь- ное число файлов, которое можно сохранить на дискете, — 64. Элемент каталога содержит следующие сведения: Байты Значение 0 Обычно равен 0 1–8 Имя файла 9–11 Тип файла 12 Продолжение 13–14 Зарезервированы (равны 0) 15 Секторов в последнем блоке 16–31 Карта диска Первый байт элемента задействуется, только если файловая си- стема применяется в многопользовательском режиме. В CP/M этот байт, а также байты 13 и 14 обычно равны 0. Имя файла в CP/M состоит из двух частей. Первая часть — собственно имя файла (filename) длиной до 8 символов — за- писывается в байты 1–8. Длина второй — типа файла (file type) — ограничена тремя символами, для хранения которых пред- назначены байты 9–11. Некоторые типы файлов являются стан- дартными. Например, тип TXT указывает на текстовый файл, т. е. файл, содержащий только ASCII-коды, а тип COM — на файл с командами для процессора 8080, т. е. программу. При указании полного имени файла имя и тип разделяются точкой: MYLETTER.TXT CALC.COM Такой способ именования файлов известен как 8.3 (восемь- точка-три) — 8 символов имени, точка и 3 символа типа. В байтах с картой диска указаны блоки, в которых хранит- ся файл. Если, например, первые 4 байта карты равны 14h, 15h, 412 Глава двадцать вторая 07h и 23h, а остальные — 0, это значит, что файл занимает 4 блока, т. е. 4 килобайта. В реальности файл может оказаться короче. В байте 15 записано число 128-байтовых секторов, ре- ально занятых файлом в его последнем блоке. Длина карты диска — 16 байт. Этого хватит, чтобы указать положение файла длиной до 16 384 байтов. Информация о файле длиной более 16 кб хранится в нескольких элементах каталога, называемых продолжениями (extents). Байт 12 перво- го элемента каталога устанавливается в 0, а в элементах-про- должениях он равен 1, 2, 3 и т. д. Выше я упомянул текстовые файлы (text files), известные также как ASCII-файлы. Такой файл содержит только коды ASCII, включая коды возврата каретки и перевода строки, и характеризуется тем, что его содержимое можно читать. Файл, лишенный этих качеств, называется двоичным (binary). Дво- ичными, например, являются файлы типа COM, поскольку в них содержатся не ASCII-коды, а коды команд процессора 8080. Допустим, нам нужно сохранить в файле (очень коротком) три 16-битовых числа: 5A48h, 78BFh и F510h. Двоичный файл с этими числами будет иметь размер всего 6 байт: 48 5A BF 78 10 F5 Это, конечно, формат хранения многобайтовых чисел, при- нятый в Intel: младший байт записывается первым. Програм- ма для процессоров Motorola записала бы их так: 5A 48 78 BF F5 10 В ASCII-файле те же 16-битовые значения будут сохранены в таком виде: 35 41 34 38 68 0D 0A 37 38 42 46 68 0D 0A 46 35 31 30 68 0D 0A Эти числа — ASCII-коды цифр и букв, которыми записыва- ются 16-битовые числа. За каждым числом следуют символы возврата каретки (0Dh) и перевода строки (0Ah). ASCII-файл удобнее отображать в виде не строки кодов, а самих символов: 5A48h 78BFh F510h 413 Операционная система Текстовый файл с тремя этими числами может выглядеть и так: 32 33 31 31 32 0D 0A 33 30 39 31 31 0D 0A 36 32 37 33 36 0D 0A Эти байты являются ASCII-кодами тех же чисел, но в десятич- ном представлении: 23112 30911 62736 Поскольку текстовые файлы обычно предназначены для чте- ния и должны быть максимально понятны человеку, в них, конечно, предпочтительнее использовать десятичные числа. Как я уже говорил, система CP/M хранится на первых двух дорожках диска. Чтобы запустить систему, ее нужно перепи- сать с диска в память. Программа, выполняющая это действие, хранится в микросхеме ПЗУ и называется загрузчиком програм- мы раскрутки (bootstrap loader). Загрузчик считывает с диске- ты первый сектор (128 байт), загружает его в память и запус- кает. Коды, содержащиеся в этом секторе, загружают в память оставшуюся часть системы CP/M. Весь процесс называется загрузкой (booting). В конце загрузки система полностью размещается в опера- тивной памяти, занимая ее старшие адреса. Структура памяти после этого такова: Системные параметры 0000h: Область программ пользователя Командный процессор консоли 0100h: Базовая дисковая операционная система Базовая система ввода�вывода Старший адрес: 414 Глава двадцать вторая Масштаб здесь не соблюден. Три основных компонента систе- мы — базовая система ввода-вывода (Basic Input/Output System, BIOS), базовая дисковая ОС (Basic Disk Operating System, BDOS) и командный процессор консоли (Console Command Processor, CCP) — занимают в памяти всего около 6 кб. Область про- грамм пользователя (Transient Program Area, TPA)  — около 58 кб на компьютере с оперативной памятью 64 кб — поначалу не содержит ничего. Командный процессор консоли выполняет приблизитель- но те же функции, что и простой командный процессор, о ко- тором мы говорили в начале главы. Консолью обычно называ- ют совокупность клавиатуры и дисплея. Процессор консоли отображает на дисплее приглашение (prompt) системы, кото- рое выглядит так: A> Наличие приглашения на экране означает, что вы должны что- то ввести. На компьютерах с несколькими дисками буквой А обозначается первый из них, тот, с которого была загружена система CP/M. Набрав команду, вы нажимаете клавишу Enter. Процессор CCP обрабатывает команду, обычно выводя на эк- ран какую-то информацию. Когда выполнение команды за- кончено, на экране вновь появляется приглашение. Процессор ССР распознает не так много команд. Самая важная из них, вероятно, DIR — она отображает на экране со- держимое каталога диска, т. е. имена всех сохраненных на нем файлов. Символы * и ? позволяют ограничить диапазон выво- димых имен файлов. Так, команда: DIR *.TXT вы выведете на экран список всех текстовых файлов, а команда: DIR A???B.* список всех файлов, имена которых состоят из 5 символов, начинаются на А и заканчиваются на В. Команда ERA (erase, удалить) применяется для удаления файла с диска. Например, в результате выполнения: ERA MYLETTER.TXT с диска будет удален файл MYLETTER.TXT, а командой: 415 Операционная система ERA *.TXT вы удалите с диска все текстовые файлы. Удаление файла оз- начает освобождения элемента каталога и пространства на дис- ке, которое этот файл занимал. Для переименования файла служит команда REN (rename, переименовать), а TYPE (напечатать) выводит на экран содер- жимое текстового файла. SAVE (сохранить) сохраняет на дис- ке с заданными именем один или несколько 256-байтовых бло- ков оперативной памяти. Если введенная команда процессору ССР неизвестна, он считает, что введено имя файла с программой на диске. Тип таких файлов — всегда СОМ. Процессор ищет на диске файл с таким именем, а найдя, загружает в область программ пользо- вателя, которая начинается с адреса 0100h. Например, если вы введете после приглашения команду: CALC процессор найдет на диске файл CALC.COM, загрузит его в память, начиная с адреса 0100h, а затем начнет выполнение команд, расположенных в ячейке 0100h и следующих за ней. Раньше я говорил, что в принципе программы могут рас- полагаться в памяти где угодно, но у программ для системы CP/M этой свободы нет. Они могут начинаться только в ячей- ке 0100h. В комплект CP/M входит несколько готовых программных файлов, например, программа для копирования файлов PIP (Peripheral Interchange Program, программа обмена с перифе- рией) и текстовый редактор ED для создания и изменения тек- стовых файлов. Небольшие программы наподобие PIP и ED, предназначенные для решения простых задач, часто называ- ют служебными программами или утилитами (utilities). Для решения более сложных задач в CP/M служат коммерческие прикладные программы (applications), например, текстовые про- цессоры и электронные таблицы. Все они, как и программы, созданные вами, хранятся на диске в файлах с типом COM. До сих пор мы говорили лишь о том, как с помощью CP/M (или другой ОС) выполняется повседневная работа с файла- ми, а также как происходит загрузка и исполнение программ. Однако у ОС есть и третье предназначение. 416 Глава двадцать вторая Программе, выполняемой под CP/M, часто бывает нужно вывести что-то на экран, или считать символы, введенные с клавиатуры, или сохранить данные диск, или прочитать их с диска. Однако обычно программа непосредственно с обору- дованием не общается. Для выполнения этих задач в CP/M включено несколько вспомогательных подпрограмм, к которым обращаются при- кладные программы. Назначение этих подпрограмм — обес- печить программисту легкий доступ к оборудованию компьюте- ра, включая монитор, клавиатуру и диск, не заботясь при этом о том, как физически соединены эти компоненты. Самое важ- ное, пожалуй, то, что программе для CP/M не нужно беспоко- иться о дорожках и секторах на диске. Это работа для ОС. Про- грамме же можно записывать и считывать файлы целиком, не обращая внимания на то, как именно они размещены на диске. Это и есть третья основная функция ОС — дать програм- мам легкий доступ к оборудованию компьютера, т. е. обеспе- чить их интерфейсом прикладного программирования (Application Programming Interface, API). Чтобы задействовать API в системе CP/M, программа за- писывает в регистр С величину, называемую номером функ- ции, и выполняет команду: CALL 5 Например, чтобы получить ASCII-код клавиши, нажатой на клавиатуре, в программу нужно вставить команды: MVI C,01h CALL 5 После выполнения этих команд ASCII-код нажатой клавиши будет содержаться в аккумуляторе. Команды: MVI C,02h CALL 5 выводят на экран символ, ASCII-код которого находится в ак- кумуляторе, и сдвигают курсор в следующую позицию. Чтобы создать файл, вы должны записать в пару регист- ров DE адрес области памяти, в которой содержится имя фай- ла, а затем выполнить команды: 417 Операционная система MVI C,16h CALL 5 В данном случае на диске будет создан пустой файл с задан- ным именем. Затем с помощью других функций программа может записывать в этот файл данные, а также в конце работы закрыть его. Позже та же или другая программа могут от- крыть этот файл и прочитать записанные в нем данные. Что же делает команда CALL 5? В системе CP/M ячейка с адресом 0005h содержит команду JMP, которая осуществляет переход в область памяти, отведенную базовой дисковой ОС. В ней размещаются подпрограммы для выполнения различ- ных функций CP/M. Система BDOS, как следует из ее имени, отвечает в основном за работу файловой системы. При этом она часто обращается к подпрограммам базовой системы вво- да-вывода. Только этим последним и приходится реально иметь дело с оборудованием компьютера. Процессор ССР да и все служебные программы CP/M все свои задачи решают с помощью функций BDOS. Интерфейс API является аппаратно независимым. Это зна- чит, что при написании программы для CP/M вы не должны ничего знать о том, как работают на данном компьютере кла- виатура, монитор или диск. Для работы с этими устройствами вы применяете функции CP/M. Преимущество такой органи- зации работы очевидно: программа будет работать на любом компьютере с самыми различными моделями внешних уст- ройств, конечно, при условии, что на компьютере установлен процессор 8080 или другой, понимающий систему команд 8080, например, 8085 фирмы Intel или Z-80 фирмы Zilog. Доступ к оборудованию осуществляется не напрямую, а с помощью функций CP/M. Без стандартного API-интерфейса пришлось бы для каждого компьютера писать собственную программу. На компьютерах с процессором 8080 CP/M была очень по- пулярна, и важность ее трудно переоценить. Она оказала боль- шое влияние на операционную систему QDOS, написанную Тимом Патерсоном (Tim Paterson) из Seattle Computer Products для 16-разрядных процессоров 8086 и 8088 фирмы Intel. Поз- же QDOS была переименована в 86-DOS и стала собственнос- тью фирмы Microsoft. Под именем MS-DOS и PC-DOS она ус- танавливалась на первых компьютерах IBM PC. Для них же 418 Глава двадцать вторая была создана и 16-разрядная версия CP/M — CP/M-86, но по- пулярности MS-DOS она не достигла никогда. Лицензии на установку MS-DOS продавались и другим производителям IBM-совместимых компьютеров. Файловая система CP/M в MS-DOS не используется. Ее ме- сто заняла схема, основанная на применении таблицы разме- щения файлов (File Allocation Table, FAT), изобретенной в Microsoft в 1977 г. Дисковое пространство в файловой системе MS-DOS разделено на кластеры (clusters), размер которых в зависимости от размера диска варьируется от 512 до 16 384 байтов. Каждый файл записывается в несколько кластеров. В элементе каталога для файла указывается только начальный кластер, а в таблице FAT для каждого кластера хранятся сведе- ния о том, в каком кластере находится продолжение файла. Длина элемента каталога в MS-DOS также 32 байта, а име- на файлов подчиняются той же структуре 8.3, что и в CP/M. Правда, то, что в CP/M называлось типом файла, в MS-DOS называется его расширением (extension). Списка блоков в эле- менте каталога нет. Вместо него в элемент включены такие полезные сведения, как дата и время последнего изменения файла, а также его размер. Структура первых версий MS-DOS мало отличалась от структуры CP/M. Правда, системы BIOS в ОС уже не было, так как в IBM PC микросхема ПЗУ BIOS встроена в сам компью- тер. Командный процессор MS-DOS хранится в файле COMMAND.COM. Программы MS-DOS бывают двух типов. Программные файлы с расширением COM не могут быть боль- ше 64 кб. Более объемные программы хранятся в файлах с рас- ширением EXE. Хотя поначалу интерфейс CALL 5 для функций API в MS- DOS поддерживался, для новых программ рекомендовалось применять интерфейс программных прерываний (software interrupt). Программное прерывание подобно вызову подпрог- раммы за исключением того, что в данном случае программа не должна знать, к какому адресу она в действительности об- ращается. Функцию API-интерфейса MS-DOS программа вы- зывает командой INT 21h. Теоретически предполагается, что прикладная программа общается с оборудованием компьютера только посредством функций ОС. Однако многие программисты, писавшие при- 419 Операционная система кладные программы для небольших компьютеров в 1970-х и начале 1980-х, зачастую обходили ОС, особенно при работе с дисплеем. Программы, обращавшиеся прямо к видеопамяти, ра- ботали гораздо быстрее, чем те, в которых применялись функ- ции API. Если же при работе программы возникала необходи- мость вывода на экран графических изображений, использо- вание функций ОС становилось совершенно неприемлемым. Многим программистам в MS-DOS больше всего нравилось именно то, что система без необходимости «не путалась под ногами» и не мешала программам самим обращаться к обору- дованию. По этой причине во многих программах для IBM PC ис- пользовались специфические особенности оборудования, из- готавливаемого этой компанией. Производителям компьюте- ров, которые должны были составить конкуренцию IBM PC, зачастую приходилось копировать эти особенности, иначе воз- никал риск, что какая-нибудь популярная программа на их компьютерах будет работать неэффективно или вообще не будет работать. В документации к программам часто указыва- лось, что они предназначены только для работы на IBM PC или на «100%-совместимом компьютере». В версию MS-DOS 2.0 (март 1983 г.) была добавлена под- держка жестких дисков, которые в те времена были невелики, но быстро увеличивались в емкости. Чем вместительнее диск, тем больше файлов на нем можно хранить. Чем больше фай- лов на диске, тем сложнее в них разобраться. В качестве решения этой проблемы в MS-DOS 2.0 была предложена иерархическая файловая система, которую удалось добавить к обычной файловой системе MS-DOS с минимумом изменений. Как вы помните, на диске имеется область, назы- ваемая каталогом. В ней хранится список файлов и информа- ция об их положении на диске. В иерархической файловой си- стеме некоторые из этих файлов сами могут быть каталогами, т. е. содержать список файлов, некоторые из которых также могут быть каталогами и т. д. Обычный дисковый каталог на- зывается корневым (root), а каталоги, вложенные друг в друга, — подкаталогами (subdirectories). Файлы, относящиеся к раз- личным проектам, удобно хранить в различных подкаталогах. Иерархическая файловая система и некоторые другие осо- бенности MS-DOS 2.0 были позаимствованы из ОС UNIX, раз- 420 Глава двадцать вторая работанной в начале 1970-х в Bell Telephone Laboratories. Глав- ными ее создателями были Кен Томпсон (Ken Thompson) (род. 1943) и Деннис Ритчи (Dennis Ritchie) (род. 1941). UNIX разра- батывалась как облегченный вариант ОС Multics, которую в Bell Telephone Laboratories создавали в сотрудничестве с Мас- сачусетским технологическим институтом и компанией General Electric. UNIX пользуется неизменной популярностью у «крутых» программистов. Обычно ОС пишут под конкретную модель компьютера. UNIX же должна была быть переносимой (portable), т. е. легко адаптироваться к любым компьютерным системам. Во времена разработки UNIX компания Bell Telephone Laboratories входила в состав American Telephone & Telegraph, а потому на эту ОС распространялись различные судебные ре- шения, призванные ограничить монополию American Tele- phone & Telegraph в телефонной индустрии. Поначалу компа- нии запрещалось продавать UNIX, кроме того, она обязана была выдавать другим организациям лицензии на использо- вание ОС. C 1973 г. университетам, коммерческим и прави- тельственным организациям было выдано множество таких лицензий. Только в 1983 г. корпорации American Telephone & Telegraph разрешено было вернуться в компьютерный бизнес, что она ознаменовала выпуском собственной версии UNIX. Итогом этой запутанной истории стало отсутствие единой версии UNIX. Эту систему продают разные фирмы под раз- ными названиями и с разными особенностями. В работе над UNIX принимало участие множество людей, и все они остави- ли в системе свой след. И все же существует и общая «филосо- фия UNIX», которой следуют практически все разработчики программ для этой ОС. Одна из основ этой философии — широкое применение текстовых файлов. Логика действия мно- гих программ для UNIX заключается в считывании текстово- го файла, его обработке и записи на диск нового текстового файла. Служебные программы UNIX можно объединять в це- почки для выполнения последовательных действий с тексто- вым файлом. Первоначально UNIX создавалась для компьютеров, кото- рые для одного пользователя были слишком велики и неде- шевы. На таких машинах благодаря разделению времени (time 421 Операционная система sharing) одновременно могут работать несколько человек. К компьютеру подключено множество терминалов, т. е. диспле- ев с клавиатурами. Поочередно выделяя время различным тер- миналам, ОС создает у пользователя впечатление одновремен- ного выполнения нескольких задач. ОС, способная одновременно выполнять несколько задач, называется многозадачной (multitasking). Она, очевидно, более сложна, чем однозадачные системы MS-DOS и CP/M. Много- задачность усложняет также и организацию файловой систе- мы, так как приходится учитывать возможность одновремен- ного обращения к одному файлу нескольких пользователей. Она также влияет на порядок выделения памяти различным программам. Поскольку нескольким одновременно работаю- щим программам памяти нужно больше, чем одной програм- ме, память компьютера вполне может оказаться исчерпанной. Для решения этой проблемы в многозадачных системах при- меняется виртуальная память (virtual memory): блоки памя- ти, которые в данный момент не нужны, сохраняются во вре- менных файлах на диске, а по мере надобности возвращаются обратно в память. В последние годы наиболее интересным результатом раз- вития UNIX стали Фонд бесплатных программ (Free Software Foundation, FSF) и проект GNU, основанные Ричардом Стал- лменом (Richard Stallman). Название проекта GNU пишется так же, как и название знаменитой антилопы гну, а расшифровы- вается так: GNU — не UNIX (GNU’s not UNIX), что, конечно же, чистая правда. Программы GNU совместимы с UNIX, од- нако распространяются так, что обратить их в чью-либо соб- ственность нельзя. В результате работы проекта GNU появи- лось не только множество программ для UNIX, но и ядро ОС Linux. В значительной степени написанная Линусом Торваль- дсом (Linus Torvalds) из Финляндии, она стала очень популяр- на в последние годы. Начиная с 1980-х, главной тенденцией в развитии ОС ста- ло появление больших сложных систем, подобных Mac OS и Microsoft Windows, в которых для облегчения работы с при- ложениями интенсивно используются графические средства видеосистем. Я подробно опишу эту тенденцию в главе 25. Глава 23 Фиксированная точка, плавающая точка В обыденной жизни мы свободно переходим от целых чисел к дробям и процентам. Мы покупаем пол-упаковки яиц, кассир прибавляет к их цене налог 8 1/4 %, и мы расплачиваемся день- гами, полученными за 2 3/4 часа сверхурочной работы по та- рифу в 1,5 раза больше обычного. Подобными числами боль- шинство людей оперирует вполне уверенно, хотя и не всегда умело. Мы даже спокойно воспринимаем слова статистиков «средняя американская семья состоит из 2,6 человека» и не со- дрогаемся при мысли о том, какое ужасное и повсеместное членовредительство к этому привело.  К сожалению, в компьютерной памяти целые числа и дро- би не соседствуют с той же легкостью. Да, в компьютерах все закодировано битами, т. е. в виде двоичных чисел. Но некото- рые числа выразить битами легче, чем другие. Свое знакомство с битами мы начали с того, что представ- ляли с их помощью числа, которые на языке математики на- зываются положительными натуральными или положитель- ными целыми. Мы также убедились, что для представления целых отрицательных чисел удобно применять дополнения до двух, поскольку это облегчает сложение положительных и от- рицательных чисел. В таблице показано, какие целые числа без знака (положительные) и со знаком (отрицательные в виде 424 Глава двадцать третья дополнения до двух) можно хранить в 8-, 16- и 32-разрядных ячейках памяти. Число Диапазон целых Диапазон целых битов положительных чисел отрицательных чисел 8 От 0 до 255 От –128 до 127 16 От 0 до 65 535 От –32 768 до 32 767 32 От 0 до 4 294 967 295 От –2 147 483 648 до 2 147 483 647 На этом мы и остановились. Но, помимо целых, в матема- тике есть также рациональные числа, которые можно предста- вить в виде дроби, т. е. отношения двух целых чисел. Напри- мер, 3/4 — рациональное число, так как оно является отноше- нием 3 и 4. В форме десятичной дроби это же число записыва- ется так: 0,75. Несмотря на иную форму записи, это тоже ра- циональное число, равное отношению 75 и 100. В десятичной системе счисления слева от десятичного раз- делителя стоят цифры-множители целых положительных сте- пеней десяти. Цифры справа от десятичного разделителя яв- ляются множителями отрицательных степеней десяти. Скажем, число 42 705,684 можно записать так: 4 � 10 000 + 2 � 1000 + 7 � 100 + 0 � 10 + 5 � 1 + 6 � 10 + 8 � 100 + 4 � 1000 Здесь я использовал знаки деления, но можно обойтись и без них — с помощью десятичных дробей: 4 � 10 000 + 2 � 1000 + 7 � 100 + 0 � 10 + 5 � 1 + 6 � 0,1 + 8 � 0,01 + 4 � 0,001 425 Фиксированная точка, плавающая точка или степеней десяти: 4 � 104 + 2 � 103 + 7 � 102 + 0 � 101 + 5 � 100 + 6 � 10–1 + 8 � 10–2 + 4 � 10–3 Некоторые рациональные числа не так-то легко предста- вить в виде десятичной дроби. Самый простой пример — 1/3. Разделив 1 на 3, получим: 0,3333333333333333333333333333333333333... и так без конца. Нужно признать, что в форме десятичной дро- би число 1/3 выглядит несколько неуклюже, и все же это пол- ноценное рациональное число, являющееся отношением двух целых чисел. Существуют и более сложные периодические десятичные дроби, например, 1/7: 0,142857142857142857142857142857142857142857... Числа, которые нельзя представить в виде отношения це- лых чисел, называются иррациональными. Они записываются в виде бесконечных десятичных дробей без каких бы то ни было повторений. Примером может служить квадратный ко- рень из 2 — решение алгебраического уравнения х2 – 2 = 0: 2~~1.4142135623730950488016887242096980785696718... Иррациональное число, которое не является решением ал- гебраического уравнения с целочисленными коэффициента- ми, называется трансцендентным. Все трансцендентные чис- ла иррациональны, но не все иррациональные числа трансцен- дентны. К трансцендентным числам относится знаменитое число �, равное отношению длины окружности к ее диаметру: 3,14159265358979328462643383279502884... Другое трансцендентное число — е, к которому стремится зна- чение выражения: 426 Глава двадцать третья 1 + 1 n n при n, стремящемся к бесконечности. Оно приблизительно равно: 2,718281828459045235360287471352662497757247... Вместе рациональные и иррациональные числа называют- ся действительными или вещественными числами. Противо- положность им — мнимые числа: квадратные корни из отри- цательных величин. Комплексные числа являются комбинаци- ей реальных и мнимых чисел. Несмотря на подозрительное название, мнимые числа существуют и даже активно исполь- зуются в решении многих научных и практических задач. Мы привыкли думать о непрерывном ряде чисел. Дайте мне два рациональных числа, и я всегда найду между ними третье, например, их среднее арифметическое. Но цифровые компью- теры не имеют дела с непрерывностью. Бит равен либо 0, либо 1 и никаких промежуточных значений не допускает. По самой своей сути компьютеры обречены работать с дискретными ве- личинами. Количество таких величин, представимых с помо- щью битов, напрямую зависит от количества последних. Так, в 32-битовой ячейке памяти можно хранить положительные це- лые числа от 0 до 4 294 967 295. Чтобы записать в память компь- ютера значение 4,5, нужно придумать что-то другое. Можно ли представить в двоичном виде дробные величи- ны? Можно. Самый простой способ — прибегнуть к двоично- десятичному коду (ВСD), о котором мы говорили в главе 19. Код ВСD предназначен для записи в двоичной системе деся- тичных чисел. Каждой десятичной цифре (0, 1, 2, 3, 4, 5, 6, 7, 8 и 9) сопоставлено 4-битовое двоичное число: Десятичная цифра Двоичная число 0 0000 1 0001 2 0010 3 0011 4 0100 427 Фиксированная точка, плавающая точка 5 0101 6 0110 7 0111 8 1000 9 1001 Код ВСD, в частности, удобно применять в компьютерных про- граммах, работающих с денежными суммами, когда в дроб- ных числах в основном достаточно двух знаков после запя- той. Две десятичные цифры, представленные кодом ВСD, часто хранят в 1 байте. Такая система записи называется уплотнен- ным кодом ВСD (packed ВСD). Дополнение до двух в уплотнен- ном коде ВСD не применяется, поэтому для хранения знака обычно нужен дополнительный бит знака (sign bit). Поскольку под число в коде BCD удобно отводить целое число байтов, бит знака фактически занимает в памяти 4 или 8 битов. Рассмотрим пример. Допустим, вашей программе никогда не приходится встречаться с суммами, превышающими 10 млн. долларов, ни в положительном, ни в отрицательном балансе. Иначе говоря, вам нужно представлять суммы в диапазоне от –9 999 999,99 до 9 999 999,99. Для хранения каждой суммы в памяти нужно отвести 5 байт. Скажем, число –4 325 120,25 пя- тью байтами представляется так: 00010100   00110010   01010001   00100000   00100101 или в шестнадцатеричном формате: 14h 32h 51h 20h 25h Заметьте: первая слева тетрада равна 1, т. е. число отрицатель- ное. Это и есть бит знака. Если бы число было положитель- ным, первая тетрада равнялась бы 0. Для представления каж- дой цифры требуется 4 бита; десятичные цифры совпадают с шестнадцатеричными. Чтобы хранить в памяти значения от –99 999 999,99 до 99 999 999,99, вам потребуется 6 байт: 5 для 10 цифр и еще байт для бита знака. (продолжение) 428 Глава двадцать третья Такой тип записи дробных чисел называется записью с фиксированной точкой (fixed-point)1, так как десятичный раз- делитель всегда находится в определенном месте числа. В на- шем примере после него всегда стоят две цифры. Вы вольны отводить под дробную часть числа любое количество знаков и использовать в одной и той же программе числа с разным ко- личеством знаков после запятой. Но заметьте: информация о положении разделителя вместе с числом не хранится, поэто- му программа должна как-то узнавать, где он находится. Формат с фиксированной точкой хорош, если вы знаете, что числа не «перерастут» ту область памяти, которую вы для них отвели, и что вам не понадобится увеличить количество знаков после запятой. Но он пасует, если числа становятся слишком большими или маленькими. Представьте, что вам нужно предусмотреть в памяти место для записи разнообраз- ных расстояний. Но что это будут за числа? Расстояние от Зем- ли до Солнца составляет 150 000 000 000 метров, а боровский радиус атома водорода — 0,00000000005 м. Чтобы заранее пре- дусмотреть место для хранения любых промежуточных зна- чений в формате с фиксированной точкой, вам придется от- вести для них 12 байт памяти. Мы, вероятно, выработаем лучший способ хранения по- добных чисел, если вспомним о научной нотации, которую широко применяют ученые и инженеры. В ней длинные ряды нулей заменяются на степень десяти, благодаря чему удобно представлять очень большие и очень маленькие числа. В на- учной нотации число: 150 000 000 000 выглядит как: 1,5 � 1011 а число: 0,00000000005 — как: 5 � 10–11 1 Вообще-то в России в качестве десятичного разделителя традиционно используется запятая. С другой стороны, описываемые форматы записи десятичных чисел применяются при составлении программ, а в языках программирования в качестве разделителя практически всегда используется точка. Поэтому в книге используются термины «фиксированная точка» и «плавающая точка». — Прим. перев. 429 Фиксированная точка, плавающая точка Число перед степенью 10 (в наших примерах 1,5 и 8) иногда называют мантиссой (хотя этот термин уместней применять по отношению к логарифмам). Я буду называть его значащей частью числа (significand) в соответствии с компьютерной тер- минологией. Порядком (exponent) называется степень, в которую возво- дится 10. В первом примере порядок равен 11; во втором –11. Порядок позволяет узнать, на сколько знаков смещен десятич- ный разделитель по сравнению с записью числа в формате с фиксированной точкой. Традиционно в научной нотации значащая часть заключе- на между 1 (включительно) и 10. Числа, приведенные ниже, равны: 1,5 � 1011 = 15 � 1010 = 150 � 109 = 0,15 � 1012 = 0,015 � 1013 но первый вариант наиболее предпочтителен. Преобразова- ние числа в научной нотации к стандартному виду называется нормализацией. Заметьте: знак показателя степени указывает на порядок числа, но не на его положительность или отрицательность. Вот как выглядят в научной нотации отрицательные числа: –5,8125 � 107 = –58 125 000 –5,8125 � 10–7 = –0,00000058125 В компьютерах научная нотация стала основой для записи чисел в формате с плавающей точкой (floating point). В отли- чие от формата с фиксированной точкой он идеален для хра- нения маленьких и больших чисел. Важное отличие от тради- ционной научной нотации в том, что в компьютерах формат с плавающей точкой используется для двоичных  чисел. Для на- чала разберемся, как в двоичном формате выглядят дроби. Вообще-то все проще, чем кажется. В десятичной записи цифры справа от десятичного разделителя соответствуют от- рицательным степеням 10. В двоичной записи цифры справа от двоичного разделителя соответствуют отрицательным сте- пеням 2. Например, двоичное число 101,1101 преобразуется в десятичное так: 430 Глава двадцать третья 1 � 4 + 0 � 2 + 1 � 1 + 1 � 2 + 1 � 4 + 0 � 8 + 1 � 16 Заменяем знаки деления отрицательными степенями 2: 1 � 22 + 0 � 21 + 1 � 20 + 1 � 2–1 + 1 � 2–2 + 0 � 2–3 + 1 � 2–4 Отрицательные степени двух записываем в виде десятичных дробей: 1 � 4 + 0 � 2 + 1 � 1 + 1 � 0,5 + 1 � 0,25 + 0 � 0,125 + 1 � 0,0625 В результате получаем, что двоичное число 101,1101 экви- валентно десятичному 5,8125. В десятичной форме нормализованная значащая часть чис- ла заключена между 1 и 10. Это верно и в двоичной системе: нормализованная значащая часть всегда больше либо равна 1 и меньше 10 (2 в десятичной системе). Поэтому в двоичной нотации число 101,1101 записывается как: 1,011101 � 22 Отсюда интересный вывод: в нормализованном двоичном числе с плавающей точкой слева от разделителя всегда стоит 1 и только 1. В большинстве современных компьютеров и программ для чисел с плавающей точкой применяется стандарт, введенный 431 Фиксированная точка, плавающая точка в 1985 г. Институтом инженеров по электротехнике и радио- электронике (Institute of Electrical and Electronics Engineers, IEEE) и признанный Американским национальным институ- том по стандартизации (American National Standards Institute, ANSI), — стандарт IEEE для двоичной арифметики с плаваю- щей точкой (IEEE Standard for Binary Floating-Point Arithmetic). Его описание занимает всего 18 страниц, но основы кодирова- ния двоичных чисел с плавающей точкой изложены в нем очень ясно. В стандарте IEEE определены два основных формата: фор- мат с простой точностью (single precision), в котором для за- писи числа отводится 4 байта, и формат с двойной точностью (double precision), занимающий 8 байт. Сначала рассмотрим формат с простой точностью. В нем число разделяется на 3 части: 1 бит для знака (0 для положи- тельных чисел и 1 для отрицательных), 8 бит для порядка и 23 бита для дробной значащей части числа, в которой самый млад- ший бит стоит справа: 1 бит знака (s) 8 битов порядка (e) 23 бита дробной значащей части (f) Всего получается 32 бита, или 4 байта. Поскольку знача- щая часть нормализованного двоичного числа с плавающей точкой всегда начинается с 1, соответствующий бит в запись числа в формате IEEE не включается. Хранится только 23-би- товая дробная часть, хотя это не мешает говорить, что число хранится с точностью 24 бита. 8-битовый порядок может принимать значения от 0 до 255. Он является смещенным (biased), т. е. для нахождения истин- ного значения порядка — с учетом знака — вы должны вы- честь из e число, называемое смещением (bias). Для чисел про- стой точности с плавающей точкой оно равно 127. Порядки 0 и 255 имеют особый смысл, о котором чуть поз- же. Если значение порядка заключено в пределах от 1 до 254, число, представленное конкретными значениями s (бита зна- ка), e (порядка) и f (дробная часть), равно: (–1)s � 1.f � 2е–127 Знак числа вычисляется по формуле (–1)s. Если s равно 0, чис- ло положительно (так как любое число в степени 0 равно +1), 432 Глава двадцать третья если s равно 1, число отрицательно (так как –1 в степени 1 рав- но –1). Следующая часть выражения — 1.f — символизирует 23- битовую дробную часть числа, стоящую после 1 и двоичного разделителя (в стандарте IEEE — точка). Все это умножается на 2 в степени e – 127. Кроме того, в стандарте IEEE предусмотрено несколько специальных случаев. • Если е равно 0, а f — 0, число равно 0. Обычно 0 представ- ляется нулевыми значениями всех 32 битов. Если бит зна- ка равен 1, число называется отрицательным 0. Он симво- лизирует очень маленькое число, для записи которого цифр и степени в простой точности недостаточно, но которое, однако, меньше 0 (не равно ему). • При е = 255 и f  = 0 число, в зависимости от значения s сим- волизирует положительную или отрицательную бесконеч- ности. • Если е = 255, а f  не равно 0, значение считается недопусти- мым числом и называется NaN ( Not a Number, не число). Величина NaN часто возникает в результате некорректно- го математического вычисления. Самое маленькое нормализованное положительное или отрицательное двоичное число простой точности, которое можно представить в формате с плавающей точкой, равно: 1,00000000000000000000000два  � 2–126 После запятой стоят 23 двоичных нуля. Самое большое нор- мализованное положительное или отрицательное двоичное число простой точности, которое можно представить в фор- мате с плавающей точкой, равно: 1,11111111111111111111111два  � 2127 В десятичном выражении эти числа приблизительно равны 1,175494351 � 10-38 и 3,402823466 � 1038. Это и есть диапазон чисел простой точности, которые можно представить в фор- мате с плавающей точкой. Вы, возможно, еще не забыли, что 10 двоичных цифр при- близительно эквивалентны 3 десятичным. Я хочу сказать, что двоичное число, состоящее из 10 единиц (3FFh в шестнадцате- 433 Фиксированная точка, плавающая точка ричной системе и 1023 в десятичной), примерно равно деся- тичному числу, состоящему из трех девяток. Иначе говоря: 210 � 103 То есть 24-битовое двоичное число простой точности в фор- мате с плавающей точкой приблизительно эквивалентно 7- значному десятичному числу. Поэтому говорят, что число простой точности с плавающей точкой имеет точность до 24 двоичных или до 7 десятичных знаков. Что это значит? Точность числа с фиксированной точкой легко определить по его внешнему виду. В денежной сумме, например, число с фиксированной точкой и двумя знаками после разделителя определяется с точностью до цента. В отношении чисел с пла- вающей точкой ничего подобного сказать нельзя. В зависимо- сти от порядка число с плавающей точкой может быть точ- ным до долей пенса или до нескольких тысяч долларов. Правильнее сказать, что число простой точности с плава- ющей точкой точно до 1 части из 224 или приблизительно до 6 частей из ста миллионов. В первую очередь это значит, что если вы запишете в виде чисел простой точности с плаваю- щей точкой величины 16 777 216 и 16 777 217, их представле- ния будут абсолютно одинаковы! Более того, тем же значени- ем будет представлено любое число, заключенное между ними, например, 16 777 216,5. Все три десятичных числа будут хра- ниться в памяти как 32-битовое значение 4В800000h. Если его разделить на биты знака, порядка и значащей части, оно будет выглядеть так: 0 10010111 00000000000000000000000 или: 1,00000000000000000000000два � 224 За ним в сторону увеличения следует число: 1,00000000000000000000001два � 224 соответствующее десятичному 16 777 218. Чаще всего хране- ние двух близких десятичных чисел в виде одного и того же двоичного особых трудностей не вызывает, но и забывать о такой возможности не следует. Допустим, вы написали для банка программу, в которой для хранения денежных сумм в долларах и центах использу- 434 Глава двадцать третья ются числа простой точности с плавающей точкой. Узнав, что с точки зрения программы 262 144,00 долларов не отличаются от 262 144,01 долларов, вы возможно, испытаете глубокое по- трясение. Действительно, оба числа представляются в компь- ютере так: 1.00000000000000000000000два � 218 Вот почему при работе с долларами и центами формат с фик- сированной точкой более предпочтителен. Разрешив точке плавать, вы рискуете нарваться и на другие мелкие, но весьма досадные неприятности. Например, иногда в программе вме- сто 3,5 будет получаться 3,4999999. При работе с плавающей точкой такие фокусы случаются довольно часто, и поделать с этим ничего нельзя. Если вас не устраивает простая точность, но применение плавающей точки неизбежно, воспользуйтесь двойной точно- стью. Числа в этом формате занимают по 8 байт памяти, рас- пределенных так: 1 бит знака (s) 11 бит порядка (e) 52 бита дробной значащей части (f) Смещение порядка равно 1023 или 3FFh, поэтому число двой- ной точности записывается так: (–1)s � 1.f  � 2е–1023 Для значений 0, бесконечности и NaN применяются те же правила, что и в простой точности. Самое маленькое положительное или отрицательное чис- ло двойной точности с плавающей точкой равно: 1.0000000000000000000000000000000000000000000000000000два � 2�1022 После двоичной точки стоит 52 нуля. Самое большое число равно: 1.1111111111111111111111111111111111111111111111111111два � 21023 Соответствующий диапазон десятичных чисел — приблизи- тельно от 2,2250738585072014 ххх 10–308 до 1,797693138623158 � 10308. 53 бита значащей части числа (с учетом неуказываемого пер- вого бита, который всегда равен 1) примерно эквивалентны 16 435 Фиксированная точка, плавающая точка десятичным цифрам. Это, конечно, намного больше, чем в простой точности, но все равно от одинакового представле- ния двух близких десятичных чисел нам никуда не деться. На- пример, в двоичном представлении число 140 737 488 355 328,00 не отличается от 140 737 488 355 328,01. Оба хранятся как 64-битовая величина 42Е0000000000000h, равная: 1.0000000000000000000000000000000000000000000000000000два � 247 Разумеется, разработка формата для хранения чисел с пла- вающей точкой в памяти компьютера — лишь небольшая часть работы по практическому использованию этих чисел в ассемблерных программах. Если бы вы создавали компьютер на необитаемом острове, то столкнулись бы с необходимос- тью написания программ для сложения, вычитания, умноже- ния и деления чисел с плавающей точкой. К счастью, их мож- но разбить на функции для сложения, вычитания, умножения и деления целых чисел, работать с которыми вы уже умеете. Например, сложение двух чисел с плавающей точкой за- ключается в сложении их значащих частей; труднее всего здесь разобраться с порядками. Рассмотрим пример: (1,1101 � 25) + (1,0010 � 22) Здесь нужно сложить 11101 и 10010, но не просто, а с прира- щением разрядности первого числа на величину, определяе- мую по разности порядков. Первый порядок на 3 больше вто- рого, поэтому добавляем к первому числу 3 нуля и складыва- ем 11101000 и 10010. Итоговая сумма равна 1,1111010 � 25. Иног- да порядки различаются столь существенно, что сумма совер- шенно не отличается от большего из слагаемых. Так произой- дет, например, при сложении расстояния от Земли до Солнца с радиусом атома водорода. Умножение чисел с плавающей точкой равносильно умно- жению их значащих частей и сложению порядков. Обе опера- ции не выходят за рамки целочисленной арифметики. Следующий уровень сложности в вычислениях с плаваю- щей точкой — вычисление корней, логарифмов, показатель- ных и тригонометрических функций. Но все эти функции так- же можно разложить на четыре основные операции: сложе- ние, вычитание, умножение и деление. Так, синус вычисляет- ся с помощью ряда: 436 Глава двадцать третья sin(x) = x � x3 3! + x5 5! � x7 7! +... Здесь аргумент х измеряется не в градусах, а в радианах (360° равно 2� радиан), а восклицательным знаком обозначен фак- ториал числа, равный произведению всех целых чисел от еди- ницы и до этого числа. Например, 5! = 1 � 2 � 3 � 4 � 5. Таким образом, при вычислении числителя и знаменателя в каждом члене ряда мы используем умножение, делим числитель на знаменатель, а затем складываем и вычитаем результаты. Про- сто? Да не совсем. Самая неприятная часть этого выражения — многоточие в конце. Оно означает, что теоретически вы- числение продолжается бесконечно. Но на практике вычис- лять это выражение для любого x не нужно. Синус — перио- дическая функция, поэтому его достаточно рассчитать для x в пределах от 0 до �/2, а затем  по простым формулам получить значения синуса для произвольного x. Чтобы рассчитать sin x при x в пределах от 0 до �/2 с точностью до 53 бит, достаточно учесть в этом разложении с десяток слагаемых. «Что же получается? — скажете вы. — Компьютеры при- званы облегчать людям жизнь, а мы вопреки этому постоян- но сталкиваемся с необходимостью написания все новых и новых программ!» Но в этом-то и прелесть программирова- ния.  Как только кто-то написал программы для вычислений с плавающей точкой, их могут использовать и другие. А с напи- санием таких программ заминки не возникает. Расчеты с пла- вающей точкой жизненно важны в научных и инженерных программах, поэтому их реализации всегда придается самое большое значение. В начале компьютерной эпохи написание программ для вычислений с плавающей точкой всегда было одной из первых задач, стоявших перед создателями новой модели компьютера. На самом деле имеет смысл создать для работы с плаваю- щей точкой специальные машинные команды! Если выпол- нять операции с плавающей точкой на аппаратном уровне, как умножение и деление в 16-битовых микропроцессорах, слож- ные математические расчеты будут проводиться гораздо быс- трее. Конечно, сказать легче, чем сделать. Но вычисления с плавающей точкой настолько важны, что специальное обору- дование для них создано уже давно. 437 Фиксированная точка, плавающая точка В 1954 г. выпущен IBM 704 — первый коммерческий ком- пьютер, имевший аппаратное обеспечение для работы с пла- вающей точкой. Все числа в нем хранились как 36-битовые величины: 27 битов под значащую часть, 8 битов для порядка и 1 бит для знака. В процессоре имелись схемы для сложения, вычитания, умножения и деления чисел с плавающей точкой. Другие функции реализовывались программно. В настольных компьютерах аппаратное обеспечение для арифметики с плавающей точкой появилось в 1980 г., когда компания Intel выпустила микросхему 8087. В наши дни мик- росхемы этого типа называют математическими сопроцессо- рами. Название сопроцессор (coprocessor) означает, что приме- нять эту микросхему отдельно от процессора нельзя. Сопро- цессор 8087 работал с первыми 16-разрядными микропроцес- сорами Intel 8086 и 8088. Сопроцессор 8087 — микросхема с 40 выводами, в кото- рой используются многие из сигналов микросхем 8086 и 8088. Посредством этих сигналов процессор и сопроцессор взаимо- действуют друг с другом. Когда процессор считывает специ- альную команду (ESC), управление берет на себя сопроцессор, выполняющий следующий за этой командой машинный код — одну из 68 команд для вычисления логарифма, тригономет- рических функций, возведения в степень и пр. Типы данных основаны на стандарте IEEE. В свое время сопроцессор 8087 считался самой сложной интегральной схемой. Можете считать сопроцессор маленьким самостоятельным компьютером. Получив команду на выполнение определенно- го расчета с плавающей точкой (например, команду FSQRT для вычисления квадратного корня), сопроцессор запускает набор собственных команд, записанных в ПЗУ. Внутренние команды сопроцессора называются микрокодом. Обычно выполнение микрокода сопряжено с вычислениями в цикле, поэтому резуль- тат готов не сразу. И все же сопроцессор позволяет ускорить вычисления по крайней мере в 10 раз по сравнению с программ- ной реализацией операций с плавающей точкой. На материнской плате первого IBM PC рядом с микросхе- мой 8088 имелось 40-контактное гнездо для сопроцессора 8087. К сожалению, при продаже компьютера оно пустовало. Пользователи, нуждавшиеся в высокой скорости вычислений, покупали и устанавливали сопроцессор 8087 самостоятельно. 438 Глава двадцать третья Но даже после его установки не все приложения начинали ра- ботать быстрее. Текстовому редактору, например, арифмети- ка с плавающей точкой почти ни к чему. Но даже программы с обильными математическими расчетами, например, элект- ронные таблицы, зачастую благотворного влияния сопроцес- сора на себе не испытывали. Мы уже убедились, что для сопроцессора программист дол- жен вставлять в программу специальные машинные коды. Но сопроцессор не был стандартным оборудованием, и потому многие программисты себя этим не утруждали. Им ведь все равно приходилось писать подпрограммы для работы с пла- вающей точкой для тех пользователей, у которых не было со- процессора, поэтому микросхема 8087 не избавляла их от ра- боты, а, напротив, усложняла ее. Позже программисты научи- лись писать приложения так, что, если сопроцессор был на компьютере, он использовался, а если нет — его работа моде- лировалась программно. Позже Intel выпустила сопроцессор 287 для процессора 286 и сопроцессор 387 для процессора 386. В 1989 г. сопроцессор наконец перестал был отдельным элементом оборудования, устанавливаемым по желанию, — в процессор Intel 486DX он был встроен! Правда, в 1991 г. Intel снова вернулась к старой схеме, выпустив дешевый процессор 486SX без встроенного сопроцессора и сопроцессор 487SX к нему. Однако в 1993 г. с появлением процессоров серии Pentium сопроцессор снова стал частью процессора, теперь, вероятно, уже навсегда. Ком- пания Motorola объединила сопроцессор с микропроцессором 68040 в 1990 г. До этого сопроцессоры 68881 и 68882 для мик- ропроцессоров семейства 68000 продавались отдельно. Встро- енное оборудование для работы с плавающей точкой имеется и в процессорах PowerPC. Аппаратное обеспечение для арифметики с плавающей точкой — хороший подарок для человека, уставшего програм- мировать на языке ассемблера. Но его значение меркнет в срав- нении с другим усовершенствованием, начало которому было положено в 1950-е годы. Наша следующая остановка — языки программирования. Глава 24 Языки высокие и низкие Программировать в машинных кодах — все равно что есть зубочисткой. Подхватывать ею кусочки еды столь сложно, а сами они столь малы, что обед растягивается в вечность. Бай- тами машинных кодов обозначены настолько простые вычис- лительные задачи — загрузка числа из памяти в процессор, сложение его с другим числом, запись результата обратно в память, — что практически невозможно представить себе, как из таких крохотных кирпичиков складывается целое здание. Еще в начале главы 22 мы вводили двоичные данные в па- мять переключателями, но с тех пор нам удалось здорово про- двинуться вперед. В той же главе я рассказал, как с помощью простых программ задействовать клавиатуру для ввода дан- ных (например, машинных кодов) и просматривать их на эк- ране монитора. После этого работать на нашем воображаемом компьютере стало удобнее, но все возможные усовершенство- вания нами еще не исчерпаны. Как вы помните, байтам машинных кодов сопоставлены короткие мнемонические коды MOV, ADD, CALL, HLT, благо- даря которым программа по крайней мере отдаленно напоми- нает набор указаний на обычном английском языке. Часто за мнемокодом следует аргумент, уточняющий действие коман- ды. Например, в системе команд процессора 8080 команда с кодом 46h помещает в регистр В байт из ячейки памяти, адрес которой записан в паре регистров HL. С помощью мнемокода это действие выражается нагляднее: 440 Глава двадцать четвертая MOV B,[HL] Конечно, составлять программу на языке ассемблера гораздо проще, чем писать ее в машинных кодах. Увы, процессор ас- семблера не понимает. Поэтому программу в мнемокодах при- ходится писать на бумаге. Когда вам кажется, что она готова к запуску, вы вручную преобразуете операторы ассемблера в двоичные машинные коды и вводите их в память. Но почему не автоматизировать эту задачу? Для этого впол- не достаточно компьютера с процессором 8080, работающего под управлением ОС CP/M. Для начала создайте текстовый файл PROGRAM1.ASM и введите в него программу на ассемблере (тип ASM как раз и означает, что в файле содержится ассемблерная программа). Для создания и редактирования файла можно применить тек- стовый редактор из комплекта CP/M — программу ED.COM. Слишком сложную задачу перед собой ставить не будем: ORG 0100h LXI DE,Text MVI C,9 CALL 5 RET Text: DB 'Hello!$' END Почти все операторы этой программы нам знакомы. Команда ORG, с которой мы раньше не встречались, не входит в систе- му команд процессора 8080. Она просто указывает, что следу- ющая команда должна располагаться по адресу 0100h. Как вы помните, начиная именно с этого адреса, CP/M загружает про- граммы в память. Следующая команда — LXI — загружает 16-битовое значе- ние в пару регистров DE. Здесь адрес значения указан меткой Text, расположенной в конце программы перед оператором DB (Data Byte, байт данных). Аргументами оператора DB могут быть несколько байтовых значений, разделенных запятыми, или (как у нас) текстовая строка, заключенная в апострофы. Команда MVI помещает в регистр С число 9. Это номер функции CP/M для отображения на экране текстовой строки, начинающейся по адресу, записанному в регистрах DE, и за- 441 Языки высокие и низкие канчивающейся значком доллара $ (немного странно, что окон- чание строки обозначается именно значком $, но так уж уст- роена CP/M). Функцию вызывает оператор CALL 5. Наконец, команда RET останавливает выполнение программы и пере- дает управление системе (остановить программу можно и ина- че). Оператор END отмечает конец файла с программой на ас- семблере. Итак, у нас есть текстовый файл, содержащий 7 строк. Те- перь его нужно ассемблировать, т. е. преобразовать операторы ассемблера в машинные коды. До сих пор мы делали это вруч- ную. Но в CP/M входит специальная программа ASM.COM, ко- торая выполнит это преобразование автоматически. Достаточ- но ввести после приглашения системы команду: ASM PROGRAM1.ASM Программа ASM находит на диске файл PROGRAM1.ASM и создает файл PROGRAM1.COM, в который помещает машин- ные коды, соответствующие операторам ассемблера (честно говоря, я пропустил один этап процесса ассемблирования, но для понимания сути происходящего он не важен). После это- го программу PROGRAM1 можно запускать из командной строки CP/M. Она отобразит на экране строку «Hello!» и за- кончит работу. Файл PROGRAM1.COM содержит следующие 16 байтов: 11 09 01 0E 09 CD 05 00 C9 48 65 6C 6C 6F 21 24 Первые 3 байта — это команда LXI, следующие 2 — команда MVI. 3 байта занимает команда CALL 5, и 1 — команда RET. Последние 7 байт — это ASCII-коды букв Hello, восклицатель- ного знака и знака $. Работа программы-ассемблера, например, ASM.COM, сво- дится к чтению файла с программой на языке ассемблера (про- граммисты часто называют его файлом с исходным кодом) и созданию исполняемого (executable) файла, содержащего ма- шинные коды. По сути своей, ассемблеры — очень простые программы, поскольку в основе их работы лежит взаимно од- нозначное соответствие между мнемоническими и машинны- ми кодами. Ассемблер считывает из файла строку, разделяет ее на мнемокод команды и аргументы, а затем находит в спис- ке машинный код, соответствующий такому сочетанию коман- 442 Глава двадцать четвертая ды и аргументов (в списке должны быть все возможные соче- тания). В результате сравнения появляется последовательность машинных кодов, в точности соответствующая последователь- ности команд. Заметьте: вместо метки Text в код подставлен ее адрес 0109h. Именно там окажется текстовая строка после того, как про- грамма будет загружена в память, начиная с адреса 0100h. Обычно программисту, пишущему программы на ассембле- ре, не приходится беспокоиться из-за подстановки конкрет- ных адресов — это делает ассемблер. Программисту, написавшему первую программу-ассемб- лер, конечно, пришлось переводить ее в машинные коды вруч- ную. Следующую, улучшенную версию ассемблера для того же компьютера, уже можно ассемблировать автоматически с помощью первого ассемблера. Новый ассемблер приходится разрабатывать каждый раз при появлении нового процессора. Но заниматься этим можно на компьютере со старым процес- сором и старым ассемблером. Конечно, программы-ассемблеры избавляют программи- ста от самой неблагодарной части работы — ручного перево- да операторов в машинные коды. И все же язык ассемблера отягощен двумя крупными недостатками. О первом из них вы, вероятно, уже догадались: программирование на языке ассем- блера — задача весьма кропотливая. Непосредственно управ- ляя действием микропроцессора, приходится беспокоиться о бесчисленных мелочах. Второй недостаток в том, что программа на ассемблере не является переносимой (portable). Например, программу, напи- санную на языке ассемблера для процессора Intel 8080, нельзя запустить на компьютере с процессором Motorola 6800. Пред- варительно ее придется переписать на ассемблере для этого процессора. Это, конечно, будет несложно, поскольку основ- ные организационные и алгоритмические проблемы вы реши- ли, создавая исходную программу, но работы все же хватит. В главе 23 я писал о том, что в современные микропроцес- соры встроены команды для работы с числами с плавающей точкой. Они, конечно, облегчают программисту жизнь, но не особо. Хотелось бы совершенно забыть о командах процессо- ра для выполнения элементарных арифметических операций, 443 Языки высокие и низкие используя для математических выражений проверенную ве- ками алгебраическую форму записи, например: A � Sin(2 � PI + B) / C где A, B и C — произвольные числа, а PI равно 3,14159. Так в чем проблема? Если это выражение записано в тек- стовом файле, мы вольны создать программу на языке ассем- блера, которая будет читать строки из этого файла и преобра- зовывать их в машинные коды. Если бы вам нужно было вычислить это выражение лишь однажды, вы обошлись бы калькулятором. На создание про- граммы вас, вероятно, подвигла необходимость вычислять его многократно, с различными значениями коэффициентов A, B и C. Значит, кроме этого выражения вам понадобятся и дру- гие, для вычисления коэффициентов. Все это задачи для языка программирования высокого уров- ня (high-level). Язык ассемблера считается языком низкого уров- ня (low-level), поскольку он напрямую взаимодействует с обо- рудованием компьютера. На практике языками высокого уров- ня называют любые языки, кроме ассемблера, но это не значит, что все они равнозначны. Уровень одних языков выше уровня других языков. А знаете, что такое язык программирования высочайшего уровня? Это когда президент компании набирает на клавиатуре или, еще лучше, положив ноги на стол, диктует секретарше: «Рассчитать прибыли и убытки за этот год, напи- сать годовой отчет, распечатать 1 000 экземпляров и разослать акционерам»! Конечно, настоящие языки программирования, даже высокого уровня, очень далеки от этого идеала. Человеческие языки формируются в течение сотен и ты- сяч лет взаимопроникновения, случайных изменений и заим- ствований. Даже в основу искусственных языков вроде эспе- ранто положены реальные языки со всей их многовековой ис- торией. Другое дело — языки программирования. Их созда- ние всегда было продуманным и целенаправленным. Созда- тель языка программирования воплощал в нем свое представ- ление об общении человека и машины. В 1993 г. было подсчи- тано, что с 1950-х годов разработано более 1 000 языков про- граммирования. Конечно, изобретение языка (т. е. разработка синтаксиса — правил построения выражений) — только полдела. Нужно 444 Глава двадцать четвертая также написать компилятор (compiler), т. е.  программу, пре- образующую операторы языка в машинные коды. Подобно ассемблеру, компилятор символ за символом считывает файл с исходной программой, разделяя его на слова, операторы и числа. Написать компилятор, разумеется, гораздо сложнее, чем ассемблер. Оператор ассемблера переводится в единственный машинный код, тогда как оператор языка высокого уровня, как правило, превращается во множество машинных команд. Раз- работке компиляторов посвящена обширная литература. У языков программирования высокого уровня есть свои плюсы и минусы. Главное преимущество языка высокого уров- ня в том, что он обычно намного превосходит ассемблер в лег- кости изучения и использования. Программа на языке высо- кого уровня короче и понятнее ассемблерной. Языки высоко- го уровня в основном переносимы, т. е. одинаково хорошо работают на компьютерах с разными процессорами. Это зна- чит, что, создавая программу, не нужно вникать в тонкости архитектуры компьютера, на котором она будет работать. Ко- нечно, при этом для каждого процессора нужен собственный компилятор. Созданный им исполняемый файл также будет годиться только для этого процессора. С другой стороны, программа на ассемблере практически всегда эффективнее аналогичной программы на языке высо- кого уровня. Это значит, что исполняемый файл, созданный компилятором языка высокого уровня, занимает больше мес- та и работает медленнее, чем функционально идентичная про- грамма на ассемблере. Нужно отметить, что в последние годы это правило уже не выполняется с прежней неизменностью. Микропроцессоры стали более сложными, а создатели компи- ляторов достигли больших успехов в оптимизации генериру- емых кодов. Язык высокого уровня облегчает использование процессо- ра, но не делает его мощнее. Любые действия, которые процес- сор в состоянии выполнить, могут быть запрограммированы на языке ассемблера. Это значит, что программа на языке высо- кого уровня не наделяет процессор никакими новыми возмож- ностями. Более того, чтобы сделать программу переносимой, от некоторых специфических возможностей данного процес- сора в ней приходится отказываться. 445 Языки высокие и низкие Приведу пример. Во многих процессорах есть команды для выполнения побитового сдвига содержимого аккумулятора влево или вправо. Аналогичных команд практически ни в од- ном языке высокого уровня нет. Чтобы осуществить эту опе- рацию, вам придется заменить ее делением или умножением на 2 (впрочем, во многих современных компиляторах для умно- жения или деления на степень двойки используются именно команды побитового сдвига). Нет во многих языках высокого уровня и команд для выполнения с битами булевых операций. Большинство прикладных программ для первых домаш- них компьютеров писалось на ассемблере. В наши дни его прак- тически не используют, разве что для решения каких-либо специфических задач. Чем изощреннее архитектура процес- соров, тем сложнее писать для них ассемблерные программы. Одновременно все совершеннее становятся и компиляторы. Немаловажную роль в снижении популярности ассемблера сыграло и увеличение объема доступной оперативной и дис- ковой памяти. Программистам более не нужно создавать коды, которые обходились бы минимальным количеством памяти и целиком умещались на одной дискете. Проектировщики многих первых компьютеров пытались формулировать задания для них с помощью алгебраической записи, но создать действительно работающий компилятор удалось только в 1952 г. Его написала для компьютера UNIVAC Грейс Мюррей Хоппер (1906–1992), работавшая тогда в ком- пании Remington Rand. Грейс Хоппер связала свою жизнь с вычислительной техникой еще в 1944 г., но даже разменяв де- вятый десяток, продолжала работать в компьютерной индуст- рии, отвечая за связи с общественностью в корпорации Digital Equipment. Старейшим языком высокого уровня, не утратившим сво- ей актуальности и сегодня, является ФОРТРАН (FORTRAN), хотя от исходной версии в нем мало что сохранилось. Кстати, названия многих языков программирования принято писать прописными буквами, так как они являются сокращениями. Например, название ФОРТРАНа составлено из словосочета- ния «FORmula TRANslation» (трансляция формул). ФОРТРАН разработан в IBM в середине 1950-х для компьютеров серии 704 и долгое время интенсивно использовался в научном и инженерном программировании. Он особенно удобен для ма- 446 Глава двадцать четвертая тематических расчетов благодаря обширнейшей поддержке операций с плавающей точкой, включая возможность работы с комплексными числами. У каждого языка масса сторонников и противников. Спо- ры их зачастую протекают весьма эмоционально. Стараясь сохранить нейтралитет, я решил использовать в качестве при- мера язык, который сейчас уже почти никто не применяет, — АЛГОЛ (ALGOL). Его имя — тоже сокращение, составленное из «ALGOrithmic Language» (алгоритмический язык). Иссле- довать природу языков высокого уровня на примере АЛГОЛа удобно еще и потому, что он во многих отношениях — пря- мой предок многих распространенных языков, появившихся за последние 40 лет. Даже в наши дни иногда приходится слы- шать о «языках программирования типа АЛГОЛа». Первую версию — АЛГОЛ 58 — разработал в 1957–58 гг. международный комитет программистов. Два года спустя был выпущен усовершенствованный вариант — АЛГОЛ 60. В кон- це концов дело дошло и до АЛГОЛа 68, но в этой главе я расска- жу о версии языка, описанной в документе «Переработанное описание алгоритмического языка АЛГОЛ 60», работа над ко- торым была закончена в 1962, а выход в свет состоялся в 1963 г. Давайте напишем на АЛГОЛе небольшую программу. Бу- дем считать, что у нас имеется компилятор этого языка ALGOL.COM, работающий в CP/M или, скажем, MS-DOS. За- пишем эту программу в файл FIRST.ALG (обратите внимание на тип файла). Программа на АЛГОЛе заключается между ключевыми сло- вами (keywords) begin и end. Для начала выведем на экран одну строку текста: begin print ('This is my fist ALGOL program!'); ende Для запуска компилятора нужно набрать в командной строке: ALGOL FIRST.ALG В ответ компилятор сообщит о нераспознанном ключевом сло- ве в третьей строке программы: Line 3: Unrecognized keyword 'ende'. 447 Языки высокие и низкие В вопросах правописания компилятор даст фору самому при- дирчивому учителю английского языка. Набирая программу, я неправильно ввел ключевое слово end. Компилятор не за- медлил сообщить мне о синтаксической ошибке. Там, где сто- ит слово ende, компилятор ожидал увидеть известное ему клю- чевое слово АЛГОЛа. Исправляем ошибку и запускаем компилятор снова. На диске появляется исполняемый файл — FIRST.COM в CP/M или FIRST.EXE в MS-DOS. Вообще-то чаще для преобразова- ния файла с исходной программой в исполняемый файл нуж- но выполнить не одно, а два действия, но я для простоты об этом умолчу. Так или иначе, для запуска созданного исполня- емого файла в командную строку нужно ввести его имя: FIRST На экране появятся слова: This is my fist ALGOL program! Знатоки английского укоризненно качают головами. В этой фразе тоже есть ошибка: в слове «first» (первый) пропущена буква r. Однако на нее компилятор никак не прореагировал, да это и понятно. В задачу программы входит вывод на экран заданной текстовой строки, и компилятор, конечно, не анали- зирует ее содержимое. Вы, наверное, уже догадались, что оператор print осуще- ствляет вывод на экран некоей информации, в данном случае — текстовой строки. В этом смысле показанная выше програм- ма на языке АЛГОЛ эквивалентна программе на языке ассемб- лера, приведенной в начале главы. Оператор print в офици- альную спецификацию языка АЛГОЛ не входит, но мы будем считать, что у нашего компилятора есть соответствующая встроенная функция (built-in function). Большинство опера- торов АЛГОЛа (не считая begin и end) должны заканчиваться точкой с запятой. Вставлять отступ перед оператором print не обязательно, но вообще отступы часто используют, чтобы прояснить структуру программы. Теперь напишем программу для умножения двух чисел. В любом языке программирования имеется понятие переменной (variable). Переменная обозначается буквой или сочетанием букв, например, коротким словом. Хотя для хранения чисел 448 Глава двадцать четвертая по-прежнему используются ячейки памяти, переменные по- зволяют обращаться к ним без явного указания адреса, что делает программу понятнее. Нам понадобятся переменные a, b и c — для двух сомножителей и для произведения: begin real a, b, c; a := 535.43; b := 289.771; c := a � b; print (‘Произведение ', a, ' и ', b, ' равно ', c); end Оператор real  используется для описания переменных, т. е. для введения их имен и указания типа. В данном случае, пере- менные a, b и c предназначены для хранения вещественных чисел, т. е. чисел с плавающей точкой (для описания целых переменных в АЛГОЛе служит оператор integer). Практически во всех языках имена переменных могут включать цифры, но начинаться должны обязательно с буквы. Применение пробе- лов и специальных символов, как правило, не допускается. Во многих компиляторах ограничена и длина имени. Я в приме- рах будут использовать имена переменных, состоящие из од- ной буквы. Если наш компилятор АЛГОЛа поддерживает стандарт IEEE для хранения чисел с плавающей точкой, для любой из трех переменных понадобится 4 байта с простой точностью и 8 байт — с удвоенной. Следующие три выражения являются операторами присва- ивания (assignment). В АЛГОЛе их легко распознать по двоето- чию и знаку равенства (в других языках используется только знак равенства). В левой части оператора присваивания стоит имя переменной, в правой — выражение. Переменной при- сваивается значение, полученное в результате вычисления выражения. В первых двух операторах присваиваются конк- ретные численные значения. В третьем операторе в перемен- ную c записывается произведение переменных a и b. 449 Языки высокие и низкие В современных языках символ � не используется, так как его нет в кодировках ASCII и EBCDIC. Вместо него применя- ется символ *. Деление в АЛГОЛе обозначается косой чертой (/),  �  обозначает деление нацело, а символ �, также не входя- щий в кодировку ASCII, — возведение в степень. Для отображения переменных и констант служит опера- тор print. Отдельные элементы списка вывода разделяются за- пятыми. Отображение на экране текста — не великая заслуга, но если вы захотите вывести на экран значение числовой пе- ременной с плавающей точкой, оно будет автоматически пре- образовано в ASCII: Произведение 535.43 и 289.771 равно 155152.08653 Выведя эту строку, программа завершает работу и передает управление ОС. Чтобы найти произведение двух других чисел, вам придется отредактировать программу, перекомпилировать ее и запус- тить вновь. Чтобы не возиться с перекомпиляцией, вызовите встроенную функцию read: begin real a, b, c; print ('Введите первое число: '); read (a); print ('Введите второе число: '); read (b); c := a � b; print ('Произведение ', a, ' и ', b, ' равно ', c); end Оператор read считывает введенные с клавиатуры ASCII-сим- волы и преобразует их в числа с плавающей точкой. Очень важной структурным понятием в языках высокого уровня является цикл (loop), позволяющий многократно вы- полнить один и тот же фрагмент кода. Допустим, вы хотите написать программу, вычисляющую кубы чисел 3, 5, 7 и 9. Выглядеть она будет примерно так: 450 Глава двадцать четвертая begin real a, b; for a := 3, 5, 7, 9 do begin b := a � a � a; print (‘Куб числа ', a, ' равен ', b); end end В операторе for переменной a присваивается значение 3, а за- тем выполняется оператор, следующий за ключевым словом do. Если таких операторов несколько (как у нас), их нужно раз- местить между ключевыми словами begin и end. Операторы между двумя этими словами называются блоком (block). Те же операторы выполняются для значений переменной a 5, 7 и 9. У оператора for есть и другой вариант. Следующая програм- ма вычисляет кубы всех нечетных чисел от 3 до 99: begin real a, b; for a := 3 step 2 until 99 do begin b := a � a � a; print ('Куб числа ', a, ' равен ', b); end end В операторе for переменной a присваивается значение 3, а затем выполняется блок операторов, идущий за ключевым словом do. При следующем выполнении цикла значение переменной a уве- личивается на значение, указанное после ключевого слова step, т. е. на 2. Блок операторов выполняется с переменной a, равной 5. Затем значение переменной a увеличится еще на 2. Выполне- ние цикла завершится, когда значение a станет больше 99. Синтаксические правила языков программирования обыч- но не допускают никаких исключений. В АЛГОЛе 60, например, за ключевым словом for может идти только имя переменной. Другой важный элемент языка программирования — услов- ные структуры, позволяющие организовать выполнение опе- 451 Языки высокие и низкие ратора или блока операторов только при соблюдении опреде- ленного условия. В приведенном ниже примере используется встроенная функция АЛГОЛа sqrt, вычисляющая квадратный корень. С отрицательными числами она не работает, что учи- тывается в программе. begin real a, b; print ('Введите число: '); read (a); if a < 0 then print('Извините, введено отрицательное число.'); else begin b := sqrt(a); print (‘Квадратный корень из ', a, ' равен ', b); end end Символ < соответствует математическому знаку «меньше». Если пользователь ввел отрицательное число, выполняется первый оператор print в структуре if. Если введенное число больше 0 или равно ему, выполняется блок, содержащий вто- рой оператор print. До сих пор все переменные в этой главе использовались для хранения одиночных значений. Но в одной переменной их мож- но хранить и несколько. Такая переменная называется массивом (array). В программе на АЛГОЛе массив описывается так: real array a[1:100]; Здесь переменную a предполагается использовать для хране- ния 100 чисел с плавающей точкой, называемых элементами массива. Для обращения к первому элементу массива исполь- зуется обозначение a[1], ко второму — a[2], к последнему — a[100]. Число в скобках называется индексом (index). В следующей программе вычисляются квадратные корни всех чисел от 1 до 100. Результаты вычислений сохраняются в массиве, а затем выводятся на печать. 452 Глава двадцать четвертая begin real array a[1:100]; integer i; for i := 1 step 1 until 100 do a[i] := sqrt(i); for i := 1 step 1 until 100 do print ('Квадратный корень из ', i, ' равен ', a[i]); end Помимо массива, в программе описана целая переменная i. В первом цикле каждому элементу массива присваивается значение квадратного корня из его индекса. Во втором цикле значения элементов массива выводятся на печать. В дополнение к типам real и integer в АЛГОЛе имеется так- же тип Boolean. Переменные этого типа могут принимать лишь два значения: true и false. Массив булевых переменных помо- жет нам написать последнюю в этой главе программу, кото- рая составляет список простых чисел с помощью алгоритма, известного как решето Эратосфена. Эратосфен (около 276–196 до н. э.) был библиотекарем в знаменитой Александрийской библиотеке и более всего прославился вычислением длины окружности Земли. Простыми называют целые числа, которые без остатка де- лятся только на себя и на 1. Самое маленькое простое число — 2. Оно же — единственное четное простое число. Далее идут 3, 5, 7, 11, 13, 17 и т. д. В методе Эратосфена рассматривается ряд целых чисел, начинающийся с двойки. Сначала из списка вычеркиваются все числа, кратные наименьшему простому числу (2), т. е. все четные числа, кроме самой двойки. Следующее по порядку простое число — 3. Вычеркиваем из списка все числа, кратные ему. За тройкой идет 4, но это число уже вычеркнуто, так как оно четно. 5 — опять простое число, и мы вычеркиваем из спис- ка все числа, которые без остатка делятся на 5. По мере того как мы будем продвигаться вперед, невычеркнутыми будут ос- таваться только простые числа. 453 Языки высокие и низкие В программе на АЛГОЛе для определения всех простых чисел, меньших 10 000, используется булев массив, индекс ко- торого принимает значения от 2 до 10 000. begin Boolean array a[2:10000]; integer i, j; for i := 2 step 1 until 10000 do a[i] := true; for i := 2 step 1 until 100 do if a[i] then for j := 2 step 1 until 10000  �  i do a[j  �  j] := false; for i := 2 step 1 until 10000 do if a[i] then print (i); end В первом цикле всем элементам булева массива присваивает- ся значение true, т. е. изначально программа полагает, что про- стыми являются все числа. Во втором цикле переменная i про- бегает значения от 2 до 100 (квадратный корень из 10 000). Если значение i — простое число (это значит, что a[i] равно true), во вложенном цикле всем элементам массива с номерами, крат- ными i, присваиваются значения false (эти числа простыми не являются). В последнем цикле на печать выводятся номера всех элементов массива, равных true, т. е. все простые числа. Иногда приходится слышать споры о том, является про- граммирование наукой или искусством. С одной стороны, вы вспоминаете о приятеле, получившем степень магистра ком- пьютерных наук, с другой стороны, на полке у вас стоит зна- менитая книга Дональда Кнута (Donald Knuth) «Искусство программирования». Физик Ричард Фейнман писал так: «Я бы сказал, что программирование сродни машиностроению — всего-то нужно заставить что-то сделать что-то». Попросите 100 человек написать программу для печати простых чисел, и вы получите 100 разных решений. Даже те, 454 Глава двадцать четвертая что воспользуются для решения решетом Эратосфена, напи- шут программу иначе, чем я. Если бы программирование было наукой, вряд ли у одной задачи было бы так много правиль- ных решений, а неверные решения были бы более очевидны. Зачастую программирование связано с творческими озарени- ями и интуитивными решениями, и это сближает его с искус- ством. И все-таки процесс проектирования и создания про- граммы не отличается существенно, скажем, от строительства моста. Первыми программистами были в основном ученые и ин- женеры, которые умели формулировать свои задачи на язы- ке математики, положенном в основу ФОРТРАНа и АЛГОЛа. Однако на протяжении всей истории языков программирова- ния неоднократно предпринимались попытки разработать язык, который могли бы использовать и люди, не столь близ- ко знакомые с математикой. Одним из первых языков, специально предназначенных для бизнеса, был КОБОЛ (COBOL), созданный в конце 1950-х ко- митетом из представителей промышленности и Министерства обороны США. КОБОЛ широко применяется и по сей день. Его название расшифровывается как «COmmon Business Oriented Language» (язык, ориентированный на общие коммер- ческие задачи). Одно из основных требований, предъявляв- шихся к КОБОЛу, заключалось в том, чтобы менеджеры, сами не занимавшиеся программированием, могли хотя бы читать программы и убеждаться, что они делают именно то, что дол- жны делать (чего на практике, конечно, не бывает). В КОБОЛе имеются обширные возможности по чтению записей (records) и созданию отчетов (reports). Записью в про- граммировании называется собрание взаимосвязанных сведе- ний. Например, страховая компания может вести базу данных с информацией о проданных полисах. Отдельные элементы этой базы и есть записи, в которых хранятся имя клиента, дата его рождения и другие сведения. Поначалу для хранения ин- формации в программах на КОБОЛе использовали 80-столб- цовые перфокарты IBM. Для максимальной экономии места в номере года на картах зачастую указывались только две пос- ледние цифры, что позже отчасти обусловило знаменитую «проблему 2000 года». 455 Языки высокие и низкие В середине 1960-х в IBM разработали для компьютеров System/360 язык PL/I (Programming Language I, язык програм- мирования №1). Предполагалось, что в PL/I будут объедине- ны модульная структура программ на АЛГОЛе, обширный математический аппарат ФОРТРАНа и средства КОБОЛа для работы с записями. Но уровня популярности ФОРТРАНа или КОБОЛа этот язык так и не достиг. Компиляторы ФОРТРАНа, АЛГОЛа, КОБОЛа и PL/I созда- вались и для домашних компьютеров, но ни один из них не оказал на эти машины такого влияния, как БЕЙСИК. Язык БЕЙСИК (BASIC, Beginner’s All-purpose Symbolic Instruction Code, универсальный символьный программный код для начинающих) разработан в 1964 г. Джоном Кемени (John Kemeny) и Томасом Курцем (Thomas Kurtz) из Дартмут- ского университета. Большинство студентов в Дартмуте не были ни математиками, ни инженерами, поэтому их не сто- ило заставлять возиться с перфокартами или сложными язы- ками программирования. Вместо этого студент, сидя перед терминалом, набирал простую программу прямо на экране. Если строка начиналась с номера, она считалась строкой про- граммы на БЕЙСИКе. Строка без номера считалась командой для системы. Например, командой SAVE пользователь сохра- нял программу на диске, командой LIST — выводил ее на эк- ран, а RUN — компилировал и запускал. Самое первое печат- ное руководство по БЕЙСИКу начиналось с такой программы: 10 LET X = (7 + 8) / 3 20 PRINT X 30 END В отличие от АЛГОЛа в БЕЙСИКе программист не должен был указывать тип переменной. Большинство переменных по умолчанию считались вещественными. Во многих последующих реализациях БЕЙСИКа исполь- зовались не компиляторы, а интерпретаторы (interpreters). Я уже говорил, что компилятор считывает файл с исходной про- граммой целиком, а затем создает исполняемый файл. Интер- претатор считывает программу оператор за оператором и сра- зу выполняет их. При этом исполняемый файл не создается. Разрабатывать интерпретаторы проще, чем компиляторы, но работает интерпретируемая программа, как правило, медлен- 456 Глава двадцать четвертая нее скомпилированной. На домашних компьютерах дебют БЕЙСИКа состоялся в 1975 г., когда два приятеля Билл Гейтс (Bill Gates) (род. 1955) и Пол Аллен (Paul Allen) (род. 1953) на- писали интерпретатор БЕЙСИКа для компьютера «Альтаир 8800». Этот интерпретатор стал первым продуктом основан- ной ими корпорации Microsoft. Язык программирования Паскаль (Pascal) унаследовал структуру АЛГОЛа и средства КОБОЛа для работы с запися- ми. Он разработан в конце 1960-х швейцарским профессором информатики Николасом Виртом (Niklaus Wirth). Среди про- граммистов компьютеров IBM PC Паскаль был очень популя- рен, правда, только в одной специфической реализации — Turbo Pascal фирмы Borland. Эта программа, написанная Ан- дерсом Хейлсбергом (Anders Hejlsberg) из Дании (род. 1960), поступила в продажу в 1983 г. Она представляла собой интег- рированную среду разработки (Integrated Development Environment, IDE) — текстовый редактор и компилятор были объединены в единую программу, что существенно облегчало разработку кодов. На больших компьютерах интегрированные среды использовались задолго до этого, но с Turbo Pascal на- чалось их пришествие на персональные компьютеры. На Паскале частично основан язык программирования Ада, разработанный для Минобороны США. Он назван в честь Ав- густы Ады Байрон, которую я упоминал в главе 18, рассказы- вая об Аналитической Машине Бэббиджа. И наконец — С (Си). Этот чрезвычайно популярный язык был создан в 1969–1973 гг. в основном усилиями Денниса Рит- чи (Dennis Ritchie) из Bell Telephone Laboratories. Часто спра- шивают, откуда взялось название С. Ответ прост: его предше- ственником был язык В, который в свою очередь был упро- щенным вариантом BCPL (Basic CPL), основанного на CPL (Combined Programming Language, комбинированный язык программирования). Помните, я говорил в главе 22 о переносимости ОС UNIX? В те времена ОС, как правило, писались на языке ассемблера для конкретного процессора. В 1973 г. UNIX была написана (точнее, переписана) на С, и с тех пор язык и система идут по жизни рука об руку. Одно из основных качеств программы на С — краткость. Например, для указания границ блоков используются не клю- 457 Языки высокие и низкие чевые слова, как в АЛГОЛе или Паскале, а фигурные скобки: { и }. Или другой пример. В программах часто возникает необ- ходимость прибавить к переменной некое число и записать результат в ту же переменную: i = i + 5; В С этот оператор можно сократить: i += 5; Если значение переменной нужно увеличить на 1, оператор становится еще короче: i++; На 16-разрядном или 32-разрядном микропроцессоре этот оператор превращается в единственную машинную команду. Чуть раньше я говорил, что в большинстве языков высо- кого уровня нет операций побитового сдвига или булевых опе- раций над битами. Язык С — исключение из этого правила. Кроме того, важной особенностью С является поддержка ука- зателей (pointers), т. е. фактически работы непосредственно с адресами в памяти. Из-за этой близости к командам процес- сора С иногда называют языком ассемблера высокого уровня. Все языки типа АЛГОЛа, т. е. большинство распространен- ных языков, предназначены для компьютеров с архитектурой Неймана. Вырваться из пут неймановской модели при разра- ботке языка нелегко, но еще сложнее убедить других людей им пользоваться. Один из таких «не-неймановских» языков — LISP (LIst Processing, обработка списков), созданный в конце 1950-х Джоном Маккарти (John MacCarthy) — используется при работах в области искусственного интеллекта. Не менее экзотичен, чем LISP, хотя и не похож на него, APL (A Prog- ramming Language), созданный также в конце 1950-х Кеннетом Айверсоном (Kenneth Iverson). Так или иначе, пока в программировании доминируют язы- ки типа АЛГОЛа, хотя в последние годы в них внесено несколь- ко важных усовершенствований, результатом которых стало появление объектно-ориентированных (object-oriented) язы- ков. Эти языки очень удобны при работе в графических опе- рационных системах, о которых речь пойдет в следующей (пос- ледней) главе книги. Глава 25 Графическая революция 10 сентября 1945 г. читателей журнала «Life» ожидала в основ- ном обычная пестрая мозаика статей и фотографий: материа- лы о конце Второй мировой войны, описание жизни танцора Вацлава Нижинского в Вене, иллюстрированное эссе о профсо- юзе United Auto Workers. Кроме того, в номере был и неожи- данный материал: статья Ванневара Буша (Vannevar Bush) (1890– 1974) о будущем научных исследований. В 1927–1931 гг., рабо- тая в Массачусетском технологическом институте, Буш уже внес свою лепту в историю компьютеров, разработав один из самых удачных аналоговых компьютеров — дифференциальный ана- лизатор. Во время написания статьи для «Life» Буш руководил Управлением научных исследований и разработок США, кото- рое в годы войны отвечало за координацию различных науч- ных исследований, включая «Манхэттенский проект». Статья Буша «Как мы предполагаем» представляла собой сжатый вариант публикации, появившейся за два месяца до этого в «The Atlantic Monthly». В ней описывались некие гипо- тетические будущие изобретения, призванные облегчить жизнь ученого и исследователя, которому приходится иметь дело со все возрастающим объемом специализированных из- даний. Буш видел выход в использовании микропленок. Он предложил использовать для хранения книг, статей, звуков и изображений воображаемое устройство «Memex». Между от- дельными элементами хранилища предполагалось создание 460 Глава двадцать пятая тематических связей, основанных на ассоциациях, которые обычно рождаются в человеческом мышлении. По мнению Буша, разработкой этих связей должны заниматься специаль- но подготовленные профессионалы. В XX в. статьи о технологических чудесах будущего появ- лялись довольно часто. Но статья Буша выпадает из общего ряда. Речь в ней идет не о диковинных бытовых устройствах или фантастических средствах передвижения. Буша интересо- вала информация и технологические способы ее хранения и обработки. За шесть с половиной десятилетий, отделяющих нас от пер- вых релейных вычислительных машин, компьютеры стали компактнее, быстрее и дешевле. Благодаря этому изменилась сама природа работы с информацией. Из сложного научного и инженерного прибора компьютер перешел в разряд бытовой техники. Повышение мощности и быстродействия компьютеров необходимо, хотя бы частично, использовать для совершен- ствования самой важной части компьютерной системы — пользовательского интерфейса, т. е. точки, в которой компью- тер соприкасается с человеком. Человек и компьютер — раз- ные, и, увы, многие считают, что легче человека приспособить к компьютеру, чем наоборот. Первые цифровые компьютеры не отличались интерактив- ностью. Некоторые из них нужно было программировать с помощью переключателей и кабелей, другие — с помощью перфокарт и перфолент. В 1950-е и 1960-е годы (да и в 1970-е) пользователь зачастую был отделен от процесса вычислений: он писал программу на бумаге и отдавал ее в вычислительный центр. Сотрудники ВЦ переносили ее на перфокарты, вводи- ли в компьютер и запускали. Затем пользователь получал от- печатанные на бумаге результаты работы программы (при ус- ловии, конечно, что компиляция прошла успешно). Первые интерактивные устройства для обмена информа- цией с компьютером напоминали пишущие машинки. К од- ному компьютеру их можно было подключить несколько. Пользователь набирал на клавиатуре команду, которая тут же отпечатывалась на рулоне бумаги и отправлялась в компью- тер. Тот обрабатывал ее и печатал на том же рулоне результа- ты. Обмен информацией между терминалом и компьютером 461 Графическая революция осуществлялся исключительно в виде ASCII-кодов (или в дру- гой аналогичной кодировке), т. е. поток данных целиком состо- ял из букв, цифр, знаков препинания и простых управляющих кодов, например, кодов возврата каретки и перевода строки. Катодно-лучевые трубки, широко распространившиеся в 1970-е годы, позволяли осуществлять вывод информации с большей гибкостью, но создатели первых программ для не- больших компьютеров пользовались этой гибкостью неохот- но, вероятно, не желая отступать от общепринятой в то время логики представления информации. Во многих случаях мо- ниторы оставались «стеклянными пишущими машинками»: экран заполнялся информацией построчно, а когда места на нем не оставалось, строки «прокручивались» вверх, по одной исчезая за верхней границей экрана. В таком режиме действу- ют все программы для CP/M и многие программы для MS-DOS. В манере пишущей машинки до сих пор работает UNIX. Интересно, что в кодировке ASCII изначально предусмот- рено средство для работы с катодно-лучевым экраном: сим- вол 1Bh (Escape). В 1979 г. Американский институт по стан- дартизации опубликовал стандарт «Дополнительные управля- ющие символы для использования с ASCII». Вводился он с целью «удовлетворить ожидаемые потребности в управлении вводом-выводом информации на двумерных устройствах… включая интерактивные терминалы с катодно-лучевыми эк- ранами и принтеры». Вот здесь и нашлось применение коду 1Bh. Символ Escape в потоке информации означает, что несколько следующих за ним символов нужно не отображать, а интерпретировать как код действия. Например, последовательность: 1Bh 5Bh 32h 4Ah т. е. Escape-код и символы [2J стирает содержимое экрана и перемещает курсор в его верхний левый угол. Понятно, что с пишущей машинкой такое проделать не удастся. Последова- тельность: 1Bh 5Bh 35h 3Bh 32h 39h 48h т. е. Escape-код и символы [5;29H, передвигает курсор в 29-й столбец 5-й строки. 462 Глава двадцать пятая Монитор, изображение на котором формируется ASCII- кодами и Escape-последовательностями, поступающими с уда- ленного компьютера, вкупе с клавиатурой иногда называют «немым» терминалом (dumb terminal). Терминалы работают быстрее телетайпных аппаратов и обладают большей гибкос- тью, но для радикальных перемен в пользовательском интер- фейсе их быстродействия все же маловато. Настоящая рево- люция в этой области началась лишь в 1970-е — с появлением небольших компьютеров, у которых видеопамять была час- тью общего адресного пространства процессора. Первым указанием на то, что небольшие компьютеры бу- дут радикально отличаться от своих больших дорогостоящих «собратьев», стала, вероятно, программа VisiCalc (1979) для ком- пьютера «Apple II», разработанная и написанная Дэном Брик- лином (Dan Bricklin) (род. 1951) и Бобом Фрэнкстоном (Bob Frankston) (род. 1949). До тех пор для вычислений с наборами чисел использовались разлинованные листы бумаги. В VisiCalc двумерное изображение таблицы впервые оказалось не на бу- маге, а на экране компьютера. Пользователь мог свободно пе- ремещать курсор по таблице, вводя в ее ячейки числа и форму- лы, которые по его команде вычислялись. Пожалуй, одно из наиболее удивительных качеств VisiCalc в том, что создание аналогичной программы на большом компь- ютере принципиально невозможно. У подобных программ часто возникает потребность в быстром обновлении содержимого экрана. Поэтому программа VisiCalc записывала отображаемые данные прямо в видеопамять дисплея «Apple II», входившую в адресное пространство процессора. Скорость обмена данными между большим компьютером и «немым» терминалом для опе- ративного обновления изображения слишком низка. Чем быстрее компьютер реагирует на сигналы клавиатуры и обновляет содержимое экрана, тем шире возможности для организации его взаимодействия с пользователем. Большин- ство программ, написанных в первое десятилетие существо- вания IBM PC (1980-е), записывали данные прямо в видеопа- мять. Поскольку аппаратным стандартам IBM следовали и дру- гие производители компьютеров, авторы ПО могли спокойно обходить ОС и обмениваться данными прямо с оборудовани- ем, не опасаясь, что на каких-то компьютерах их программы работать откажутся. Если бы на различных клонах PC обмен 463 Графическая революция данных с дисплеем был организован по-разному, писать для них программы было бы гораздо сложнее. Первые приложения для IBM PC выводили на экран почти исключительно текст, без графики. Это позволяло создавать максимально быстрые приложения. В компьютере, подобном тому, что мы обсуждали в главе 21, для отображения на экра- не конкретного символа программа просто записывает в ви- деопамять его ASCII-код. В графическом режиме для вывода на экран изображения того же символа в видеопамять придет- ся передать не менее 8 байт. И все же именно переход из текстового в графический ре- жим стал чрезвычайно важным шагом в эволюции компью- теров. Поначалу разработка аппаратного и программного обес- печения для работы не просто с цифрами и буквами, а с изоб- ражениями шла очень медленно. Еще в 1945 г. Джон фон Ней- ман обсуждал возможность создания дисплея, работающего по принципу осциллографа, на котором можно было бы ото- бражать графику. Но в жизнь эти идеи начали воплощаться лишь в начале 1950-х, когда Массачусетский технологический институт при участии IBM организовал Лабораторию им. Лин- кольна, которая разрабатывала компьютеры для системы ПВО ВВС США. В систему SAGE (Semi-Automatic Ground Environ- ment, полуавтоматическая наземная система) входили графи- ческие дисплеи, помогавшие  операторам анализировать боль- шие объемы информации. Действие современных мониторов для персональных ком- пьютеров основано на иных принципах, чем действие первых графических систем типа SAGE. В наши дни в компьютерах применяются в основном растровые дисплеи, напоминающие обычные телевизионные экраны. Изображение состоит из на- бора горизонтальных строк, прорисовываемых электронным лучом. Наглядно экран можно представить в виде двумерного массива точек — пикселов. В компьютере для хранения изоб- ражения отводится специальная область памяти, в которой каждому пикселу на экране соответствует один или несколько битов. Значения этих битов определяют яркость и цвет соот- ветствующего пиксела. Разрешение большинства современных мониторов состав- ляет минимум 640 пикселов по горизонтали и 480 по вертика- ли. Полное число пикселов, таким образом, равно 307 200. Если 464 Глава двадцать пятая каждому пикселу в памяти сопоставить единственный бит, можно будет закодировать всего два цвета — черный и белый. При этом для содержимого экрана понадобится 307 200 бит или  38 400 байт. Чтобы отображать на экране большее количество цветов, придется увеличить число битов, приходящихся на пиксел. Так, чтобы отображать одним пикселом 256 оттенков серого, по- надобится уже целый байт. Его значение 00h может соответ- ствовать черному, значение FFh — белому, а промежуточные значения — различным оттенкам серого. Чтобы получить на экране электронно-лучевой трубки цвет, приходится использовать уже не одну, а три электрон- ные пушки, по одной для каждого из основных цветов — крас- ного, зеленого, синего (посмотрите на экран через увеличи- тельное стекло и убедитесь, что так оно и есть). Сочетание крас- ного и зеленого дает желтый цвет, красного и синего — мали- новый, зеленого и синего — голубой, сочетание всех трех ос- новных цветов — белый. В простейшем адаптере цветного дисплея на каждый пиксел должно приходиться  по 3 бита — по одному на каждый основ- ной цвет. Таблица кодирования цветов может выглядеть так: Биты Цвет 000 Черный 001 Синий 010 Зеленый 011 Голубой 100 Красный 101 Малиновый 110 Желтый 111 Белый Конечно, ни для чего, кроме мультиков, такая палитра не год- на. Чтобы получить на экране реалистичное изображение, надо уметь отображать на нем оттенки основных цветов. Если вы готовы пожертвовать по 2 байта на пиксел, каждому основно- му цвету будет сопоставлено по 5 бит (1 бит останется не у дел). Это позволит кодировать 32 градации яркости каждого основного цвета или всего 32 768 различных цветов. Такую систему кодирования часто называют палитрой High Color. 465 Графическая революция Следующий шаг к реалистичности — кодировать каждый пиксел 3 байтами, по байту на основной цвет. В такой схеме кодируются уже не 32, а 256 градаций яркости красного, зеле- ного и синего, или всего 16 777 216 различных цветов (палит- ра True Color). При разрешении дисплея 640 � 480 для 3-бай- тового представления цветов понадобится видеопамять объе- мом 921 600 байт, т. е. почти мегабайт. Число битов на пиксел называют иногда цветовой глуби- ной (color depth). Количество доступных цветов связано с цве- товой глубиной соотношением: Число цветов = 2Число битов на пиксел Объем памяти на видеоплате не бесконечен, что накладывает ограничение на доступные комбинации разрешения и цветовой глубины. Если на плате адаптера установлена видеопамять объе- мом 1 Мб, при разрешении 640 � 480 можно будет использовать палитру True Color. Но если вы решите установить разрешение 800 � 600, выделить каждому пикселу по 3 байта уже не удастся; придется ограничить свои амбиции палитрой High Color. Теперь растровые дисплеи кажутся нам вполне естествен- ными, но в начале компьютерной эры они не находили широ- кого распространения именно по причине чрезмерных требо- ваний к памяти. Дисплеи системы SAGE были векторными (vector), более напоминая не телевизор, а осциллограф. Сиг- нал от компьютера произвольно перемещал электронную пушку, и луч электронов рисовал на экране прямые и кривые линии. Нарисованная линия некоторое время сохранялась на экране, благодаря чему на нем можно было создавать простые изображения. На компьютерах SAGE также использовались световые ка- рандаши (light pens), позволявшие оператору рисовать прямо на экране. Принцип работы карандаша нелегко разгадать даже технически подготовленному человеку, а фокус в том, что све- товой карандаш не излучает свет, он его детектирует. Элект- ронная схема, управляющая движением пушки, попутно оп- ределяет, попал ли свет, излученный под воздействием элект- ронного пучка, на световой карандаш, таким образом вычис- ляя его экранные координаты. Одним из первых пришествие новой эры интерактивных вычислений предугадал Айвен Сазерленд (Ivan Sutherland) 466 Глава двадцать пятая (род. 1938). В 1963 г. он продемонстрировал революционную графическую программу Sketchpad для компьютеров SAGE. Она сохраняла описания изображений в памяти компьютера и могла при необходимости выводить их на экран. Световым карандашом можно было рисовать на экране новые изобра- жения и корректировать уже имеющиеся, сохраняя внесенные изменения в памяти. Другим провидцем эры интерактивных вычислений был Дуглас Энджелбарт (Douglas Engelbart) (род. 1925), с 1950 г. разрабатывавший компьютерные интерфейсы. В середине 1960-х Энджелбарт предложил использовать в качестве уст- ройств ввода небольшую клавиатуру, специально приспособ- ленную для набора команд (она так и не стала популярной), и устройство с колесиками и кнопкой, которой он назвал мы- шью (mouse). Мышь теперь используется для работы с объек- тами на экране практически повсеместно. Многие сторонники графического компьютерного интер- фейса работали в фирме Xerox. В 1970 г. фирма организовала в Пало-Альто (штат Калифорния) исследовательский центр PARC (Palo-Alto Research Center) с целью создания продуктов, которые позволили бы ей выйти на компьютерный рынок. Первым большим проектом PARC был компьютер «Alto» (1972–1973). По тем временам это было впечатляющее устрой- ство: 16-битовая обработка чисел, два диска емкостью по 3 Мб, 128 кб памяти (с возможностью расширения до 512 кб) и мышь с тремя кнопками! Об однокристальных микропроцессорах в ту пору еще не слышали, поэтому процессор «Alto» собирался из 200 отдельных микросхем. В конструкцию «Alto» входило несколько нетривиальных устройств, в том числе, растровый дисплей. По размеру экран почти не отличался от стандартного листа бумаги — 8 дюй- мов в ширину и 10 дюймов в высоту. Дисплей работал в гра- фическом режиме с разрешением 606 пикселов по горизонта- ли и 808 пикселов по вертикали (всего 489 648 пикселов). Каж- дому пикселу соответствовал 1 бит, т. е. доступны были лишь два цвета — черный и белый. Видеопамять емкостью 64 кб входила в адресное пространство процессора. Записывая информацию в видеопамять, программа фор- мировала на экране изображение, в частности, оформленный различными шрифтами текст. Передвигая мышь по столу, 467 Графическая революция пользователь перемещал по экрану указатель и работал с эк- ранными объектами. Дисплей «Alto» уже совершенно не на- поминал телетайпный аппарат с одномерной последователь- ностью команд и ответов на них. Он окончательно превратил- ся в емкий двумерный массив информации. В конце 1970-х у программ для компьютера «Alto» появи- лось несколько очень интересных особенностей. На экране одновременно могли отображать информацию несколько про- грамм; у каждой из них для этого имелось свое окно. Появи- лись и первые графические элементы пользовательского ин- терфейса — кнопки, меню и маленькие значки-«иконки» (icons), которые приводились в действие мышью. То были пер- вые признаки того, что компьютеры перестают быть достоя- нием профессионалов и переходят в мир обычных людей, а область их применения выходит за рамки простого «переже- вывания» чисел. Разработки центра PARC для компьютера «Alto» положи- ли начало графическому интерфейсу пользователя (Graphic User Interface, GUI). Правда, на рынок компьютеры «Alto» так и не поступили (стоил бы такой компьютер свыше 30 000 долла- ров), и прошло целое десятилетие, прежде чем заложенные в них идеи получили дальнейшее развитие. В 1979 г. центр PARC посетил Стив Джобс и его коллеги из «Apple Computer». Увиденное произвело на них большое впе- чатление, но собственный компьютер с графическим интер- фейсом они создали лишь 3 года спустя, в январе 1983 г. Это была печально известная машина «Apple Lisa». Годом позже появился куда более удачный «Macintosh». Первые «Macintosh» комплектовались процессором Moto- rola 68000, ПЗУ емкостью 64 кб, оперативной памятью 128 кб, 3,5-дюмовым дисководом для дискет емкостью 400 кб, клави- атурой, мышью и монитором с разрешением 512 � 342 и диа- гональю 9 дюймов. Каждому пикселу соответствовал 1 бит; объем видеопамяти составлял 22 кб. Оборудование первого «Macintosh» было элегантным, но не экстравагантным. От других компьютеров, продававшихся в 1984 г., его существенно отличала операционная система, в то время называвшаяся системным программным обеспечени- ем, а позже прославившаяся под именем Mac OS. 468 Глава двадцать пятая Текстовые однопользовательские ОС наподобие CP/M или MS-DOS очень компактны и развитым интерфейсом приклад- ного программирования (API) не обладают. В главе 22 я гово- рил, что от этих ОС в основном требовалось дать другим про- граммам доступ к файловой системе. Графическая ОС, напри- мер Mac OS, занимает гораздо больше места и наделена сотня- ми функций API. Каждая из них обозначается именем, в кото- ром коротко зашифровано ее назначение. В текстовой ОС, подобной MS-DOS, достаточно пары функ- ций API, которые позволяли бы приложениям построчно пе- чатать на экране текст. В графической ОС приложениям тре- буется возможность выводить на экран изображения. Теорети- чески для этого достаточно единственной функции API, кото- рая задавала бы цвет и яркость пиксела с определенными ко- ординатами. Однако на практике поточечное формирование изображения оказывается слишком медленным. Программировать для ОС гораздо легче, если она предо- ставляет в распоряжение разработчика полную систему гра- фического программирования, т. е. набор функций API для отображения текста и рисования прямых линий, прямоуголь- ников и эллипсов (в том числе окружностей). Удобно, если можно линии делать не только сплошными, но и пунктирны- ми или штриховыми, для замкнутых фигур задавать заливку, для текста выбирать шрифты, размеры и начертания (полу- жирное, подчеркнутое и пр.). Преобразованием этих объек- тов в набор разноцветных точек на экране занимается не про- граммист, а система графического программирования. Программы, работающие под управлением графической ОС, обращаются к одним и тем же функциям API для рисова- ния изображений на экране и их печати на принтере. Благода- ря этому документ текстового процессора на экране выглядит практически так же, как и на печати. Такая технология назы- вается WYSIWYG (What You See Is What You Get, что видишь, то и получаешь). Привлекательность графических ОС отчасти обусловлена тем, что различные приложения в целом организованы оди- наково, и потому опыт, приобретенный при работе с одним приложением, применим и во всех остальных. Для практичес- кой реализации такого единообразия в набор API включены функции для отображения элементов пользовательского ин- 469 Графическая революция терфейса, например, кнопок и меню. Обычно считают, что стандартизированный графический интерфейс облегчает жизнь пользователю, но на самом деле он не менее удобен и для программиста. При создании нового приложения автору не приходится изобретать велосипед. Еще до появления «Macintosh» некоторые компании пыта- лись создать графическую ОС для IBM-совместимых компь- ютеров. В каком-то смысле перед разработчиками «Apple» сто- яла более легкая задача, поскольку они проектировали обору- дование и программы одновременно. Системной программе «Macintosh» достаточно было поддерживать один тип диско- вода для гибких дисков, один дисплей и два принтера. При создании графической ОС для PC приходилось учитывать куда более широкое аппаратное разнообразие. И это не единственная проблема. За несколько лет суще- ствования IBM PC многие люди привыкли к приложениям MS- DOS и не собирались от них отказываться. К графической ОС для PC предъявлялось непременное требование: под ней дол- жны были работать программы для MS-DOS (на «Macintosh» программы для «Apple II» не работали главным образом из-за различий в микропроцессорах). В 1985 г. появились сразу три графических оболочки для PC: GEM компании Digital Research (в свое время создавшей CP/M), VisiOn компании VisiCorp (она распространяла про- грамму VisiCalc) и Windows 1.0 компании Microsoft. Скоро ста- ло ясно, что победителем в «войне окон» станет последняя. Однако массовое внимание пользователей Windows привлек- ла лишь в мае 1990 г., после выхода версии 3.0. С тех пор попу- лярность Windows возросла неимоверно, и в наши дни под управлением этой ОС работает 90% персональных компьюте- ров. Внешне системы Windows и Mac OS довольно похожи, но интерфейсы API у них совершенно разные. Теоретически графическая ОС по сравнению с текстовой требует установки на компьютере лишь одного дополнитель- ного устройства — дисплея с графическими возможностями. Даже жесткий диск необязателен: у первого «Macintosh» его вовсе не было, для работы Windows 1.0 он тоже был не нужен. Не требовалась в Windows 1.0 и мышь, хотя по общему мне- нию она существенно облегчала работу с системой. 470 Глава двадцать пятая И все же именно развитие компьютерного оборудования — повышение быстродействия процессоров, увеличение объе- ма оперативной памяти и емкости жестких дисков — обусло- вило растущую популярность графических ОС. По мере того как ОС становится удобнее, растут и ее потребности. Совре- менной графической ОС нужны пара сотен мегабайт на жест- ком диске и оперативная память не менее 32 Мб. Приложения для графических ОС практически никогда не писались на ассемблере. В прежние годы программы для «Macintosh» разрабатывались на Паскале, а для Windows — на С. В 1972 г. сотрудники центра PARC приступили к разработке языка SmallTalk, опирающегося на концепцию объектно-ори- ентированного программирования (object-oriented program- ming), на которой основан новый подход к созданию графи- ческих программ. В традиционных языках программирования имеется чет- кое различие между программой (т. е. операторами, начинаю- щимися с какого-либо ключевого слова — Set, For, If и т. д.) и данными (т. е. константами и переменными). Корни этого раз- личия, несомненно, лежат в архитектуре неймановского ком- пьютера, в котором нет ничего, кроме машинного кода и дан- ных, на которые этот код воздействует. В объектно-ориентированном программировании код и данные сосуществуют в составе единого объекта (object). Кон- кретный способ хранения данных в объекте понятен лишь коду, связанному с этим объектом. Друг с другом объекты вза- имодействуют, отправляя и принимая сообщения (messages), в которых содержатся команды или запросы на информацию. Объектно-ориентированные языки особенно удобны при создании приложений для графических ОС. Благодаря им про- граммист, работая с экранными объектами (окнами, кнопка- ми), воспринимает их практически так же, как и пользователь. Возьмите в качестве примера объекта кнопку. Она характери- зуется следующими данными: размерами, положением на эк- ране, текстом. А связанный с кнопкой код отслеживает, была ли она «нажата» с помощью клавиатуры или мыши, и отправ- ляет другим объектам сообщение об этом. Несмотря на новый подход к программированию, все по- пулярные объектно-ориентированные языки для небольших компьютеров являются расширенными вариантами традици- 471 Графическая революция онных «алголоподобных» языков, например, С или Паскаля. Объектно-ориентированный вариант языка С называется С++. Он разработан в основном Бьерном Страуструпом (Bjarne Stroustrup) (род. 1950) из Bell Telephone Laboratories. Поначалу С++ был реализован как транслятор, который преобразовы- вал программу на С++ в программу на С (весьма неуклюжую и совершенно нечитабельную). Затем программа на С компи- лировалась обычным способом. Разумеется, возможностей у объектно-ориентированных язы- ков ничуть не больше, чем у традиционных. Но решения про- граммистских задач, подсказываемые объектно-ориентирован- ными языками, зачастую технически более совершенны. При из- вестном старании можно (хотя и не обязательно легко) написать даже объектно-ориентированную программу, которая будет ком- пилироваться как под Mac OS, так и под Windows. В такой про- грамме прямого обращения к API-функциям быть не должно. Программа обращается к объектам, а уже объекты вызывают API- функции. При компиляции программы под Mac OS и под Windows используются различные определения объектов. В наши дни запускать компилятор из командной строки, как правило, уже не приходится. Большинство программис- тов перешли на интегрированные среды разработки — удоб- ные программы, в которых объединены все инструменты на- писания и отладки программ. Широкое распространение по- лучил также метод визуального программирования (visual programming), позволяющий разрабатывать окна приложения в интерактивном режиме, размещая в них кнопки и другие элементы с помощью мыши. В главе 22 я рассказывал о текстовых файлах, которые со- держат только коды ASCII и понятны человеку без использо- вания дополнительных приспособлений. В текстовых ОС та- кие файлы — идеальное средство для обмена информацией между приложениями. У них есть одно большое преимуще- ство: в текстовом файле легко найти нужную последователь- ность символов. Но как только у вас возникает желание ото- бражать текст во множестве шрифтов, размеров и начертаний, вы понимаете, что возможностей текстового файла для этого недостаточно. Большинство современных текстовых процес- соров хранят свои документы в двоичном формате. И уже со- всем не годится текстовый формат для хранения изображений. 472 Глава двадцать пятая Точнее сказать, закодировать в текстовом файле такие ат- рибуты текста, как параметры шрифта или абзаца, можно. В формате RTF (Rich Text Format), разработанном фирмой Microsoft, для этого применяются фигурные скобки и обрат- ная косая черта, за которой следует команда, описывающая форматирование текста. В текстовом формате PostScript эта концепция доведена до крайности. Его разработал один из основателей компании Adobe Systems Джон Уорнок (John Warnock) (род. 1940). Он представляет собой настоящий универсальный язык графи- ческого программирования. Сейчас PostScript применяется в основном для печати текста и изображений на высококаче- ственных принтерах. Изображения украсили экраны ПК благодаря совершен- ствованию компьютерного оборудования и его удешевлению. Микропроцессоры заработали быстрее, память подешевела, экраны и листы бумаги, выползающие из принтеров, запест- рели яркими красками, существенно возросло экранное и пе- чатное разрешение. Все эти достижения сразу находили при- менение в компьютерной графике. Компьютерные изображения, как и мониторы, бывают ра- стровыми и векторными. Векторные изображения создаются алгоритмически, в виде сочетания прямых и кривых линий и заполненных фигур. Их активно используют в системах автоматизированного проек- тирования (computer-aided drawing) для создания технических или архитектурных чертежей. Формат для хранения вектор- ного изображения на диске компьютера называют метафай- лом (metafile). Обычно в метафайл входят просто команды для рисования компонентов векторного изображения, записанные в двоичном виде. Замкнутых и разомкнутых линий вполне достаточно для создания проекта, скажем, моста, но они абсолютно непригод- ны, если вам нужно показать, как этот мост выглядит «в жиз- ни». Мост — объект из реального мира. Он слишком сложен, чтобы его можно было представить в виде комбинации про- стых геометрических фигур. Вот здесь-то на помощь и приходят растровые, или точеч- ные (bitmap) изображения. В точечном формате изображение представлено в виде прямоугольного массива пикселов, соот- 473 Графическая революция ветствующих пикселам устройства вывода. Подобно монито- рам, точечные изображения характеризуются размерами по горизонтали и вертикали в пикселах и цветовой глубиной, за- висящей от того, сколько битов соответствует 1 пикселу. Хотя точечное изображение двумерно, файл, в котором оно записано, представляет собой всего лишь длинную последо- вательность битов. В ней, как правило, сначала закодирована первая строка пикселов, потом вторая и т. п. Создавать точечные изображения можно как «вручную», с помощью специального графического приложения, так и про- граммно. В точечный формат можно перевести и изображе- ние, созданное более традиционным способом: рисунок или фотографию. Для переноса в компьютер образов из реально- го мира придумано несколько устройств, основу которых, как правило, составляет прибор с зарядовой связью (ПЗС, charge- coupled device, CCD) — полупроводниковый прибор, выраба- тывающий электрический ток при облучении светом. Старейшее устройство подобного рода — сканер. В нем, как и в копировальном аппарате, по сканируемому изображению (например, по фотографии) проходит ПЗС-линейка, состав- ленная из отдельных ПЗС-элементов. В зависимости от ин- тенсивности света, отраженного от изображения, каждый ПЗС- элемент вырабатывает определенный электрический заряд. Программа, обслуживающая сканер, переводит сигналы от отдельных элементов в пикселы точечного изображения и за- писывает его в файл. В видеокамерах для записи изображения используются дву- мерные ПЗС-матрицы. Обычно запись осуществляется на маг- нитную ленту, но сигнал с ПЗС-матрицы можно направить и в устройство для захвата кадра (video frame grabber) — ком- пьютерную плату, преобразующую аналоговый видеосигнал в последовательность битов. Источником видеосигнала может быть не только видеокамера, но и видеомагнитофон, проиг- рыватель лазерных видеодисков и даже обычный телевизор. В недавнее время в разряд бытовых приборов попали циф- ровые видеокамеры. Выглядят они, как обычные видеокаме- ры, но сигнал с ПЗС-матрицы записывается в них не на ленту, а в электронную память, откуда его позже можно переписать на диск компьютера. 474 Глава двадцать пятая Зачастую в графической ОС для хранения точечных изоб- ражений используется свой специфический формат. На «Macintosh», например, применяется формат Paint. Это назва- ние происходит от имени графического редактора MacPaint, в котором формат был впервые применен (в настоящее время предпочтительнее формат PICT, в котором могут храниться как точечные, так и векторные изображения). Точечный фор- мат для Windows называется BMP (такое расширение в этой ОС имеют файлы с точечными изображениями). Точечные изображения зачастую весьма объемны, поэто- му желательно придумать какой-то способ делать их компак- тнее. Изобретение подобных способов относится к компетен- ции раздела информатики, известного как уплотнение данных. Рассмотрим в качестве примера изображение, в котором каж- дому пикселу соответствуют 3 бита. На нем запечатлено голу- бое небо и дом с лужайкой, т. е. существенные части изображе- ния окрашены в голубой и зеленый цвета. Допустим, верхняя строка изображения содержит 72 пиксела голубого цвета, иду- щих друг за другом. Чтобы сделать файл компактнее, нужно записывать в него не все 72 пиксела, а лишь один, но с указа- нием повторить его 72 раза. Такой способ уплотнения называ- ется кодированием повторяющихся последовательностей (Run-Length Encoding, RLE) и применяется в обычных факси- мильных аппаратах для сжатия изображения перед его отправ- кой по телефонной линии. Поскольку факс-аппарат различа- ет только черный и белый цвета, в отправляемом изображе- нии обычно не бывает недостатка в длинных последователь- ностях одноцветных пикселов. Для сжатия графических файлов уже больше десятилетия используется метод LZW, названный так по именам его созда- телей (Lempel, Ziv, Welch). Он, в частности, применяется в гра- фическом формате GIF (Graphics Interchange Format, формат для обмена изображениями), разработанном в 1987 г. компа- нией CompuServe. Метод LZW в отличие от RLE способен рас- познавать не только идущие подряд одинаковые пикселы, но и более сложные закономерности в их расположении. Методы RLE и LZW обеспечивают уплотнение без потерь. Это значит, что при восстановлении уплотненного файла он полностью возвращается в исходное состояние. Иными сло- вами, уплотнение методом RLE или LZW обратимо. Легко до- 475 Графическая революция казать, что сжать без потерь можно не всякий файл. Иногда файл, «уплотненный» по обратимому методу, оказывается больше исходного! В последние годы выросла популярность «затратных» методов сжатия. Они обратимостью уже не обладают, посколь- ку часть исходных данных в уплотненный файл не записыва- ется. Разумеется, никто не посоветует вам таким способом сжи- мать документ текстового процессора или файл электронной таблицы, в которых важна каждая цифра или буква. Но к гра- фическим файлам затратное сжатие вполне применимо, при условии, конечно, что выброшенные данные не ухудшают су- щественно качества изображения. Вот почему разработчикам затратных методов приходится опираться на результаты пси- хологических исследований, в которых определяется, что ка- жется человеческому взгляду важным, а что — нет. Самые популярные затратные методы сжатия точечных изображений известны под общим обозначением JPEG (Joint Photography Experts Group, Объединенная группа специалистов по фотографии). Правда, формат JPEG включает в себя несколь- ко методов сжатия, из которых затратными являются не все. Преобразовать метафайл в точечное изображение доволь- но просто. Концептуально видеопамять и точечное изображе- ние организованы одинаково. Если программа «умеет» рисо- вать изображение на экране компьютера, она с тем же успехом может записать его в точечный файл. Обратное преобразование выполнить гораздо сложнее, если вообще возможно. Частный случай такого преобразования — оптическое распознавание символов (Optical Character Recognition, OCR). Оно используется, когда нужно перевести печатные символы, содержащиеся в точечном изображении, в соответствующие коды ASCII. OCR-программа анализирует последовательности пикселов и пытается определить, изобра- жение какого символа ей встретилось. Алгоритмически эта задача очень сложна, поэтому 100%-ую точность программы OCR обеспечивают редко. Еще хуже дело обстоит с переводом в коды ASCII рукописного текста. Точечные и векторные изображения являют собой способ цифрового представления визуальной информации. В биты и байты можно преобразовать также и звуковую информацию. 476 Глава двадцать пятая Цифровой звук произвел фурор в 1983 г., когда на рынке появились первые компакт-диски (compact-disks, CD). Это со- бытие положило начало самому успешному этапу развития бытовой электроники. Компакт-диск разработан фирмами Philips и Sony для записи 74 минут цифрового звука на одной стороне диска диаметром 12 см. Такая продолжительность за- писи выбрана для того, чтобы на одном диске можно было целиком хранить Девятую симфонию Бетховена. Звук на компакт-диске кодируется с помощью кодово-им- пульсной модуляции (pulse code modulation, PCM). Несмотря на заковыристое название, концепция метода PCM проста. Звук — это вибрация. Вибрируют голосовые связки чело- века, труба в оркестре, падающее дерево. Вибрация заставляет воздух двигаться. Он начинает периодически разрежаться и сжиматься с частотой несколько сотен или тысяч раз в секун- ду — по воздуху распространяется звуковая волна. Долетев до уха, она колеблет барабанные перепонки, благодаря чему мы слышим звук. В фонографе Томаса Эдисона, изобретенном в 1877 г., зву- ковые волны продавливалась на поверхности цилиндра, по- крытого оловянной фольгой. Записанный на цилиндре звук позже можно было воспроизвести. До появления компакт-дис- ков этот принцип записи оставался практически неизменным, хотя вместо цилиндров позже стали использовать диски, а вместо фольги — сначала воск, а потом пластмассу. Первые фонографы были полностью механическими, затем для уси- ления звука в них начали применять электрические схемы. Переменный резистор в микрофоне превращает звук в элект- рический сигнал, а электромагнит в динамике преобразует электричество обратно в звук. Электрический ток, которым закодирован звук, не похож на те дискретные сигналы, о которых мы говорили на протя- жении всей книги. Давление в звуковой волне меняется непре- рывно, и потому непрерывно меняется также и напряжение тока. Этот электрический сигнал является аналоговым, и для его преобразования в двоичную форму необходимо специаль- ное устройство, обычно изготавливаемое в виде микросхемы, — аналого-цифровой преобразователь (АЦП; analog-to-digital converter). Цифровые сигналы на выходе АЦП — обычно их 8, 12 или 16 — символизируют относительный уровень напря- 477 Графическая революция жения. 12-битовый АЦП, например, преобразует звуковой электрический сигнал в число от 000h до FFFh, различая 4096 уровней напряжения. В случае кодово-импульсной модуляции аналоговый сиг- нал преобразуется в цифровые значения с постоянной скоро- стью. Эти значения записываются на компакт-диск в виде кро- хотных ямок на его поверхности и считываются лучом лазера, отражающимся от поверхности диска. При воспроизведении двоичные значения преобразуются обратно в аналоговый сиг- нал с помощью цифро-аналогового преобразователя (digital-to- analog converter). Подобное устройство используется и в цвет- ных видеоадаптерах для преобразования битового кода пик- села в аналоговый сигнал, который подается на монитор. Частота, с которой аналоговый звуковой сигнал преобра- зуется в цифровой, называется частотой дискретизации (sampling rate). В 1928 г. Гарри Найквист (Harry Nyquist) из Bell Telephone Laboratories доказал, что она должна минимум вдвое превосходить максимальную частоту звука, который предпо- лагается записывать и воспроизводить. Обычно считается, что человеческое ухо способно воспринимать звук в диапазоне частот от 20 до 20 000 Гц. При записи компакт-дисков исполь- зуется частота дискретизации 44 100 Гц, что несколько выше требуемой. Количество битов для кодирования элемента записи опре- деляет динамический диапазон компакт-диска, т. е. различие между самым тихим и самым громким звуком, который мож- но на него записать. Для измерения ширины этого диапазона введена единица бел, названная в честь Александра Белла. 1 бел соответствует 10-кратному увеличению интенсивности звука. Чаще применяется единица децибел, равная 0,1 бела. 1 деци- бел приблизительно равен минимальному изменению интен- сивности звука, которое человек в состоянии различить. 16-разрядное кодирование звука позволяет охватить дина- мический диапазон 96 децибел, что приблизительно соответ- ствует разнице между порогом слышимости и болевым поро- гом. При записи компакт-дисков один дискретный звуковой элемент кодируется 16 битами. Итак, 1 секунда звуковой записи представлена на диске 44 100 элементами по 2 байта каждый. Поскольку мы уже привыкли к стереозвучанию, удваиваем это число, получив в итоге 176 478 Глава двадцать пятая 400 байт на секунду или 10 584 000 байт на минуту записи (те- перь вы, конечно, понимаете, почему цифровая запись не пользовалась популярностью до 1980-х). Для записи на ком- пакт-диске  74 минут звука требуется 783 216 000 байт. У цифрового звука по сравнению с аналоговым много хо- рошо известных преимуществ. В частности, при каждом ко- пировании аналогового звука качество записи ухудшается. Цифровой же звук состоит из чисел, которые можно много- кратно копировать без потери информации. В прежних теле- фонных сетях качество сигнала ухудшалось при увеличении расстояния между абонентами. Теперь это не так. В телефон- ных системах используется в основном цифровой звук, и по качеству звонок на другой континент не отличается от звонка в соседний дом. На компакт-диске можно хранить не только звук, но и дан- ные. Компакт-диск, используемый исключительно для данных, называют иногда CD-ROM-диском. Емкость таких дисков обыч- но не превышает 660 Мб. Дисководы для их чтения стали стан- дартным компьютерным оборудованием, а сами диски — тра- диционным средством для распространения приложений и игр. Лет 10 назад возможность записи и воспроизведения звука и видео с помощью компьютера назвали красивым словом мультимедиа (multimedia), но теперь эти функции настолько стандартны, что необходимость в специальном названии от- пала. В комплект большинства компьютеров входит звуковая плата со всеми необходимыми устройствами для воспроизве- дения звука через колонки и записи с помощью микрофона. На диске записанный звук сохраняется в WAV-файлах (от «wave» — волна). При воспроизведении звука, записанного с помощью ком- пьютера, редко нужно качество компакт-диска, поэтому звуко- записывающие программы и на «Macintosh», и на Windows-ком- пьютерах используют 8-разрядное кодирование звука и неболь- шие частоты дискретизации — 22 050, 11 025 и 8000 Гц. При минимальных запросах (без стерео) объем 1 секунды записи можно сократить до 8 000 байт, т. е. 480 000 байт на минуту. Любители фантастических фильмов, бесспорно, знают, что компьютеры будущего общаются с людьми исключительно на человеческом языке. Что ж, если компьютер оборудован уст- ройствами для записи и воспроизведения цифрового звука, 479 Графическая революция достаточно разработать соответствующую программу, чтобы заставить его говорить. Есть два способа научить компьютер произносить узнава- емые слова и предложения. Можно записать фрагменты пред- ложений, фразы, слова и числа,  сказанные человеком, сохра- нить их в файлах, а затем комбинировать различными спосо- бами. Этот подход часто применяется в информационных си- стемах, доступ к которым осуществляется по телефону. Он удобен, когда воспроизводить предполагается ограниченный набор словосочетаний и чисел. В более общем случае для синтеза человеческой речи нуж- но как-то преобразовывать в цифровой звук текст в кодиров- ке ASCII. Во многих языках написание слов не всегда согласу- ется с их произношением, поэтому для преобразования по- требуется программа, определяющая произношение по сло- варю или с помощью сложного алгоритма. Можно, например, строить слова из отдельных звуков (фонем). Кроме того, та- кая программа должна будет учитывать и другие тонкости. Например, если предложение завершается вопросительным знаком, интонация в его конце должна изменяться. Распознавание голоса, т. е. преобразование цифрового зву- ка в коды ASCII, — задача куда более сложная. Из-за разнооб- разия диалектов иногда даже люди, говорящие на одном язы- ке, не понимают друг друга. Программы для персональных компьютеров, воспринимающие человеческую речь, существу- ют, но им, как правило, нужна некоторая «тренировка», преж- де чем они начинают понимать речь определенного человека. Но даже задача превращения звука в коды ASCII меркнет пе- ред окончательной целью — научить компьютер понимать человеческую речь. Это уже проблема из области искусствен- ного интеллекта. Звуковые платы в современных компьютерах снабжаются миниатюрными электронными синтезаторами, которые спо- собны имитировать звучание 175 музыкальных инструментов, включая 47 ударных. Они называются синтезаторами MIDI (Musical Instrument Digital Interface, цифровой интерфейс для музыкальных инструментов). Спецификация MIDI разрабо- тана в начале 1980-х консорциумом производителей электрон- ных синтезаторов для их подключения друг к другу и к ком- пьютерам. 480 Глава двадцать пятая В разных синтезаторах MIDI для генерации звука музыкаль- ных инструментов используются разные методы. Одни позво- ляют получить реалистичное звучание, другие — не очень. Общее качество работы данного синтезатора к спецификации MIDI отношения не имеет. Она требует от синтезатора лишь верной реакции на короткие сообщения длиной от 1 до 3 байт. Обычно в этих сообщениях указывается, какую ноту и на ка- ком инструменте нужно играть. MIDI-файл представляет собой последовательность сооб- щений MIDI с информацией о времени исполнения. Как пра- вило, в MIDI-файле полностью содержится  некое музыкаль- ное произведение, которое можно воспроизвести на MIDI-син- тезаторе компьютера. MIDI-файл обычно гораздо короче WAV- файла с той же записью. В отношении размера WAV-файл мож- но сравнить с точечным файлом, а MIDI-файл — с векторным. Недостаток MIDI-записи в том, что она может прекрасно зву- чать на одном синтезаторе и отвратительно — на другом. От цифрового звука логично перейти к цифровому видео. Кажущаяся подвижность кино и телевидения обеспечивается быстрой сменой неподвижных изображений, называемых кад- рами. В кинопроекторе изображение меняется с частотой 24 кад- ра в секунду, в телевидении США — 30 кадров в секунду, в теле- видении большинства других стран — 25 кадров в секунду. Компьютерный видеофайл — это просто последователь- ность точечных изображений, сопровождаемых звуком. Если не прибегать к уплотнению, размеры видеофайлов будут про- сто огромными. Считайте сами: кадр размером 640 � 480 пик- селов с 24-битовым кодированием цвета занимает 921 600 байт. При частоте смены изображений 30 кадров в секунду понадо- бится 27 648 000 байт для записи всего только одной секунды фильма! Минута записи займет 1 658 880 000 байт, а двухчасо- вой фильм — 199 065 600 000, т. е. почти 200 Гб. Вот почему видеоролики, предназначенные для воспроизведения на персо- нальном компьютере, как правило, отличаются краткостью, не- большим форматом кадра и скверным разрешением. Для сжатия видеозаписей применяется формат MPEG (Motion Pictures Expert Group, Группа специалистов по видео- записям). Объем записи в нем сокращается за счет того факта, что значительная часть текущего кадра является копией пре- дыдущего кадра. 481 Графическая революция Для формата MPEG разработано несколько стандартов. Например, в высококачественном телевидении HDTV и в дис- ках DVD (Digital Video Disks) применяется стандарт MPEG-2. По размеру диски DVD сходны с компакт-дисками, но в них информация записывается на обеих сторонах по два слоя на каждой стороне. Объем DVD-диска — около 16 Гб — превы- шает объем компакт-диска в 25 раз. Поскольку формат MPEG- 2 обеспечивает сжатие приблизительно в 50 раз, двухчасовой фильм занимает всего 4 Гб, т. е. один слой на одной стороне. Вероятно, в ближайшем будущем для распространения ПО будут применяться именно DVD-ROM-диски. Можно ли считать эти диски реализацией идей Ванневара Буша? Он, правда, писал о хранении информации на микро- пленках, но диски CD-ROM и DVD-ROM удобнее: на электрон- ном носителе найти нужные сведения гораздо проще, чем, ска- жем, в обычной книге. С другой стороны, Буш предполагал, что человек с помощью системы «Memex» сможет работать с не- сколькими микропленками одновременно. На большинстве же компьютеров дисковод для работы с CD-ROM- или DVD-ROM- дисками только один. Чтобы эффективнее хранить и обмени- ваться информацией, приходится соединять компьютеры меж- ду собой. Поскольку почти все места обитания или работы че- ловека связаны телефонными линиями, можно воспользовать- ся ими и для установления контакта между компьютерами. Назначение телефонной системы — в передаче по прово- дам звуков, но не битов. Для передачи по телефонному прово- ду двоичную информацию нужно преобразовать в звук. Моно- тонная звуковая волна с постоянной частотой и постоянной амплитудой никакой информации в себе не несет. Но измените эту волну, точнее, промодулируйте ее так, чтобы один из ее па- раметров по вашему желанию осциллировал между двумя фик- сированными состояниями, и вы сможете представлять с их помощью 0 и 1. Преобразует биты в звук модем (модулятор/де- модулятор; modem). Модем — последовательное устройство, так как в нем биты одного байта передаются друг за другом, а не все сразу (параллельный интерфейс, позволяющий благодаря на- личию 8 проводов передавать байт целиком, часто применяет- ся для подсоединения к компьютеру принтера). В первых модемах для передачи информации использовал- ся сдвиг по частоте: 0 соответствовал одной частоте сигнала, 1 482 Глава двадцать пятая — другой. Поскольку к каждому байту добавляются еще и биты начала и окончания передачи (старт-бит и стоп-бит), ре- ально для передачи байта требуется отправить по телефонной линии 10 бит. Первые модемы работали на скоростях 300 бит (30 байт) в секунду; в современных модемах с помощью вся- ческих ухищрений удается достигать скоростей в 100 раз выше. Первые энтузиасты компьютерных коммуникаций органи- зовывали с помощью персонального компьютера и модема электронные доски объявлений (Bulletin Board System, BBS), к которым другие компьютеры подключались по телефонным линиям. Эту концепцию использовали и крупные информа- ционные службы, например, CompuServe. Как правило, обмен информацией в таких системах производился исключительно в форме ASCII-текста. Ключевое отличие Интернета от первых массовых инфор- мационных систем — отсутствие выделенного центра. Дей- ствие Интернета основано на наборе протоколов для осуще- ствления связи между компьютерами. Главный из них — про- токол TCP/IP (Transmission Control Protocol/Internet Protocol). В сетях TCP/IP передаваемые блоки данных разбиваются на небольшие пакеты (packets), которые посылаются по комму- никационной (в случае домашних компьютеров, как правило, телефонной) линии независимо друг от друга, а на ее прием- ном конце вновь собираются в единое целое. Важную часть Интернета составляет его графическая под- система — World Wide Web (WWW), использующая прото- кол HTTP (Hypertext Transfer Protocol, протокол передачи ги- пертекста). Информация, представляемая на Web-страницах, оформляется с помощью языка разметки гипертекста (Hy- pertext Markup Language, HTML). Гипертекстом называется текст, связанный с дополнительной информацией на ту же тему посредством гиперссылок (нечто подобное и предлагал Ванневар Буш). Гиперссылки в HTML-файле указывают на другие Web-страницы, к которым можно из него перейти. Внешне формат HTML подобен RTF, о котором я уже го- ворил: он содержит только ASCII-текст и команды, определя- ющие его оформление. В HTML-файл можно также вставлять изображения в форматах GIF, JPEG и PNG (Portable Network Graphics). Несмотря на название, HTML в действительности 483 Графическая революция не является языком, подобным тем, о которых мы говорили в главах 19 и 24: это всего лишь способ форматирования текста. Иногда необходимо, чтобы при просмотре Web-страницы запускалась определенная программа. Она может работать как на компьютере-сервере (на котором хранится Web-страница), так и на компьютере-клиенте (на котором вы ее просматрива- ете) На сервере программная обработка страницы (например, электронного бланка, который вы заполнили) выполняется обычно с помощью сценариев CGI (Common Gateway Interface, интерфейс общего шлюза). Если программу предполагается запускать на компьютере-клиенте, она пишется на простом языке программирования JavaScript и включается в состав HTML-файла. Web-браузер интерпретирует операторы Java- Script и выполняет необходимые действия. Почему программа передается на компьютер-клиент в виде текста, а не исполняемого файла? Во-первых, это связано с тем, что программист заранее не знает, на каком компьютере она будет выполняться. Если это «Macintosh», в программе долж- ны содержаться машинные коды процессора PowerPC и вызо- вы функций API для Mac OS. На PC-совместимом компьюте- ре в ней должны использоваться машинные коды процессора Pentium и обращения к функциям API для Windows. А ведь есть и другие компьютеры, и другие графические ОС. Кроме того, вряд ли стоит допускать на свой компьютер все испол- няемые файлы без разбора. Некоторые из них могут попасть к вам из ненадежного источника и нанести компьютеру какой- либо вред. Чтобы как-то справиться с этой проблемой, компания Sun Microsystems разработала язык программирования Java. Не путайте его с JavaScript — Java представляет собой настоящий объектно-ориентированный язык, напоминающий С++. Если помните, в главе 24 я объяснял разницу между компилируе- мыми и интерпретируемыми языками. Java занимает проме- жуточное положение. Программу на Java нужно компилиро- вать, но в результате получается не машинный код, а байто- вые коды Java (Java Byte codes). По структуре они напоминают машинные коды, но не реального, а воображаемого компью- тера — виртуальной машины Java (Java Virtual Machine, JVM). Действие этого компьютера программным способом модели- рует тот компьютер, на котором программу нужно запустить, 484 Глава двадцать пятая используя для этого средства установленной на нем графичес- кой ОС. Таким образом, Java-программу можно запускать на любом компьютере. Большая часть этой книги посвящена передаче информа- ции по металлическим проводам с помощью электричества, но гораздо более надежной и быстрой оказывается передача данных с помощью света по оптоволоконному кабелю, изго- товленному из стекла или полимерных материалов. Скорость передачи данных по такому кабелю может достигать милли- арда бит в секунду. По-видимому, в будущем большую часть информации в наши дома и служебные кабинеты будут доставлять не элект- роны, а фотоны. Они словно возвращают нас в далекие дни детства, когда вспышки света помогали нам обмениваться по- луночной мудростью с лучшим другом, жившим на противо- положной стороне улицы. Благодарности Книга Код была задумана в 1987 г. Она стучалась мне в голову в течение десятилетия и лишь с января 1996 г. по июль 1999 г. наконец оформилась в виде файла Microsoft Word. Я чрезвы- чайно признателен: • Шерил Кантер (Sheryl Canter), Иену Истлунду (Jan Eastlund), Питеру Голдеману (Peter Goldeman), Линн Магалска (Lynn Magalska) и Дейдре Синнотт (Deirdre Sinnott) — читателям первых набросков за их комментарии, замечания и пред- ложения; • моему агенту Клодетт Мур (Claudette Moore) из Moore Literary Agency и всем сотрудникам Microsoft Press, кото- рые помогли воплотить замысел Кода в жизнь; • моей маме; • Киске, делившей со мной кров с 1982 по май 1999 г., — вдох- новительнице всех кошачьих примеров, которые встреча- ются в книге; • Web-узлам, подобным Bibliofind (www.bibliofind.com) и Advanced Book Exchange (www.abebooks.com), предоставля- ющим удобный доступ к старым книгам, а также сотруд- никам отдела научных, технических и деловых книг Нью- Йоркской публичной библиотеки (www.nypl.org); • моим друзьям, без которых книга не была бы написана; • и еще раз Дейдре — идеальному читателю и не только. Библиография Аннотированная библиография к этой книге размещена на Web-узле www.charlespetzold.com/code. A American Telephone & Tele- graph 302, 304, 420 см. так- же Bell Telephone Laboratories API см. интерфейс прикладного программирования «Apple», компьютер — «Apple II» 354, 462, 469 — «Apple Lisa» 467 — «Macintosh» 354–355, 467, 469, 470, 474 ASCII 363–370, 373–376, 390–392, 395, 407, 479, 482 — в языках программирования высокого уровня 449, 461– 462 — вывод на экран 405–406 B BBC 6 BCD 336, 371, 426–427 — уплотненный 427 Bell Systems Technical Journal, жур- нал 300 Bell Telephone Laboratories 301– 302, 420, 456, 471, 477 см. также American Telephone & Telegraph Busicom 317 C CD-ROM-диск 478, 481 см. также компакт-диск CPU см. центральное процессор- ное устройство CRT см. катодно-лучевая трубка D Digital Equipment 445 Digital Research 410 DRAM см. динамическая память DVD-ROM-диск 481 E EBCDIC 370–373 Eckert-Mauchly Computer 301 EDVAC, компьютер 299–300 ENIAC, компьютер 299–300 escape-код 22 F Fairchild Semiconductor 307 G GNU, проект 421 GUI см. графический интерфейс пользователя I IBM 215–216, 295, 301, 322, 354, 399, 419, 462–463 — и языки программирования высокого уровня 455, 469 — периферийные устрой- ства 379–381 — перфокарта 370–373, 394, 454 IEEE 431 Intel 317, 319–320, 352–353, 354, 437 J Java, язык программирова- ния 483–484 JavaScript, язык программирова- ния 483 K Keuffel & Esser 290 L LIFO 338 Linux, операционная систе- ма 421 M «Mark I/II», компьютер 297 Memex 459–460, 481 Предметный указатель 487 Предметный указатель Microsoft 456 MOS см. МОП Motorola 320, 352–353, 354–355, 438 MS-DOS, операционная систе- ма 417–419, 461, 468, 469 Multics, операционная система 420 N National Semiconductor 321 npn-транзистор 303–304 O OCR см. распознавание символов P Pentium, микропроцессор 354, 438 PL/I, язык программирования 455 PostScript 472 PowerPC, микропроцессор 354– 355, 438 R RAM см. оперативная память; память Remington Rand 301, 399, 445 RISC, архитектура 354–355 ROM см. постоянное запомина- ющее устройство S shift-код 21–22 Shockley Semiconductor Laborato- ries 307 SRAM см. статическая память Sun Microsystems 483 T Tabulating Machine 295 Texas Instruments 307, 308, 317, 321 TTL см. ТТЛ «TTL Data Book for Design Engineers» 309–315 U Unicode 376 UNIVAC, компьютер 301, 445 UNIX 302, 419–421, 456 V VisiCalc 462 W WYSIWYG 468 X Xerox 466 Z Zenith 308 А автоматизация 249–250 адрес 238 адресация — индексная 329 — непосредственная 331 — прямая 329 азбука Морзе 2–3, 5–6, 33, 78 см. также Морзе Сэмюэль — использование в телегра- фе 35–37, 47–49 — разработка 10–14 — сопоставление с — — наборами символов 358, 362 — — штрих-кодами 91, 95–97 Айверсон Кеннет 457 аккумулятор 251, 256–257, 282, 326, 350 АЛГОЛ, язык программирова- ния 446–453, 457 алгоритм 56, 288, 446 Аллен Пол 456 АЛУ см. арифметико-логическое устройство «Альтаир» 353, 378, 456 аль-Хорезми Мухаммед ибн Муса 56 Ампер Андре Мари 30 Аналитическая Машина 117, 292 аналоговый компьютер 281 аппаратное обеспечение 282 488 Предметный указатель арабская система счисления 56–57 аргумент 284 Аристотель 99 арифметико-логическое устрой- ство 282, 334 архитектура — RISC 354–355 — Неймана 300, 457 ассемблер 287, 457 ассоциативный закон 102, 103 Атанасофф Джон 299 Б баг 297 база 303 базовая система ввода-вывода 414 Байрон Августа Ада 292–293, 456 байт 215–216 — младший 262, 352 — старший 263, 352 Барбье Шарль 16 Бардин Джон 302–303 БЕЙСИК, язык программирова- ния 455–456 бел 477 Белл Александр Грейам 304, 477 Беркс Артур 299 бит 76, 78, 120, 300 — знака 182, 427 — младший 165 — и переключатель 122 — переноса 154, 263–264 — старший 165 — суммы 154 блок 450 Бодо Эмиль 359 бодо, код 359–362, 370 Брайль Луи 15–17, 19 Брайля азбука 4, 15–22, 33, 78, 295, 358–359 — сравнение с азбукой Морзе 97 Браттейн Уолтер 302–303 Бриклин Дэн 462 булева алгебра 101–109, 150–151, 300 Буль Джордж 100, 116–117, 150 буфер 148–149 Буш Ванневар 459, 481, 482 Бэббидж Чарльз 117, 291–293 В вакуумная лампа 167, 297–298, 302, 305 Ватсон Томас 295 ввода устройство 122–123, 281, 322 ввод-вывод с распределением па- мяти 348 векторное изображение 472 ветвление 274, 344–347 вибратор 188, 207, 212, 253 видеоадаптер 387 — графический 393 видеоплата см. видеоадаптер визуальное программирова- ние 471 Винер Норберт 301 Вирт Николас 456 виртуальная память 421 Возняк Стефан 354 Вольта Алессандро 30 время установки 311 встроенная функция 447 входной сигнал 127 выборка команды 270 вывода устройство 123, 281, 322 выходной сигнал 127 — уровень 311 вычислимость 298, 318 Г Гейтс Билл 456 генератор — символов 391–392 — тактовых импульсов 324 герц 189 Герц Генрих Рудольф 189 Гибсон Вильям 301 гигабайт 243 гипертекст 482 Голдстайн Герман 299 489 Предметный указатель головка 399 графический интерфейс пользо- вателя 467, 469 Гюнтер Эдмунд 290 Д Дагерр Луи 45 — дагерротип 45 Даммер Джеффри 306 данные 282 делитель частоты 209 децибел 477 дешифратор 141, 149, 236–238 Джобс Стивен 354, 467 Джордан Ф. В. 192 Диксон Вильям 394 динамическая память 386–387 дискета 400 дисплей 387–395, 405–406, 419, 462, 463 дистрибутивный закон 102, 103, 121 дополнение — до 1 173, 177 — до 2 181–182 — до 9 170 — до 10 180–181 Ж Жаккард Жозеф Мари 291 — ткацкий станок его 291 жесткий диск 400 З загрузка 413 заземление 39–41 заимствование 169 закрытая архитектура 379–380 защелка 199, 231–233 см. также триггер — нулевая 278 — для переноса 264 знаковый разряд 182 значащая часть числа 429 зуммер 186–187 И изображение 472 изолятор 29 имя файла 411 инверсия 173 инвертор 138, 176, 187, 261 — сборка памяти 234 индекс 451 инициализация 406 иностранный язык 53, 216, 374, 376 интегральная микросхема 307– 317, 377, 391–392 интегрированная среда разработ- ки 471 интерфейс прикладного програм- мирования 416–417, 468–469, 471, 483 информация 78–79, 81–82 — теория 300–301 — хранение с помощью тригге- ров 192–193 истина/ложь 97, 107, 452 К калькулятор 225, 290–291 карта Холлерита 295 каталог 411, 419 катодно-лучевая трубка 387, 461, 464 Кемени Джон 455 кибернетика 301 киберпространство 301 Килби Джек 307 Килдалл Гэри 410 килобайт 241–242 килобит 244 клавиатура 395–398, 406–408, 466 кластер 418 ключевое слово 446 КМОП 315 Кнут Дональд 453 КОБОЛ, язык программирова- ния 454 код 282 — операции 258–259, 325–326 490 Предметный указатель — символа 357 коллектор 303 «Колосс», компьютер 298 командный процессор 407–408 комментарий 286 коммутативный закон 101–102, 103, 120 компакт-диск 49, 476–478 компилятор 444, 445 конвейеризация 355 консоль 414 короткое замыкание 31 кости Непера 290 Курц Томас 455 Кэрролл Льюис (Чарльз Додж- сон) 99 кэш 355 Л Лейбниц Готфрид Виль- гельм 100, 290 ленточный накопитель 399 логарифм 86, 281, 291–292, 429, 435 логика 97, 99–117 — таблица 194 логический вентиль 119–151 — И 132–135 — И-НЕ 145–147 — и вакуумная лампа 297–298, 305 — и двоичное суммирова- ние 154–160 — ИЛИ 135–137 — ИЛИ-НЕ 142–145 — и микросхема 309–310, 312– 314 — и память 230, 234, 236–237 — и полупроводник 305–306 — и реле 128, 207 — Исключающее ИЛИ 158–159 — совпадения 159 — триггер 190–193, 200, 202 — эквивалентности 159 Лонгфелло Генри Уодсворт 79–81 магнитный накопитель 398–401 — магнитный диск 399–400 — — гибкий и жесткий 400 — — дорожки и сектора 400 — — интерфейсы 400–401 М макетная плата 316 Маккарти Джон 457 мантисса 429 Маркес Габриэль Гарсия 3 Массачусетский технологический институт 420, 459, 463 массив 451 массив RAM 239, 314 см. так- же оперативная память; па- мять — объем 241 материнская плата 378 Машина Разностей 292, 293 машинный код 282, 287, 406 мегабайт 242–243 мегабит 244 Международный телекоммуника- ционный союз 359 меню 467 метафайл 472 метка 285 микрокод 437 микропроцессор 281–282, 317, 321–356 — 6800 321–323, 349–351, 354 — 8080 321–349, 354 — Pentium 354, 438 — PowerPC 354–355, 438 — и периферийное устрой- ство 377–378, 380, 400–401 — и язык программирова- ния 442 — однокристальный 322 микросхема 307–317 мнемокод 283, 326, 439 многозадачность 421 модем 481–482 монтаж накруткой 316 МОП 382 Морган Огастес 150–151 491 Предметный указатель Морзе Сэмюэль 9, 15, 45–47, 50, 117, 291 см. также азбука Морзе Моучли Джон 299 мультимедиа 478 Мур Гордон 308, 317 — Мура закон 308, 355, 387 Мэлтин Леонард 83–85 Мюррей Дональд 359 Н набор символов 357 см. также ASCII надежность 81 Найквист Гарри 477 наносекунда 311–312 напряжение 30, 44, 49 — в логическом вентиле 127, 133–134 — в микросхемах — — КМОП 315 — — ТТЛ 311, 386 научная нотация 428 Нейман Джон 299, 300, 463 нейтрон 25 Непер Джон 290 Нойс Роберт 307, 312, 317 Ньютон Исаак 100 О обработчик клавиатуры 406–408 обратная связь 190 общий провод 37, 39 объектно-ориентированное про- граммирование 457, 470 Ойи Валентен 16, 47 Ом Георг Симон 30 — Ома закон 30, 43 операнд 101 оперативная память см. также память — и микропроцессор 318, 322 — и операционная система 413 — и периферийное устрой- ство 377–378, 380, 400–401 оператор 447–453 — присваивания 448 операционная система 401, 410, 467–470 — CP/M 410–417, 461, 468 — Mac OS 421, 467 — MS-DOS 417–419, 461, 468, 469 — Multics 420 — UNIX 419–421 — Windows 421, 469 — многозадачная 421 Орландо Тони 77, 80 осциллограф 463 открытая архитектура 379 Отред Вильям 290 отрицание 173 отрицательная логика 311 отрицательный переход 206 П память 229–247, 267–269, 281, 300, 306, 447–448 см. также оперативная память — 1-битовая 199 — динамическая и статичес- кая 386–387 — и периферийное устрой- ство 400–401 — магнитная 300 — объем 241 — оперативная и постоянная 401 — релейная 244 — ртутная линия задержки 300 — с произвольным досту- пом 238–239, 338 — — энергозависимость 246–247 Паскаль, язык программирова- ния 456 Паскаль Блез 290 Патерсон Тим 417 Паульсен Вальдемар 398 переключения код 21–22 переменная 447–448 перенос 154, 169 — сквозной и ускоренный 167 период 189 периферийное устройство 347 492 Предметный указатель петабайт 243 печатная плата 316–317 пиксел 389, 463–465 плавающая точка 429 — оборудование для вычисле- ний 436–438 плата расширения 378 подпрограмма 344–345 полный сумматор 161–162 положительный переход 206 полоса пропускания 388 полупроводник 303 полусумматор 160–161 порт ввода-вывода 348 порядок 429 последовательный доступ 338 постоянное запоминающее уст- ройство 391–392 — программируемое 408 — стираемое 409 поток данных 215 прерывание 348–349, 378–379, 418 приглашение системы 414 прикладная программа 415 пробел 359, 360, 363–364 проводник 29, 39, 43 программное обеспечение 282, 379, 380, 403 программный счетчик 282, 343, 350 произвольный доступ 238–239, 338 противоречия закон 105 протокол 482 протон 25 процессор см. микропроцессор прямой доступ к памяти 380 Пфлоймер Фриц 399 Р развертка 387–388 разрешение 389, 393–395 разряд — знаковый 182 — суммы и переноса 154 распознавание символов 90, 475 расширение файла 418 регистр 327, 340, 350 реле 50, 124, 207, 244 — двухпозиционное 129 решето Эратосфена 452 Ритчи Деннис 420, 456 С сжатие 474–475, 480 Си, язык программирова- ния 456–457 — Си++ 471 сила тока 30 силлогизм 99, 105 синтаксис 443 синхронизация 188, 199, 253, 270 см. также вибратор Сискел Джин 82–83 система счисления 54–57 — арабская 56–57 — восьмеричная 62–67, 70–71, 217–219 — двоичная 69–76, 216–217, 429 — — двоичное число со зна- ком 183 — — и переключатель 111 — — представление отрицатель- ных чисел 181–183 — — преобразование 221 — десятичная 53–60, 70–71, 216–217, 424 — — альтернативы 61–76 — — и вычитание 169–172 — — и шестнадцатеричная сис- тема 221–225 — — преобразование 221–225 — — числа с плавающей точ- кой 428–429 — позиционная 56, 60 — четверичная 68–69, 70–71 — шестнадцатеричная 219–227 системная плата 380 сканер 90–94, 473 слово состояния программы 333 слот расширения 378 493 Предметный указатель Смит Оберлин 398 сопротивление 29–30, 43–44 сопроцессор 437 стандарт IEEE 431 статическая память 386 стек 338–342 — переполнение и исчезнове- ние 341 — указатель 340, 343, 350 Стибиц Джордж 296 Страуструп Бьерн 471 строка 359 сумматор 153–167, 174–176, 250 счетчик 207–212 счеты 289 Т таблица истинности см. таблица логики таблица логики 194 таблица размещения фай- лов 418 таблица состояний см. таблица логики табулирующая машина 294 табулятор 369 Таки Джон Уайлдер 76 тактовая частота 318 твердотельная электроника 304 телеграф 35–37, 46–52, 117, 123, 295 см. также азбука Морзе телетайп 359–362 телефон 81, 85–86 терабайт 243 тетрада 216 тип файла 411 ток 30 Томпсон Кен 420 Торвальдс Линус 421 точечное изображение 472–473 точность, простая и двойная 431 транзистор 167, 303–306, 322, 355, 382 см. также КМОП; ТТЛ триггер 192 — и микросхема 312–314 — и память 231 — со сбросом и установкой 193 — со срабатыванием — — по фронту 204–207, 212– 213 — — по уровню 198–199, 204, 207, 230 тригонометрические функ- ции 291, 435–436 ТТЛ 309–315, 382, 386 см. так- же транзистор Тьюринг Алан 298, 318, 319 — тест 298 У Уатт Джеймс 32 указатель 457 — стека 340, 343, 350 Уорнок Джон 472 управляющий сигнал 260, 324 условный переход 276–277 устойчивое состояние 192 устройство — ввода/вывода 281, 347 — периферийное 347 утилита 415 Ф файл 410, 411 — ASCII 412 — текстовый и двоичный 412 файловая система 410 — иерархическая 419 Фейнман Ричард 453 фиксированная точка 428 флажок 333 — нуля 279 Флеминг Джон Эмброуз 297 фонограф 476 Форест Ли 297 ФОРТРАН, язык программирова- ния 445–446, 455 Фрэнкстон Боб 462 функциональная таблица см. таблица логики 494 Предметный указатель Х Хейлсберг Андерс 456 Холлерит Герман 293–295 Хоппер Грейс Мюррей 297, 445 Хофф Тед 317 Ц центральное процессорное уст- ройство 281 цикл 189, 449 — командный 270 циклический сдвиг 337 цифровой компьютер 281 Цузе Конрад 296 Ч частота 189 — дискретизации 477 четность 92, 333 Ш Шеннон Клод Элвуд 120, 123, 151, 300–301 шина 377 Шокли Вильям 302–303, 305 штрих-код 89–95 шум 81, 311 Шуц Георг 293 Шуц Эдуард 293 Э Эберт Роджер 82–83 Эдисон Томас 32, 394, 476 Эйкен Говард 296–297 Экерт Преспер 299 экзабайт 243 Эклс Вильям Генри 192 электромагнит 46–47, 50–52, 186–187, 399 — в логическом вентиле 123, 124 — в памяти 246–247 электрон 24–26, 27–30, 41 эмиттер 303 Энджелбарт Дуглас 466 Эратосфен 452 Я язык — иностранный 53, 216, 374, 376 — и речь 3–4 — машинный 282, 287, 406 — программирования — — высокого уровня  443–457 — — низкого уровня  443 Об авторе Чарльз Петцольд (Charles Petzold) пишет программы более 20 лет. И вот уже 15 лет он пишет книги и ста- тьи о программировании. Его знакомство с вычислитель- ной техникой состоялось в начале 1970-х, когда он собственноручно собрал компьютер с процессором Z-80 для управления музыкальным синтезатором. С 1985 г. он сотруд- ник журнала PC Magazine, с 2000 г. — журнала MSDN Magazine. С 1987 по 2000 г. он был редактором жур- нала Microsoft Systems Journal. Его статья, опубликованная в декабре 1986 г. во втором номере этого журнала, считается первой статьей о программировании для Windows. А в 1988 г. он посвятил этой теме целую книгу — Programming Windows, которую порой называют Войной и миром для этой операционной системы. К настоящему време- ни она выдержала уже пять изданий. В 1994 г. Чарльзу Пет- цольду была вручена премия «Пионер Windows», учрежден- ная Windows Magazine и Microsoft Corporation, «в знак при- знания его вклада в успех Microsoft Windows». Помимо программирования, Чарльз Петцольд увлекается фотографией (но не автоматизированной цветной, а старомод- ной черно-белой), астрономией и эволюционной психологи- ей. Он живет в Нью-Йорке. Петцольд Чарльз Код Перевод с английского под общей редакцией Д. З. Вибе Компьютерный дизайн и верстка Д. В. Петухов Технический редактор С. В. Дергачев Дизайнер обложки Е. В. Козлова Оригинал-макет выполнен с использованием издательской системы Adobe PageMaker 6.0 Главный редактор А. И. Козлов Подготовлено к печати издательско-торговым домом «Русская Редакция» Лицензия ЛР № 066422 от 19.03.99 г. Подписано в печать 21.06.2001 г. Тираж 4 000 экз. Формат 84х108/32. Физ. п. л. 16 Отпечатано в ОАО «Типография "Новости"» 107005, Москва, ул. Ф. Энгельса, 46 