Flaws in software has always interested me, such as the recent MOVEit attacks from the Russian linked ransomware group, Cl0p, who have managed to cause data breaches in a plethora of companies, such as the BBC and US federal agencies, greater than 200 companies have been affected. Cybersecurity is a very interesting field of computer science to me, where finding possible solutions and ways to prevent software from being prone to attacks is immensely interesting to me, stemming from my interest in programming. A possible fix to the MOVEit would be taking the more expensive (yet more secure) route of creating your own software, as this minimises the chance of a wide scale attack affecting the company.

I have completed a network and cyber security MOOC by (ISC)2 where I learnt the security of computer networks, with older, less secure network types such as TCP/IP, which lacks many of the security layers a modern model has to prevent network attacks, such as the OSI model, which has 7 layers, with network security built into every layer.

In python I have made many discord bots aimed at improving the general experience of discord, without sending any data to possible (insecure) third parties, functions of these bots include an exam countdown and a LaTeX notation translator.

I am currently writing a privacy focused voice assistant in python as part of my computer science NEA. My idea for my project is to run as much as possible locally, so that it minimises the chances of data being leaked by a company, I have achieved this by having the voice recognition, timers and other aspects of the assistant all being offline. The voice recognition is being ran in TensorFlow, which although is slower, it does not require access to the internet. However, it is impossible to run a voice assistant completely offline, aspects such as music playback, web search and translate functions require an access to the internet, for example, music playback is running through Spotify, where I used python to control and manage music playback and I used JS for the actual music playback. For web search, I have chosen to use DuckDuckGo as the main search engine, since no API key is required, and Bing search as the backup, since it has a free tier. With translate, I have found Bing translate to give better results and there is no requirement for external libraries, unlike google. Volume control was a tedious problem, in Linux, you only need to run a terminal command; whilst in windows, for volume control, you need to use some C libraries (Ctypes and PyCaw) to interface with the volume mixer. Timers was a rather interesting problem, since python is primarily a single threaded language, it waits for one function to finish executing before running another, since it is not desirable to not be able to use a voice assistant whilst a timer is running, I chose to use threading, since it allows for the countdown to run in another thread and play a sound once it’s finished.

I have also learnt how to make android apps in both python and Java, making a calculator in both. Since python is not a compiled, to run it on android, you need to have a python interpreter in the .apk file, this makes the python calculator slow and inefficient, compared to the Java one. Batch script is another language that I have dabbled with, creating automated app installs and removing ‘features’ from Microsoft, like forced use of Microsoft edge by deleting the Microsoft Edge files and restoring the Windows 10 context menu in windows 11 using an edit to the registry.

I have completed multiple work experience days at Openreach, where I learnt everything from how fibre cables are fused without making bubbles to the fibres, to their cyber security practices, such as physically locking high security rooms to everyone but a few selected people (such as rooms that supply the army). I have taken part in multiple UKMT maths challenges, where we competed against some of the best mathematicians in the country.